{"version":3,"sources":["/home/skymet/Videos/main/node_modules/ng-chartist/fesm2015/ng-chartist.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqFC,scAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;CAOD;;;;;;;;;0BAOC","file":"ng-chartist.js","sourcesContent":["import * as Chartist from 'chartist';\nimport { Component, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {\\@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {\\@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n * ```html\n * <x-chartist\n * [type]=\"type\"\n * [data]=\"data\"\n * [options]=\"options\"\n * [responsiveOptions]=\"responsiveOptions\"\n * [events]=\"events\"\n * ></x-chartist>\n * ```\n */\nclass ChartistComponent {\n    /**\n     * @ignore\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        /**\n         * Event emitted after Chartist chart has been initialized.\n         *\n         * Event handler function will receive chart instance argument.\n         */\n        this.initialized = new EventEmitter();\n    }\n    /**\n     * @ignore\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.type && this.data) {\n            this.renderChart();\n        }\n    }\n    /**\n     * @ignore\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.update(changes);\n    }\n    /**\n     * @ignore\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.detach();\n            this.chart = null;\n        }\n    }\n    /**\n     * @ignore\n     * @private\n     * @return {?}\n     */\n    renderChart() {\n        /** @type {?} */\n        const nativeElement = this.elementRef.nativeElement;\n        if (!(this.type in Chartist)) {\n            throw new Error(`${this.type} is not a valid chart type`);\n        }\n        this.chart = ((/** @type {?} */ (Chartist)))[this.type](nativeElement, this.data, this.options, this.responsiveOptions);\n        if (this.events) {\n            this.bindEvents();\n        }\n        this.initialized.emit(this.chart);\n    }\n    /**\n     * @ignore\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    update(changes) {\n        if (!this.type || !this.data) {\n            return;\n        }\n        if (!this.chart || 'type' in changes) {\n            this.renderChart();\n        }\n        else if (changes.data || changes.options) {\n            ((/** @type {?} */ (this.chart))).update(this.data, this.options);\n        }\n    }\n    /**\n     * @ignore\n     * @private\n     * @return {?}\n     */\n    bindEvents() {\n        for (const event of Object.keys(this.events)) {\n            this.chart.on(event, this.events[event]);\n        }\n    }\n}\nChartistComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'x-chartist',\n                template: '',\n                styles: [`\n      :host {\n        display: block;\n      }\n    `]\n            }] }\n];\n/** @nocollapse */\nChartistComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nChartistComponent.propDecorators = {\n    data: [{ type: Input }],\n    type: [{ type: Input }],\n    options: [{ type: Input }],\n    responsiveOptions: [{ type: Input }],\n    events: [{ type: Input }],\n    initialized: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChartistModule {\n}\nChartistModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ChartistComponent],\n                imports: [],\n                exports: [ChartistComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ChartistComponent, ChartistModule };\n"]}