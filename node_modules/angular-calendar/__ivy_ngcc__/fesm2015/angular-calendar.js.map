{"version":3,"sources":["/home/skymet/Videos/main/node_modules/angular-calendar/fesm2015/angular-calendar.js"],"names":[],"mappingsmBC,wJAgCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;;;;;;CAeD,oJAsBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKA;;;;;;;;;;;;;;;;;;;;;;;;CAeD,mFA2BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0HD,+UAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmjBD,+JAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsFD,+JAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmED,2FAKC;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiHD,mJAGC;;;;;;;qEAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiDD,0GAKC;;;;;;;;;;;;;;kCAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoHD,4HAKC;;;;;;;;;;qFAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsED,uMAKC;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0ED,sGAGC;;;;;;;qEAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ID,gJAGC;;;;;;;;;;;yDAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6HD,gJAGC;;;;;;;qkTD,8RA2EC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqLD,8HAqCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,oDAsFC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DD,qGA4DC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkm1BD,+CAyRC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8RD,yJAqDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,0FAiEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BD,2HAoCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAwBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkcD,+CA4IC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmOD,8GAkCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoBD,0FA0DC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAsBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD;;;;;;;;;;;;;;;;;;;;;;;;0BAgBC","file":"angular-calendar.js","sourcesContent":["import { Component, Input, Directive, ElementRef, Injector, Renderer2, ComponentFactoryResolver, ViewContainerRef, Inject, HostListener, EventEmitter, Output, Injectable, Pipe, LOCALE_ID, InjectionToken, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { DOCUMENT, formatDate, CommonModule } from '@angular/common';\nimport { positionElements } from 'positioning';\nimport { Subject, of, timer, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { validateEvents as validateEvents$1, getMonthView, getWeekViewHeader, getWeekView, getDayView, getDayViewHourGrid } from 'calendar-utils';\nexport { DAYS_OF_WEEK } from 'calendar-utils';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { __rest } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarEventActionsComponent {\n    constructor() {\n        this.trackByActionId = (/**\n         * @param {?} index\n         * @param {?} action\n         * @return {?}\n         */\n        (index, action) => action.id ? action.id : action);\n    }\n}\nCalendarEventActionsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-event-actions',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-trackByActionId=\"trackByActionId\"\n    >\n      <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n        <a\n          class=\"cal-event-action\"\n          href=\"javascript:;\"\n          *ngFor=\"let action of event.actions; trackBy: trackByActionId\"\n          (mwlClick)=\"action.onClick({ event: event })\"\n          [ngClass]=\"action.cssClass\"\n          [innerHtml]=\"action.label\"\n        >\n        </a>\n      </span>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        trackByActionId: trackByActionId\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarEventActionsComponent.propDecorators = {\n    event: [{ type: Input }],\n    customTemplate: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarEventActionsComponent.prototype.event;\n    /** @type {?} */\n    CalendarEventActionsComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarEventActionsComponent.prototype.trackByActionId;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarEventTitleComponent {\n}\nCalendarEventTitleComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-event-title',\n                template: `\n    <ng-template #defaultTemplate let-event=\"event\" let-view=\"view\">\n      <span\n        class=\"cal-event-title\"\n        [innerHTML]=\"event.title | calendarEventTitle: view:event\"\n      >\n      </span>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        view: view\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarEventTitleComponent.propDecorators = {\n    event: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    view: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarEventTitleComponent.prototype.event;\n    /** @type {?} */\n    CalendarEventTitleComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarEventTitleComponent.prototype.view;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarTooltipWindowComponent {\n}\nCalendarTooltipWindowComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-tooltip-window',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-contents=\"contents\"\n      let-placement=\"placement\"\n      let-event=\"event\"\n    >\n      <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n        <div class=\"cal-tooltip-arrow\"></div>\n        <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        contents: contents,\n        placement: placement,\n        event: event\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarTooltipWindowComponent.propDecorators = {\n    contents: [{ type: Input }],\n    placement: [{ type: Input }],\n    event: [{ type: Input }],\n    customTemplate: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarTooltipWindowComponent.prototype.contents;\n    /** @type {?} */\n    CalendarTooltipWindowComponent.prototype.placement;\n    /** @type {?} */\n    CalendarTooltipWindowComponent.prototype.event;\n    /** @type {?} */\n    CalendarTooltipWindowComponent.prototype.customTemplate;\n}\nclass CalendarTooltipDirective {\n    /**\n     * @param {?} elementRef\n     * @param {?} injector\n     * @param {?} renderer\n     * @param {?} componentFactoryResolver\n     * @param {?} viewContainerRef\n     * @param {?} document\n     */\n    constructor(elementRef, injector, renderer, componentFactoryResolver, viewContainerRef, document //tslint:disable-line\n    ) {\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.viewContainerRef = viewContainerRef;\n        this.document = document;\n        // tslint:disable-line no-input-rename\n        this.placement = 'auto'; // tslint:disable-line no-input-rename\n        // tslint:disable-line no-input-rename\n        this.delay = null; // tslint:disable-line no-input-rename\n        this.cancelTooltipDelay$ = new Subject();\n        this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(CalendarTooltipWindowComponent);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this.tooltipRef &&\n            (changes.contents || changes.customTemplate || changes.event)) {\n            this.tooltipRef.instance.contents = this.contents;\n            this.tooltipRef.instance.customTemplate = this.customTemplate;\n            this.tooltipRef.instance.event = this.event;\n            this.tooltipRef.changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.hide();\n    }\n    /**\n     * @return {?}\n     */\n    onMouseOver() {\n        /** @type {?} */\n        const delay$ = this.delay === null ? of('now') : timer(this.delay);\n        delay$.pipe(takeUntil(this.cancelTooltipDelay$)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.show();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    onMouseOut() {\n        this.hide();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    show() {\n        if (!this.tooltipRef && this.contents) {\n            this.tooltipRef = this.viewContainerRef.createComponent(this.tooltipFactory, 0, this.injector, []);\n            this.tooltipRef.instance.contents = this.contents;\n            this.tooltipRef.instance.customTemplate = this.customTemplate;\n            this.tooltipRef.instance.event = this.event;\n            if (this.appendToBody) {\n                this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n            }\n            requestAnimationFrame((/**\n             * @return {?}\n             */\n            () => {\n                this.positionTooltip();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    hide() {\n        if (this.tooltipRef) {\n            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.tooltipRef.hostView));\n            this.tooltipRef = null;\n        }\n        this.cancelTooltipDelay$.next();\n    }\n    /**\n     * @private\n     * @param {?=} previousPositions\n     * @return {?}\n     */\n    positionTooltip(previousPositions = []) {\n        if (this.tooltipRef) {\n            this.tooltipRef.changeDetectorRef.detectChanges();\n            this.tooltipRef.instance.placement = positionElements(this.elementRef.nativeElement, this.tooltipRef.location.nativeElement.children[0], this.placement, this.appendToBody);\n            // keep re-positioning the tooltip until the arrow position doesn't make a difference\n            if (previousPositions.indexOf(this.tooltipRef.instance.placement) === -1) {\n                this.positionTooltip([\n                    ...previousPositions,\n                    this.tooltipRef.instance.placement\n                ]);\n            }\n        }\n    }\n}\nCalendarTooltipDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlCalendarTooltip]'\n            },] }\n];\n/** @nocollapse */\nCalendarTooltipDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Injector },\n    { type: Renderer2 },\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCalendarTooltipDirective.propDecorators = {\n    contents: [{ type: Input, args: ['mwlCalendarTooltip',] }],\n    placement: [{ type: Input, args: ['tooltipPlacement',] }],\n    customTemplate: [{ type: Input, args: ['tooltipTemplate',] }],\n    event: [{ type: Input, args: ['tooltipEvent',] }],\n    appendToBody: [{ type: Input, args: ['tooltipAppendToBody',] }],\n    delay: [{ type: Input, args: ['tooltipDelay',] }],\n    onMouseOver: [{ type: HostListener, args: ['mouseenter',] }],\n    onMouseOut: [{ type: HostListener, args: ['mouseleave',] }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.contents;\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.placement;\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.customTemplate;\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.event;\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.appendToBody;\n    /** @type {?} */\n    CalendarTooltipDirective.prototype.delay;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.tooltipFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.tooltipRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.cancelTooltipDelay$;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTooltipDirective.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass DateAdapter {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addWeeks = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addMonths = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.subDays = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.subWeeks = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.subMonths = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getISOWeek = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} dayOfMonth\n     * @return {?}\n     */\n    DateAdapter.prototype.setDate = function (date, dayOfMonth) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} month\n     * @return {?}\n     */\n    DateAdapter.prototype.setMonth = function (date, month) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} year\n     * @return {?}\n     */\n    DateAdapter.prototype.setYear = function (date, year) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getDate = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getMonth = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getYear = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addDays = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addHours = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addMinutes = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} amount\n     * @return {?}\n     */\n    DateAdapter.prototype.addSeconds = function (date, amount) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.differenceInDays = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.differenceInMinutes = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.differenceInSeconds = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.endOfDay = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.endOfMonth = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?=} options\n     * @return {?}\n     */\n    DateAdapter.prototype.endOfWeek = function (date, options) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getDay = function (date) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.isSameDay = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.isSameMonth = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {?} dateLeft\n     * @param {?} dateRight\n     * @return {?}\n     */\n    DateAdapter.prototype.isSameSecond = function (dateLeft, dateRight) { };\n    /**\n     * @abstract\n     * @param {...?} dates\n     * @return {?}\n     */\n    DateAdapter.prototype.max = function (dates) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} hours\n     * @return {?}\n     */\n    DateAdapter.prototype.setHours = function (date, hours) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?} minutes\n     * @return {?}\n     */\n    DateAdapter.prototype.setMinutes = function (date, minutes) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.startOfDay = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.startOfMinute = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.startOfMonth = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @param {?=} options\n     * @return {?}\n     */\n    DateAdapter.prototype.startOfWeek = function (date, options) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getHours = function (date) { };\n    /**\n     * @abstract\n     * @param {?} date\n     * @return {?}\n     */\n    DateAdapter.prototype.getMinutes = function (date) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst CalendarView = {\n    Month: 'month',\n    Week: 'week',\n    Day: 'day',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst validateEvents = (/**\n * @param {?} events\n * @return {?}\n */\n(events) => {\n    /** @type {?} */\n    const warn = (/**\n     * @param {...?} args\n     * @return {?}\n     */\n    (...args) => console.warn('angular-calendar', ...args));\n    return validateEvents$1(events, warn);\n});\n/**\n * @param {?} outer\n * @param {?} inner\n * @return {?}\n */\nfunction isInside(outer, inner) {\n    return (Math.floor(outer.left) <= Math.ceil(inner.left) &&\n        Math.floor(inner.left) <= Math.ceil(outer.right) &&\n        Math.floor(outer.left) <= Math.ceil(inner.right) &&\n        Math.floor(inner.right) <= Math.ceil(outer.right) &&\n        Math.floor(outer.top) <= Math.ceil(inner.top) &&\n        Math.floor(inner.top) <= Math.ceil(outer.bottom) &&\n        Math.floor(outer.top) <= Math.ceil(inner.bottom) &&\n        Math.floor(inner.bottom) <= Math.ceil(outer.bottom));\n}\n/**\n * @param {?} amount\n * @param {?} precision\n * @return {?}\n */\nfunction roundToNearest(amount, precision) {\n    return Math.round(amount / precision) * precision;\n}\n/** @type {?} */\nconst trackByEventId = (/**\n * @param {?} index\n * @param {?} event\n * @return {?}\n */\n(index, event) => event.id ? event.id : event);\n/** @type {?} */\nconst trackByWeekDayHeaderDate = (/**\n * @param {?} index\n * @param {?} day\n * @return {?}\n */\n(index, day) => day.date.toISOString());\n/** @type {?} */\nconst trackByHourSegment = (/**\n * @param {?} index\n * @param {?} segment\n * @return {?}\n */\n(index, segment) => segment.date.toISOString());\n/** @type {?} */\nconst trackByHour = (/**\n * @param {?} index\n * @param {?} hour\n * @return {?}\n */\n(index, hour) => hour.segments[0].date.toISOString());\n/** @type {?} */\nconst trackByDayOrWeekEvent = (/**\n * @param {?} index\n * @param {?} weekEvent\n * @return {?}\n */\n(index, weekEvent) => (weekEvent.event.id ? weekEvent.event.id : weekEvent.event));\n/** @type {?} */\nconst MINUTES_IN_HOUR = 60;\n/**\n * @param {?} movedY\n * @param {?} hourSegments\n * @param {?} hourSegmentHeight\n * @param {?} eventSnapSize\n * @return {?}\n */\nfunction getMinutesMoved(movedY, hourSegments, hourSegmentHeight, eventSnapSize) {\n    /** @type {?} */\n    const draggedInPixelsSnapSize = roundToNearest(movedY, eventSnapSize || hourSegmentHeight);\n    /** @type {?} */\n    const pixelAmountInMinutes = MINUTES_IN_HOUR / (hourSegments * hourSegmentHeight);\n    return draggedInPixelsSnapSize * pixelAmountInMinutes;\n}\n/**\n * @param {?} hourSegments\n * @param {?} hourSegmentHeight\n * @return {?}\n */\nfunction getMinimumEventHeightInMinutes(hourSegments, hourSegmentHeight) {\n    return ((MINUTES_IN_HOUR / (hourSegments * hourSegmentHeight)) * hourSegmentHeight);\n}\n/**\n * @param {?} dateAdapter\n * @param {?} event\n * @param {?} minimumMinutes\n * @return {?}\n */\nfunction getDefaultEventEnd(dateAdapter, event, minimumMinutes) {\n    if (event.end) {\n        return event.end;\n    }\n    else {\n        return dateAdapter.addMinutes(event.start, minimumMinutes);\n    }\n}\n/**\n * @param {?} dateAdapter\n * @param {?} date\n * @param {?} days\n * @param {?} excluded\n * @return {?}\n */\nfunction addDaysWithExclusions(dateAdapter, date, days, excluded) {\n    /** @type {?} */\n    let daysCounter = 0;\n    /** @type {?} */\n    let daysToAdd = 0;\n    /** @type {?} */\n    const changeDays = days < 0 ? dateAdapter.subDays : dateAdapter.addDays;\n    /** @type {?} */\n    let result = date;\n    while (daysToAdd <= Math.abs(days)) {\n        result = changeDays(date, daysCounter);\n        /** @type {?} */\n        const day = dateAdapter.getDay(result);\n        if (excluded.indexOf(day) === -1) {\n            daysToAdd++;\n        }\n        daysCounter++;\n    }\n    return result;\n}\n/**\n * @param {?} newStart\n * @param {?} newEnd\n * @param {?} period\n * @return {?}\n */\nfunction isDraggedWithinPeriod(newStart, newEnd, period) {\n    /** @type {?} */\n    const end = newEnd || newStart;\n    return ((period.start <= newStart && newStart <= period.end) ||\n        (period.start <= end && end <= period.end));\n}\n/**\n * @param {?} dropEvent\n * @param {?} date\n * @param {?} allDay\n * @param {?} calendarId\n * @return {?}\n */\nfunction shouldFireDroppedEvent(dropEvent, date, allDay, calendarId) {\n    return (dropEvent.dropData &&\n        dropEvent.dropData.event &&\n        (dropEvent.dropData.calendarId !== calendarId ||\n            (dropEvent.dropData.event.allDay && !allDay) ||\n            (!dropEvent.dropData.event.allDay && allDay)));\n}\n/**\n * @param {?} dateAdapter\n * @param {?} viewDate\n * @param {?} weekStartsOn\n * @param {?=} excluded\n * @param {?=} daysInWeek\n * @return {?}\n */\nfunction getWeekViewPeriod(dateAdapter, viewDate, weekStartsOn, excluded = [], daysInWeek) {\n    /** @type {?} */\n    let viewStart = daysInWeek\n        ? dateAdapter.startOfDay(viewDate)\n        : dateAdapter.startOfWeek(viewDate, { weekStartsOn });\n    /** @type {?} */\n    const endOfWeek = dateAdapter.endOfWeek(viewDate, { weekStartsOn });\n    while (excluded.indexOf(dateAdapter.getDay(viewStart)) > -1 &&\n        viewStart < endOfWeek) {\n        viewStart = dateAdapter.addDays(viewStart, 1);\n    }\n    if (daysInWeek) {\n        /** @type {?} */\n        const viewEnd = dateAdapter.endOfDay(addDaysWithExclusions(dateAdapter, viewStart, daysInWeek - 1, excluded));\n        return { viewStart, viewEnd };\n    }\n    else {\n        /** @type {?} */\n        let viewEnd = endOfWeek;\n        while (excluded.indexOf(dateAdapter.getDay(viewEnd)) > -1 &&\n            viewEnd > viewStart) {\n            viewEnd = dateAdapter.subDays(viewEnd, 1);\n        }\n        return { viewStart, viewEnd };\n    }\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction isWithinThreshold({ x, y }) {\n    /** @type {?} */\n    const DRAG_THRESHOLD = 1;\n    return Math.abs(x) > DRAG_THRESHOLD || Math.abs(y) > DRAG_THRESHOLD;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Change the view date to the previous view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarPreviousView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Previous\n * </button>\n * ```\n */\nclass CalendarPreviousViewDirective {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n        /**\n         * Days to skip when going back by 1 day\n         */\n        this.excludeDays = [];\n        /**\n         * Called when the view date is changed\n         */\n        this.viewDateChange = new EventEmitter();\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    onClick() {\n        /** @type {?} */\n        const subFn = {\n            day: this.dateAdapter.subDays,\n            week: this.dateAdapter.subWeeks,\n            month: this.dateAdapter.subMonths\n        }[this.view];\n        if (this.view === CalendarView.Day) {\n            this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, -1, this.excludeDays));\n        }\n        else if (this.view === CalendarView.Week && this.daysInWeek) {\n            this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, -this.daysInWeek, this.excludeDays));\n        }\n        else {\n            this.viewDateChange.emit(subFn(this.viewDate, 1));\n        }\n    }\n}\nCalendarPreviousViewDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlCalendarPreviousView]'\n            },] }\n];\n/** @nocollapse */\nCalendarPreviousViewDirective.ctorParameters = () => [\n    { type: DateAdapter }\n];\nCalendarPreviousViewDirective.propDecorators = {\n    view: [{ type: Input }],\n    viewDate: [{ type: Input }],\n    excludeDays: [{ type: Input }],\n    daysInWeek: [{ type: Input }],\n    viewDateChange: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * The current view\n     * @type {?}\n     */\n    CalendarPreviousViewDirective.prototype.view;\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarPreviousViewDirective.prototype.viewDate;\n    /**\n     * Days to skip when going back by 1 day\n     * @type {?}\n     */\n    CalendarPreviousViewDirective.prototype.excludeDays;\n    /**\n     * The number of days in a week. If set will subtract this amount of days instead of 1 week\n     * @type {?}\n     */\n    CalendarPreviousViewDirective.prototype.daysInWeek;\n    /**\n     * Called when the view date is changed\n     * @type {?}\n     */\n    CalendarPreviousViewDirective.prototype.viewDateChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarPreviousViewDirective.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Change the view date to the next view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarNextView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Next\n * </button>\n * ```\n */\nclass CalendarNextViewDirective {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n        /**\n         * Days to skip when going forward by 1 day\n         */\n        this.excludeDays = [];\n        /**\n         * Called when the view date is changed\n         */\n        this.viewDateChange = new EventEmitter();\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    onClick() {\n        /** @type {?} */\n        const addFn = {\n            day: this.dateAdapter.addDays,\n            week: this.dateAdapter.addWeeks,\n            month: this.dateAdapter.addMonths\n        }[this.view];\n        if (this.view === CalendarView.Day) {\n            this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, 1, this.excludeDays));\n        }\n        else if (this.view === CalendarView.Week && this.daysInWeek) {\n            this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, this.daysInWeek, this.excludeDays));\n        }\n        else {\n            this.viewDateChange.emit(addFn(this.viewDate, 1));\n        }\n    }\n}\nCalendarNextViewDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlCalendarNextView]'\n            },] }\n];\n/** @nocollapse */\nCalendarNextViewDirective.ctorParameters = () => [\n    { type: DateAdapter }\n];\nCalendarNextViewDirective.propDecorators = {\n    view: [{ type: Input }],\n    viewDate: [{ type: Input }],\n    excludeDays: [{ type: Input }],\n    daysInWeek: [{ type: Input }],\n    viewDateChange: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * The current view\n     * @type {?}\n     */\n    CalendarNextViewDirective.prototype.view;\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarNextViewDirective.prototype.viewDate;\n    /**\n     * Days to skip when going forward by 1 day\n     * @type {?}\n     */\n    CalendarNextViewDirective.prototype.excludeDays;\n    /**\n     * The number of days in a week. If set will add this amount of days instead of 1 week\n     * @type {?}\n     */\n    CalendarNextViewDirective.prototype.daysInWeek;\n    /**\n     * Called when the view date is changed\n     * @type {?}\n     */\n    CalendarNextViewDirective.prototype.viewDateChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarNextViewDirective.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Change the view date to the current day. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarToday\n *  [(viewDate)]=\"viewDate\">\n *  Today\n * </button>\n * ```\n */\nclass CalendarTodayDirective {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n        /**\n         * Called when the view date is changed\n         */\n        this.viewDateChange = new EventEmitter();\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    onClick() {\n        this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n    }\n}\nCalendarTodayDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlCalendarToday]'\n            },] }\n];\n/** @nocollapse */\nCalendarTodayDirective.ctorParameters = () => [\n    { type: DateAdapter }\n];\nCalendarTodayDirective.propDecorators = {\n    viewDate: [{ type: Input }],\n    viewDateChange: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarTodayDirective.prototype.viewDate;\n    /**\n     * Called when the view date is changed\n     * @type {?}\n     */\n    CalendarTodayDirective.prototype.viewDateChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarTodayDirective.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\nclass CalendarAngularDateFormatter {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n    }\n    /**\n     * The month view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewColumnHeader({ date, locale }) {\n        return formatDate(date, 'EEEE', locale);\n    }\n    /**\n     * The month view cell day number\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewDayNumber({ date, locale }) {\n        return formatDate(date, 'd', locale);\n    }\n    /**\n     * The month view title\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewTitle({ date, locale }) {\n        return formatDate(date, 'LLLL y', locale);\n    }\n    /**\n     * The week view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnHeader({ date, locale }) {\n        return formatDate(date, 'EEEE', locale);\n    }\n    /**\n     * The week view sub header day and month labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnSubHeader({ date, locale }) {\n        return formatDate(date, 'MMM d', locale);\n    }\n    /**\n     * The week view title\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewTitle({ date, locale, weekStartsOn, excludeDays, daysInWeek }) {\n        const { viewStart, viewEnd } = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek);\n        /** @type {?} */\n        const format = (/**\n         * @param {?} dateToFormat\n         * @param {?} showYear\n         * @return {?}\n         */\n        (dateToFormat, showYear) => formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale));\n        return `${format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear())} - ${format(viewEnd, true)}`;\n    }\n    /**\n     * The time formatting down the left hand side of the week view\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewHour({ date, locale }) {\n        return formatDate(date, 'h a', locale);\n    }\n    /**\n     * The time formatting down the left hand side of the day view\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewHour({ date, locale }) {\n        return formatDate(date, 'h a', locale);\n    }\n    /**\n     * The day view title\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewTitle({ date, locale }) {\n        return formatDate(date, 'EEEE, MMMM d, y', locale);\n    }\n}\nCalendarAngularDateFormatter.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCalendarAngularDateFormatter.ctorParameters = () => [\n    { type: DateAdapter }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarAngularDateFormatter.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n *\n * If you wish, you may override any of the defaults via angulars DI. For example:\n *\n * ```typescript\n * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n * import { formatDate } from '\\@angular/common';\n *\n * class CustomDateFormatter extends CalendarDateFormatter {\n *\n *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n *     return formatDate(date, 'EEE', locale); // use short week days\n *   }\n *\n * }\n *\n * // in your component that uses the calendar\n * providers: [{\n *   provide: CalendarDateFormatter,\n *   useClass: CustomDateFormatter\n * }]\n * ```\n */\nclass CalendarDateFormatter extends CalendarAngularDateFormatter {\n}\nCalendarDateFormatter.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This pipe is primarily for rendering the current view title. Example usage:\n * ```typescript\n * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`\n * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}\n * ```\n */\nclass CalendarDatePipe {\n    /**\n     * @param {?} dateFormatter\n     * @param {?} locale\n     */\n    constructor(dateFormatter, locale) {\n        this.dateFormatter = dateFormatter;\n        this.locale = locale;\n    }\n    /**\n     * @param {?} date\n     * @param {?} method\n     * @param {?=} locale\n     * @param {?=} weekStartsOn\n     * @param {?=} excludeDays\n     * @param {?=} daysInWeek\n     * @return {?}\n     */\n    transform(date, method, locale = this.locale, weekStartsOn = 0, excludeDays = [], daysInWeek) {\n        if (typeof this.dateFormatter[method] === 'undefined') {\n            /** @type {?} */\n            const allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter((/**\n             * @param {?} iMethod\n             * @return {?}\n             */\n            iMethod => iMethod !== 'constructor'));\n            throw new Error(`${method} is not a valid date formatter. Can only be one of ${allowedMethods.join(', ')}`);\n        }\n        return this.dateFormatter[method]({\n            date,\n            locale,\n            weekStartsOn,\n            excludeDays,\n            daysInWeek\n        });\n    }\n}\nCalendarDatePipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'calendarDate'\n            },] }\n];\n/** @nocollapse */\nCalendarDatePipe.ctorParameters = () => [\n    { type: CalendarDateFormatter },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarDatePipe.prototype.dateFormatter;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarDatePipe.prototype.locale;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class is responsible for displaying all event titles within the calendar. You may override any of its methods via angulars DI to suit your requirements. For example:\n *\n * ```typescript\n * import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n *\n * class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n *\n *   month(event: CalendarEvent): string {\n *     return `Custom prefix: ${event.title}`;\n *   }\n *\n * }\n *\n * // in your component\n * providers: [{\n *  provide: CalendarEventTitleFormatter,\n *  useClass: CustomEventTitleFormatter\n * }]\n * ```\n */\nclass CalendarEventTitleFormatter {\n    /**\n     * The month view event title.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    month(event, title) {\n        return event.title;\n    }\n    /**\n     * The month view event tooltip. Return a falsey value from this to disable the tooltip.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    monthTooltip(event, title) {\n        return event.title;\n    }\n    /**\n     * The week view event title.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    week(event, title) {\n        return event.title;\n    }\n    /**\n     * The week view event tooltip. Return a falsey value from this to disable the tooltip.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    weekTooltip(event, title) {\n        return event.title;\n    }\n    /**\n     * The day view event title.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    day(event, title) {\n        return event.title;\n    }\n    /**\n     * The day view event tooltip. Return a falsey value from this to disable the tooltip.\n     * @param {?} event\n     * @param {?} title\n     * @return {?}\n     */\n    dayTooltip(event, title) {\n        return event.title;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarEventTitlePipe {\n    /**\n     * @param {?} calendarEventTitle\n     */\n    constructor(calendarEventTitle) {\n        this.calendarEventTitle = calendarEventTitle;\n    }\n    /**\n     * @param {?} title\n     * @param {?} titleType\n     * @param {?} event\n     * @return {?}\n     */\n    transform(title, titleType, event) {\n        return this.calendarEventTitle[titleType](event, title);\n    }\n}\nCalendarEventTitlePipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'calendarEventTitle'\n            },] }\n];\n/** @nocollapse */\nCalendarEventTitlePipe.ctorParameters = () => [\n    { type: CalendarEventTitleFormatter }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarEventTitlePipe.prototype.calendarEventTitle;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ClickDirective {\n    /**\n     * @param {?} renderer\n     * @param {?} elm\n     * @param {?} document\n     */\n    constructor(renderer, elm, document) {\n        this.renderer = renderer;\n        this.elm = elm;\n        this.document = document;\n        this.clickListenerDisabled = false;\n        this.click = new EventEmitter(); // tslint:disable-line\n        // tslint:disable-line\n        this.destroy$ = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.clickListenerDisabled) {\n            this.listen()\n                .pipe(takeUntil(this.destroy$))\n                .subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                event.stopPropagation();\n                this.click.emit(event);\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    listen() {\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        observer => {\n            return this.renderer.listen(this.elm.nativeElement, 'click', (/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                observer.next(event);\n            }));\n        }));\n    }\n}\nClickDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlClick]'\n            },] }\n];\n/** @nocollapse */\nClickDirective.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nClickDirective.propDecorators = {\n    clickListenerDisabled: [{ type: Input }],\n    click: [{ type: Output, args: ['mwlClick',] }]\n};\nif (false) {\n    /** @type {?} */\n    ClickDirective.prototype.clickListenerDisabled;\n    /** @type {?} */\n    ClickDirective.prototype.click;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClickDirective.prototype.destroy$;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClickDirective.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClickDirective.prototype.elm;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClickDirective.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarUtils {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n    }\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    getMonthView(args) {\n        return getMonthView(this.dateAdapter, args);\n    }\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    getWeekViewHeader(args) {\n        return getWeekViewHeader(this.dateAdapter, args);\n    }\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    getWeekView(args) {\n        return getWeekView(this.dateAdapter, args);\n    }\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    getDayView(args) {\n        return getDayView(this.dateAdapter, args);\n    }\n    /**\n     * @param {?} args\n     * @return {?}\n     */\n    getDayViewHourGrid(args) {\n        return getDayViewHourGrid(this.dateAdapter, args);\n    }\n}\nCalendarUtils.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCalendarUtils.ctorParameters = () => [\n    { type: DateAdapter }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarUtils.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MOMENT = new InjectionToken('Moment');\n/**\n * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n *\n * ```typescript\n * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n * import moment from 'moment';\n *\n * // in your component\n * provide: [{\n *   provide: MOMENT, useValue: moment\n * }, {\n *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n * }]\n *\n * ```\n */\nclass CalendarMomentDateFormatter {\n    /**\n     * @hidden\n     * @param {?} moment\n     * @param {?} dateAdapter\n     */\n    constructor(moment, dateAdapter) {\n        this.moment = moment;\n        this.dateAdapter = dateAdapter;\n    }\n    /**\n     * The month view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewColumnHeader({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd');\n    }\n    /**\n     * The month view cell day number\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewDayNumber({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('D');\n    }\n    /**\n     * The month view title\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewTitle({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('MMMM YYYY');\n    }\n    /**\n     * The week view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnHeader({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd');\n    }\n    /**\n     * The week view sub header day and month labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnSubHeader({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('MMM D');\n    }\n    /**\n     * The week view title\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewTitle({ date, locale, weekStartsOn, excludeDays, daysInWeek }) {\n        const { viewStart, viewEnd } = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek);\n        /** @type {?} */\n        const format = (/**\n         * @param {?} dateToFormat\n         * @param {?} showYear\n         * @return {?}\n         */\n        (dateToFormat, showYear) => this.moment(dateToFormat)\n            .locale(locale)\n            .format('MMM D' + (showYear ? ', YYYY' : '')));\n        return `${format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear())} - ${format(viewEnd, true)}`;\n    }\n    /**\n     * The time formatting down the left hand side of the week view\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewHour({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('ha');\n    }\n    /**\n     * The time formatting down the left hand side of the day view\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewHour({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('ha');\n    }\n    /**\n     * The day view title\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewTitle({ date, locale }) {\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd, D MMMM, YYYY');\n    }\n}\nCalendarMomentDateFormatter.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCalendarMomentDateFormatter.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [MOMENT,] }] },\n    { type: DateAdapter }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarMomentDateFormatter.prototype.moment;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarMomentDateFormatter.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n *\n * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\nclass CalendarNativeDateFormatter {\n    /**\n     * @param {?} dateAdapter\n     */\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n    }\n    /**\n     * The month view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewColumnHeader({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n    }\n    /**\n     * The month view cell day number\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewDayNumber({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n    }\n    /**\n     * The month view title\n     * @param {?} __0\n     * @return {?}\n     */\n    monthViewTitle({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, {\n            year: 'numeric',\n            month: 'long'\n        }).format(date);\n    }\n    /**\n     * The week view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnHeader({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n    }\n    /**\n     * The week view sub header day and month labels\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewColumnSubHeader({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, {\n            day: 'numeric',\n            month: 'short'\n        }).format(date);\n    }\n    /**\n     * The week view title\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewTitle({ date, locale, weekStartsOn, excludeDays, daysInWeek }) {\n        const { viewStart, viewEnd } = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek);\n        /** @type {?} */\n        const format = (/**\n         * @param {?} dateToFormat\n         * @param {?} showYear\n         * @return {?}\n         */\n        (dateToFormat, showYear) => new Intl.DateTimeFormat(locale, {\n            day: 'numeric',\n            month: 'short',\n            year: showYear ? 'numeric' : undefined\n        }).format(dateToFormat));\n        return `${format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear())} - ${format(viewEnd, true)}`;\n    }\n    /**\n     * The time formatting down the left hand side of the week view\n     * @param {?} __0\n     * @return {?}\n     */\n    weekViewHour({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n    }\n    /**\n     * The time formatting down the left hand side of the day view\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewHour({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n    }\n    /**\n     * The day view title\n     * @param {?} __0\n     * @return {?}\n     */\n    dayViewTitle({ date, locale }) {\n        return new Intl.DateTimeFormat(locale, {\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            weekday: 'long'\n        }).format(date);\n    }\n}\nCalendarNativeDateFormatter.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nCalendarNativeDateFormatter.ctorParameters = () => [\n    { type: DateAdapter }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarNativeDateFormatter.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The parameter type passed to the date formatter methods.\n * @record\n */\nfunction DateFormatterParams() { }\nif (false) {\n    /**\n     * The date to format.\n     * @type {?}\n     */\n    DateFormatterParams.prototype.date;\n    /**\n     * The users preferred locale.\n     * @type {?|undefined}\n     */\n    DateFormatterParams.prototype.locale;\n    /**\n     * The start day number of the week\n     * @type {?|undefined}\n     */\n    DateFormatterParams.prototype.weekStartsOn;\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n     * @type {?|undefined}\n     */\n    DateFormatterParams.prototype.excludeDays;\n    /**\n     * The number of days in a week. Can be used to create a shorter or longer week view.\n     * The first day of the week will always be the `viewDate`\n     * @type {?|undefined}\n     */\n    DateFormatterParams.prototype.daysInWeek;\n}\n/**\n * If using a completely custom date formatter then it should implement this interface.\n * @record\n */\nfunction CalendarDateFormatterInterface() { }\nif (false) {\n    /**\n     * The month view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.monthViewColumnHeader = function (__0) { };\n    /**\n     * The month view cell day number\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.monthViewDayNumber = function (__0) { };\n    /**\n     * The month view title\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.monthViewTitle = function (__0) { };\n    /**\n     * The week view header week day labels\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.weekViewColumnHeader = function (__0) { };\n    /**\n     * The week view sub header day and month labels\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.weekViewColumnSubHeader = function (__0) { };\n    /**\n     * The week view title\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.weekViewTitle = function (__0) { };\n    /**\n     * The time formatting down the left hand side of the day view\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.weekViewHour = function (__0) { };\n    /**\n     * The time formatting down the left hand side of the day view\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.dayViewHour = function (__0) { };\n    /**\n     * The day view title\n     * @param {?} __0\n     * @return {?}\n     */\n    CalendarDateFormatterInterface.prototype.dayViewTitle = function (__0) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst CalendarEventTimesChangedEventType = {\n    Drag: 'drag',\n    Drop: 'drop',\n    Resize: 'resize',\n};\n/**\n * The output `$event` type when an event is resized or dragged and dropped.\n * @record\n * @template MetaType\n */\nfunction CalendarEventTimesChangedEvent() { }\nif (false) {\n    /** @type {?} */\n    CalendarEventTimesChangedEvent.prototype.type;\n    /** @type {?} */\n    CalendarEventTimesChangedEvent.prototype.event;\n    /** @type {?} */\n    CalendarEventTimesChangedEvent.prototype.newStart;\n    /** @type {?|undefined} */\n    CalendarEventTimesChangedEvent.prototype.newEnd;\n    /** @type {?|undefined} */\n    CalendarEventTimesChangedEvent.prototype.allDay;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction CalendarModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    CalendarModuleConfig.prototype.eventTitleFormatter;\n    /** @type {?|undefined} */\n    CalendarModuleConfig.prototype.dateFormatter;\n    /** @type {?|undefined} */\n    CalendarModuleConfig.prototype.utils;\n}\n/**\n * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n *\n * ```typescript\n * import { CalendarCommonModule, CalendarMonthModule } from 'angular-calendar';\n *\n * \\@NgModule({\n *   imports: [\n *     CalendarCommonModule.forRoot(),\n *     CalendarMonthModule\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\nclass CalendarCommonModule {\n    /**\n     * @param {?} dateAdapter\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(dateAdapter, config = {}) {\n        return {\n            ngModule: CalendarCommonModule,\n            providers: [\n                dateAdapter,\n                config.eventTitleFormatter || CalendarEventTitleFormatter,\n                config.dateFormatter || CalendarDateFormatter,\n                config.utils || CalendarUtils\n            ]\n        };\n    }\n}\nCalendarCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CalendarEventActionsComponent,\n                    CalendarEventTitleComponent,\n                    CalendarTooltipWindowComponent,\n                    CalendarTooltipDirective,\n                    CalendarPreviousViewDirective,\n                    CalendarNextViewDirective,\n                    CalendarTodayDirective,\n                    CalendarDatePipe,\n                    CalendarEventTitlePipe,\n                    ClickDirective\n                ],\n                imports: [CommonModule],\n                exports: [\n                    CalendarEventActionsComponent,\n                    CalendarEventTitleComponent,\n                    CalendarTooltipWindowComponent,\n                    CalendarTooltipDirective,\n                    CalendarPreviousViewDirective,\n                    CalendarNextViewDirective,\n                    CalendarTodayDirective,\n                    CalendarDatePipe,\n                    CalendarEventTitlePipe,\n                    ClickDirective\n                ],\n                entryComponents: [CalendarTooltipWindowComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction CalendarMonthViewBeforeRenderEvent() { }\nif (false) {\n    /** @type {?} */\n    CalendarMonthViewBeforeRenderEvent.prototype.header;\n    /** @type {?} */\n    CalendarMonthViewBeforeRenderEvent.prototype.body;\n    /** @type {?} */\n    CalendarMonthViewBeforeRenderEvent.prototype.period;\n}\n/**\n * @record\n * @template EventMetaType, DayMetaType\n */\nfunction CalendarMonthViewEventTimesChangedEvent() { }\nif (false) {\n    /** @type {?} */\n    CalendarMonthViewEventTimesChangedEvent.prototype.day;\n}\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\nclass CalendarMonthViewComponent {\n    /**\n     * @hidden\n     * @param {?} cdr\n     * @param {?} utils\n     * @param {?} locale\n     * @param {?} dateAdapter\n     */\n    constructor(cdr, utils, locale, dateAdapter) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.dateAdapter = dateAdapter;\n        /**\n         * An array of events to display on view.\n         * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n         */\n        this.events = [];\n        /**\n         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n         */\n        this.excludeDays = [];\n        /**\n         * Whether the events list for the day of the `viewDate` option is visible or not\n         */\n        this.activeDayIsOpen = false;\n        /**\n         * The placement of the event tooltip\n         */\n        this.tooltipPlacement = 'auto';\n        /**\n         * Whether to append tooltips to the body or next to the trigger element\n         */\n        this.tooltipAppendToBody = true;\n        /**\n         * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n         * will be displayed immediately.\n         */\n        this.tooltipDelay = null;\n        /**\n         * An output that will be called before the view is rendered for the current month.\n         * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n         */\n        this.beforeViewRender = new EventEmitter();\n        /**\n         * Called when the day cell is clicked\n         */\n        this.dayClicked = new EventEmitter();\n        /**\n         * Called when the event title is clicked\n         */\n        this.eventClicked = new EventEmitter();\n        /**\n         * Called when a header week day is clicked. Returns ISO day number.\n         */\n        this.columnHeaderClicked = new EventEmitter();\n        /**\n         * Called when an event is dragged and dropped\n         */\n        this.eventTimesChanged = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.trackByRowOffset = (/**\n         * @param {?} index\n         * @param {?} offset\n         * @return {?}\n         */\n        (index, offset) => this.view.days\n            .slice(offset, this.view.totalDaysVisibleInWeek)\n            .map((/**\n         * @param {?} day\n         * @return {?}\n         */\n        day => day.date.toISOString()))\n            .join('-'));\n        /**\n         * @hidden\n         */\n        this.trackByDate = (/**\n         * @param {?} index\n         * @param {?} day\n         * @return {?}\n         */\n        (index, day) => day.date.toISOString());\n        this.locale = locale;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.refreshAll();\n                this.cdr.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const refreshHeader = changes.viewDate || changes.excludeDays || changes.weekendDays;\n        /** @type {?} */\n        const refreshBody = changes.viewDate ||\n            changes.events ||\n            changes.excludeDays ||\n            changes.weekendDays;\n        if (refreshHeader) {\n            this.refreshHeader();\n        }\n        if (changes.events) {\n            validateEvents(this.events);\n        }\n        if (refreshBody) {\n            this.refreshBody();\n        }\n        if (refreshHeader || refreshBody) {\n            this.emitBeforeViewRender();\n        }\n        if (changes.activeDayIsOpen ||\n            changes.viewDate ||\n            changes.events ||\n            changes.excludeDays ||\n            changes.activeDay) {\n            this.checkActiveDayIsOpen();\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} event\n     * @param {?} isHighlighted\n     * @return {?}\n     */\n    toggleDayHighlight(event, isHighlighted) {\n        this.view.days.forEach((/**\n         * @param {?} day\n         * @return {?}\n         */\n        day => {\n            if (isHighlighted && day.events.indexOf(event) > -1) {\n                day.backgroundColor =\n                    (event.color && event.color.secondary) || '#D1E8FF';\n            }\n            else {\n                delete day.backgroundColor;\n            }\n        }));\n    }\n    /**\n     * @hidden\n     * @param {?} droppedOn\n     * @param {?} event\n     * @param {?=} draggedFrom\n     * @return {?}\n     */\n    eventDropped(droppedOn, event, draggedFrom) {\n        if (droppedOn !== draggedFrom) {\n            /** @type {?} */\n            const year = this.dateAdapter.getYear(droppedOn.date);\n            /** @type {?} */\n            const month = this.dateAdapter.getMonth(droppedOn.date);\n            /** @type {?} */\n            const date = this.dateAdapter.getDate(droppedOn.date);\n            /** @type {?} */\n            const newStart = this.dateAdapter.setDate(this.dateAdapter.setMonth(this.dateAdapter.setYear(event.start, year), month), date);\n            /** @type {?} */\n            let newEnd;\n            if (event.end) {\n                /** @type {?} */\n                const secondsDiff = this.dateAdapter.differenceInSeconds(newStart, event.start);\n                newEnd = this.dateAdapter.addSeconds(event.end, secondsDiff);\n            }\n            this.eventTimesChanged.emit({\n                event,\n                newStart,\n                newEnd,\n                day: droppedOn,\n                type: CalendarEventTimesChangedEventType.Drop\n            });\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshHeader() {\n        this.columnHeaders = this.utils.getWeekViewHeader({\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshBody() {\n        this.view = this.utils.getMonthView({\n            events: this.events,\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    checkActiveDayIsOpen() {\n        if (this.activeDayIsOpen === true) {\n            /** @type {?} */\n            const activeDay = this.activeDay || this.viewDate;\n            this.openDay = this.view.days.find((/**\n             * @param {?} day\n             * @return {?}\n             */\n            day => this.dateAdapter.isSameDay(day.date, activeDay)));\n            /** @type {?} */\n            const index = this.view.days.indexOf(this.openDay);\n            this.openRowIndex =\n                Math.floor(index / this.view.totalDaysVisibleInWeek) *\n                    this.view.totalDaysVisibleInWeek;\n        }\n        else {\n            this.openRowIndex = null;\n            this.openDay = null;\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshAll() {\n        this.refreshHeader();\n        this.refreshBody();\n        this.emitBeforeViewRender();\n        this.checkActiveDayIsOpen();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    emitBeforeViewRender() {\n        if (this.columnHeaders && this.view) {\n            this.beforeViewRender.emit({\n                header: this.columnHeaders,\n                body: this.view.days,\n                period: this.view.period\n            });\n        }\n    }\n}\nCalendarMonthViewComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-month-view',\n                template: `\n    <div class=\"cal-month-view\">\n      <mwl-calendar-month-view-header\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        (columnHeaderClicked)=\"columnHeaderClicked.emit($event)\"\n        [customTemplate]=\"headerTemplate\"\n      >\n        >\n      </mwl-calendar-month-view-header>\n      <div class=\"cal-days\">\n        <div\n          *ngFor=\"let rowIndex of view.rowOffsets; trackBy: trackByRowOffset\"\n        >\n          <div class=\"cal-cell-row\">\n            <mwl-calendar-month-cell\n              *ngFor=\"\n                let day of view.days\n                  | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek;\n                trackBy: trackByDate\n              \"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"cellTemplate\"\n              [ngStyle]=\"{ backgroundColor: day.backgroundColor }\"\n              (mwlClick)=\"dayClicked.emit({ day: day })\"\n              [clickListenerDisabled]=\"dayClicked.observers.length === 0\"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              mwlDroppable\n              dragOverClass=\"cal-drag-over\"\n              (drop)=\"\n                eventDropped(\n                  day,\n                  $event.dropData.event,\n                  $event.dropData.draggedFrom\n                )\n              \"\n              (eventClicked)=\"eventClicked.emit({ event: $event.event })\"\n            >\n            </mwl-calendar-month-cell>\n          </div>\n          <mwl-calendar-open-day-events\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            [eventActionsTemplate]=\"eventActionsTemplate\"\n            (eventClicked)=\"eventClicked.emit({ event: $event.event })\"\n            mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            (drop)=\"\n              eventDropped(\n                openDay,\n                $event.dropData.event,\n                $event.dropData.draggedFrom\n              )\n            \"\n          >\n          </mwl-calendar-open-day-events>\n        </div>\n      </div>\n    </div>\n  `\n            }] }\n];\n/** @nocollapse */\nCalendarMonthViewComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: CalendarUtils },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: DateAdapter }\n];\nCalendarMonthViewComponent.propDecorators = {\n    viewDate: [{ type: Input }],\n    events: [{ type: Input }],\n    excludeDays: [{ type: Input }],\n    activeDayIsOpen: [{ type: Input }],\n    activeDay: [{ type: Input }],\n    refresh: [{ type: Input }],\n    locale: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    weekStartsOn: [{ type: Input }],\n    headerTemplate: [{ type: Input }],\n    cellTemplate: [{ type: Input }],\n    openDayEventsTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    weekendDays: [{ type: Input }],\n    beforeViewRender: [{ type: Output }],\n    dayClicked: [{ type: Output }],\n    eventClicked: [{ type: Output }],\n    columnHeaderClicked: [{ type: Output }],\n    eventTimesChanged: [{ type: Output }]\n};\nif (false) {\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.viewDate;\n    /**\n     * An array of events to display on view.\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.events;\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.excludeDays;\n    /**\n     * Whether the events list for the day of the `viewDate` option is visible or not\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.activeDayIsOpen;\n    /**\n     * If set will be used to determine the day that should be open. If not set, the `viewDate` is used\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.activeDay;\n    /**\n     * An observable that when emitted on will re-render the current view\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.refresh;\n    /**\n     * The locale used to format dates\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.locale;\n    /**\n     * The placement of the event tooltip\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.tooltipPlacement;\n    /**\n     * A custom template to use for the event tooltips\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.tooltipTemplate;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.tooltipAppendToBody;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.tooltipDelay;\n    /**\n     * The start number of the week\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.weekStartsOn;\n    /**\n     * A custom template to use to replace the header\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.headerTemplate;\n    /**\n     * A custom template to use to replace the day cell\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.cellTemplate;\n    /**\n     * A custom template to use for the slide down box of events for the active day\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.openDayEventsTemplate;\n    /**\n     * A custom template to use for event titles\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.eventTitleTemplate;\n    /**\n     * A custom template to use for event actions\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.eventActionsTemplate;\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.weekendDays;\n    /**\n     * An output that will be called before the view is rendered for the current month.\n     * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.beforeViewRender;\n    /**\n     * Called when the day cell is clicked\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.dayClicked;\n    /**\n     * Called when the event title is clicked\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.eventClicked;\n    /**\n     * Called when a header week day is clicked. Returns ISO day number.\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.columnHeaderClicked;\n    /**\n     * Called when an event is dragged and dropped\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.eventTimesChanged;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.columnHeaders;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.view;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.openRowIndex;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.openDay;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.refreshSubscription;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.trackByRowOffset;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarMonthViewComponent.prototype.trackByDate;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarMonthViewComponent.prototype.cdr;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarMonthViewComponent.prototype.utils;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarMonthViewComponent.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarMonthViewHeaderComponent {\n    constructor() {\n        this.columnHeaderClicked = new EventEmitter();\n        this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n    }\n}\nCalendarMonthViewHeaderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-month-view-header',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n    >\n      <div class=\"cal-cell-row cal-header\">\n        <div\n          class=\"cal-cell\"\n          *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          (click)=\"columnHeaderClicked.emit(day.day)\"\n          [ngClass]=\"day.cssClass\"\n        >\n          {{ day.date | calendarDate: 'monthViewColumnHeader':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        days: days,\n        locale: locale,\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarMonthViewHeaderComponent.propDecorators = {\n    days: [{ type: Input }],\n    locale: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    columnHeaderClicked: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarMonthViewHeaderComponent.prototype.days;\n    /** @type {?} */\n    CalendarMonthViewHeaderComponent.prototype.locale;\n    /** @type {?} */\n    CalendarMonthViewHeaderComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarMonthViewHeaderComponent.prototype.columnHeaderClicked;\n    /** @type {?} */\n    CalendarMonthViewHeaderComponent.prototype.trackByWeekDayHeaderDate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarMonthCellComponent {\n    constructor() {\n        this.highlightDay = new EventEmitter();\n        this.unhighlightDay = new EventEmitter();\n        this.eventClicked = new EventEmitter();\n        this.trackByEventId = trackByEventId;\n        this.validateDrag = isWithinThreshold;\n    }\n}\nCalendarMonthCellComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-month-cell',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-day=\"day\"\n      let-openDay=\"openDay\"\n      let-locale=\"locale\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-highlightDay=\"highlightDay\"\n      let-unhighlightDay=\"unhighlightDay\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\"\n      let-tooltipDelay=\"tooltipDelay\"\n      let-trackByEventId=\"trackByEventId\"\n      let-validateDrag=\"validateDrag\"\n    >\n      <div class=\"cal-cell-top\">\n        <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n          day.badgeTotal\n        }}</span>\n        <span class=\"cal-day-number\">{{\n          day.date | calendarDate: 'monthViewDayNumber':locale\n        }}</span>\n      </div>\n      <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n        <div\n          class=\"cal-event\"\n          *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n          [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n          [ngClass]=\"event?.cssClass\"\n          (mouseenter)=\"highlightDay.emit({ event: event })\"\n          (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n          [mwlCalendarTooltip]=\"\n            event.title | calendarEventTitle: 'monthTooltip':event\n          \"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          [tooltipDelay]=\"tooltipDelay\"\n          mwlDraggable\n          [class.cal-draggable]=\"event.draggable\"\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: event, draggedFrom: day }\"\n          [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n          [validateDrag]=\"validateDrag\"\n          (mwlClick)=\"eventClicked.emit({ event: event })\"\n        ></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        openDay: openDay,\n        locale: locale,\n        tooltipPlacement: tooltipPlacement,\n        highlightDay: highlightDay,\n        unhighlightDay: unhighlightDay,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody,\n        tooltipDelay: tooltipDelay,\n        trackByEventId: trackByEventId,\n        validateDrag: validateDrag\n      }\"\n    >\n    </ng-template>\n  `,\n                host: {\n                    class: 'cal-cell cal-day-cell',\n                    '[class.cal-past]': 'day.isPast',\n                    '[class.cal-today]': 'day.isToday',\n                    '[class.cal-future]': 'day.isFuture',\n                    '[class.cal-weekend]': 'day.isWeekend',\n                    '[class.cal-in-month]': 'day.inMonth',\n                    '[class.cal-out-month]': '!day.inMonth',\n                    '[class.cal-has-events]': 'day.events.length > 0',\n                    '[class.cal-open]': 'day === openDay',\n                    '[class.cal-event-highlight]': '!!day.backgroundColor'\n                }\n            }] }\n];\nCalendarMonthCellComponent.propDecorators = {\n    day: [{ type: Input }],\n    openDay: [{ type: Input }],\n    locale: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    highlightDay: [{ type: Output }],\n    unhighlightDay: [{ type: Output }],\n    eventClicked: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.day;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.openDay;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.locale;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.tooltipPlacement;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.tooltipAppendToBody;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.tooltipTemplate;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.tooltipDelay;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.highlightDay;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.unhighlightDay;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.eventClicked;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.trackByEventId;\n    /** @type {?} */\n    CalendarMonthCellComponent.prototype.validateDrag;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst collapseAnimation = trigger('collapse', [\n    state('void', style({\n        height: 0,\n        overflow: 'hidden',\n        'padding-top': 0,\n        'padding-bottom': 0\n    })),\n    state('*', style({\n        height: '*',\n        overflow: 'hidden',\n        'padding-top': '*',\n        'padding-bottom': '*'\n    })),\n    transition('* => void', animate('150ms ease-out')),\n    transition('void => *', animate('150ms ease-in'))\n]);\nclass CalendarOpenDayEventsComponent {\n    constructor() {\n        this.isOpen = false;\n        this.eventClicked = new EventEmitter();\n        this.trackByEventId = trackByEventId;\n        this.validateDrag = isWithinThreshold;\n    }\n}\nCalendarOpenDayEventsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-open-day-events',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-events=\"events\"\n      let-eventClicked=\"eventClicked\"\n      let-isOpen=\"isOpen\"\n      let-trackByEventId=\"trackByEventId\"\n      let-validateDrag=\"validateDrag\"\n    >\n      <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n        <div\n          *ngFor=\"let event of events; trackBy: trackByEventId\"\n          [ngClass]=\"event?.cssClass\"\n          mwlDraggable\n          [class.cal-draggable]=\"event.draggable\"\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: event }\"\n          [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n          [validateDrag]=\"validateDrag\"\n        >\n          <span\n            class=\"cal-event\"\n            [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n          >\n          </span>\n          &ngsp;\n          <mwl-calendar-event-title\n            [event]=\"event\"\n            [customTemplate]=\"eventTitleTemplate\"\n            view=\"month\"\n            (mwlClick)=\"eventClicked.emit({ event: event })\"\n          >\n          </mwl-calendar-event-title>\n          &ngsp;\n          <mwl-calendar-event-actions\n            [event]=\"event\"\n            [customTemplate]=\"eventActionsTemplate\"\n          >\n          </mwl-calendar-event-actions>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        events: events,\n        eventClicked: eventClicked,\n        isOpen: isOpen,\n        trackByEventId: trackByEventId,\n        validateDrag: validateDrag\n      }\"\n    >\n    </ng-template>\n  `,\n                animations: [collapseAnimation]\n            }] }\n];\nCalendarOpenDayEventsComponent.propDecorators = {\n    isOpen: [{ type: Input }],\n    events: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    eventClicked: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.isOpen;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.events;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.eventTitleTemplate;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.eventActionsTemplate;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.eventClicked;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.trackByEventId;\n    /** @type {?} */\n    CalendarOpenDayEventsComponent.prototype.validateDrag;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarMonthModule {\n}\nCalendarMonthModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n                declarations: [\n                    CalendarMonthViewComponent,\n                    CalendarMonthCellComponent,\n                    CalendarOpenDayEventsComponent,\n                    CalendarMonthViewHeaderComponent\n                ],\n                exports: [\n                    DragAndDropModule,\n                    CalendarMonthViewComponent,\n                    CalendarMonthCellComponent,\n                    CalendarOpenDayEventsComponent,\n                    CalendarMonthViewHeaderComponent\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarDragHelper {\n    /**\n     * @param {?} dragContainerElement\n     * @param {?} draggableElement\n     */\n    constructor(dragContainerElement, draggableElement) {\n        this.dragContainerElement = dragContainerElement;\n        this.startPosition = draggableElement.getBoundingClientRect();\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    validateDrag({ x, y, snapDraggedEvents, dragAlreadyMoved, transform }) {\n        if (snapDraggedEvents) {\n            /** @type {?} */\n            const newRect = Object.assign({}, this.startPosition, {\n                left: this.startPosition.left + transform.x,\n                right: this.startPosition.right + transform.x,\n                top: this.startPosition.top + transform.y,\n                bottom: this.startPosition.bottom + transform.y\n            });\n            return ((isWithinThreshold({ x, y }) || dragAlreadyMoved) &&\n                isInside(this.dragContainerElement.getBoundingClientRect(), newRect));\n        }\n        else {\n            return isWithinThreshold({ x, y }) || dragAlreadyMoved;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarDragHelper.prototype.startPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarDragHelper.prototype.dragContainerElement;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarResizeHelper {\n    /**\n     * @param {?} resizeContainerElement\n     * @param {?=} minWidth\n     */\n    constructor(resizeContainerElement, minWidth) {\n        this.resizeContainerElement = resizeContainerElement;\n        this.minWidth = minWidth;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    validateResize({ rectangle }) {\n        if (this.minWidth &&\n            Math.ceil(rectangle.width) < Math.ceil(this.minWidth)) {\n            return false;\n        }\n        return isInside(this.resizeContainerElement.getBoundingClientRect(), rectangle);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarResizeHelper.prototype.resizeContainerElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    CalendarResizeHelper.prototype.minWidth;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction WeekViewAllDayEventResize() { }\nif (false) {\n    /** @type {?} */\n    WeekViewAllDayEventResize.prototype.originalOffset;\n    /** @type {?} */\n    WeekViewAllDayEventResize.prototype.originalSpan;\n    /** @type {?} */\n    WeekViewAllDayEventResize.prototype.edge;\n}\n/**\n * @record\n */\nfunction CalendarWeekViewBeforeRenderEvent() { }\nif (false) {\n    /** @type {?} */\n    CalendarWeekViewBeforeRenderEvent.prototype.header;\n}\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\nclass CalendarWeekViewComponent {\n    /**\n     * @hidden\n     * @param {?} cdr\n     * @param {?} utils\n     * @param {?} locale\n     * @param {?} dateAdapter\n     */\n    constructor(cdr, utils, locale, dateAdapter) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.dateAdapter = dateAdapter;\n        /**\n         * An array of events to display on view\n         * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n         */\n        this.events = [];\n        /**\n         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n         */\n        this.excludeDays = [];\n        /**\n         * The placement of the event tooltip\n         */\n        this.tooltipPlacement = 'auto';\n        /**\n         * Whether to append tooltips to the body or next to the trigger element\n         */\n        this.tooltipAppendToBody = true;\n        /**\n         * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n         * will be displayed immediately.\n         */\n        this.tooltipDelay = null;\n        /**\n         * The precision to display events.\n         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n         */\n        this.precision = 'days';\n        /**\n         * Whether to snap events to a grid when dragging\n         */\n        this.snapDraggedEvents = true;\n        /**\n         * The number of segments in an hour. Must be <= 6\n         */\n        this.hourSegments = 2;\n        /**\n         * The height in pixels of each hour segment\n         */\n        this.hourSegmentHeight = 30;\n        /**\n         * The day start hours in 24 hour time. Must be 0-23\n         */\n        this.dayStartHour = 0;\n        /**\n         * The day start minutes. Must be 0-59\n         */\n        this.dayStartMinute = 0;\n        /**\n         * The day end hours in 24 hour time. Must be 0-23\n         */\n        this.dayEndHour = 23;\n        /**\n         * The day end minutes. Must be 0-59\n         */\n        this.dayEndMinute = 59;\n        /**\n         * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n         */\n        this.dayHeaderClicked = new EventEmitter();\n        /**\n         * Called when the event title is clicked\n         */\n        this.eventClicked = new EventEmitter();\n        /**\n         * Called when an event is resized or dragged and dropped\n         */\n        this.eventTimesChanged = new EventEmitter();\n        /**\n         * An output that will be called before the view is rendered for the current week.\n         * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n         */\n        this.beforeViewRender = new EventEmitter();\n        /**\n         * Called when an hour segment is clicked\n         */\n        this.hourSegmentClicked = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.allDayEventResizes = new Map();\n        /**\n         * @hidden\n         */\n        this.timeEventResizes = new Map();\n        /**\n         * @hidden\n         */\n        this.eventDragEnterByType = {\n            allDay: 0,\n            time: 0\n        };\n        /**\n         * @hidden\n         */\n        this.dragActive = false;\n        /**\n         * @hidden\n         */\n        this.dragAlreadyMoved = false;\n        /**\n         * @hidden\n         */\n        this.calendarId = Symbol('angular calendar week view id');\n        /**\n         * @hidden\n         */\n        this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n        /**\n         * @hidden\n         */\n        this.trackByHourSegment = trackByHourSegment;\n        /**\n         * @hidden\n         */\n        this.trackByHour = trackByHour;\n        /**\n         * @hidden\n         */\n        this.trackByDayOrWeekEvent = trackByDayOrWeekEvent;\n        /**\n         * @hidden\n         */\n        this.trackByHourColumn = (/**\n         * @param {?} index\n         * @param {?} column\n         * @return {?}\n         */\n        (index, column) => column.hours[0] ? column.hours[0].segments[0].date.toISOString() : column);\n        /**\n         * @hidden\n         */\n        this.trackById = (/**\n         * @param {?} index\n         * @param {?} row\n         * @return {?}\n         */\n        (index, row) => row.id);\n        this.locale = locale;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.refreshAll();\n                this.cdr.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const refreshHeader = changes.viewDate ||\n            changes.excludeDays ||\n            changes.weekendDays ||\n            changes.daysInWeek ||\n            changes.weekStartsOn;\n        /** @type {?} */\n        const refreshBody = changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.hourSegments ||\n            changes.weekStartsOn ||\n            changes.weekendDays ||\n            changes.excludeDays ||\n            changes.hourSegmentHeight ||\n            changes.events ||\n            changes.daysInWeek;\n        if (refreshHeader) {\n            this.refreshHeader();\n        }\n        if (changes.events) {\n            validateEvents(this.events);\n        }\n        if (refreshBody) {\n            this.refreshBody();\n        }\n        if (refreshHeader || refreshBody) {\n            this.emitBeforeViewRender();\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    }\n    /**\n     * @protected\n     * @param {?} eventsContainer\n     * @param {?=} minWidth\n     * @return {?}\n     */\n    resizeStarted(eventsContainer, minWidth) {\n        this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n        /** @type {?} */\n        const resizeHelper = new CalendarResizeHelper(eventsContainer, minWidth);\n        this.validateResize = (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ rectangle }) => resizeHelper.validateResize({ rectangle }));\n        this.cdr.markForCheck();\n    }\n    /**\n     * @hidden\n     * @param {?} eventsContainer\n     * @param {?} timeEvent\n     * @param {?} resizeEvent\n     * @return {?}\n     */\n    timeEventResizeStarted(eventsContainer, timeEvent, resizeEvent) {\n        this.timeEventResizes.set(timeEvent.event, resizeEvent);\n        this.resizeStarted(eventsContainer);\n    }\n    /**\n     * @hidden\n     * @param {?} timeEvent\n     * @param {?} resizeEvent\n     * @return {?}\n     */\n    timeEventResizing(timeEvent, resizeEvent) {\n        this.timeEventResizes.set(timeEvent.event, resizeEvent);\n        /** @type {?} */\n        const adjustedEvents = new Map();\n        /** @type {?} */\n        const tempEvents = [...this.events];\n        this.timeEventResizes.forEach((/**\n         * @param {?} lastResizeEvent\n         * @param {?} event\n         * @return {?}\n         */\n        (lastResizeEvent, event) => {\n            /** @type {?} */\n            const newEventDates = this.getTimeEventResizedDates(event, lastResizeEvent);\n            /** @type {?} */\n            const adjustedEvent = Object.assign({}, event, newEventDates);\n            adjustedEvents.set(adjustedEvent, event);\n            /** @type {?} */\n            const eventIndex = tempEvents.indexOf(event);\n            tempEvents[eventIndex] = adjustedEvent;\n        }));\n        this.restoreOriginalEvents(tempEvents, adjustedEvents);\n    }\n    /**\n     * @hidden\n     * @param {?} timeEvent\n     * @return {?}\n     */\n    timeEventResizeEnded(timeEvent) {\n        this.view = this.getWeekView(this.events);\n        /** @type {?} */\n        const lastResizeEvent = this.timeEventResizes.get(timeEvent.event);\n        if (lastResizeEvent) {\n            this.timeEventResizes.delete(timeEvent.event);\n            /** @type {?} */\n            const newEventDates = this.getTimeEventResizedDates(timeEvent.event, lastResizeEvent);\n            this.eventTimesChanged.emit({\n                newStart: newEventDates.start,\n                newEnd: newEventDates.end,\n                event: timeEvent.event,\n                type: CalendarEventTimesChangedEventType.Resize\n            });\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} allDayEventsContainer\n     * @param {?} allDayEvent\n     * @param {?} resizeEvent\n     * @return {?}\n     */\n    allDayEventResizeStarted(allDayEventsContainer, allDayEvent, resizeEvent) {\n        this.allDayEventResizes.set(allDayEvent, {\n            originalOffset: allDayEvent.offset,\n            originalSpan: allDayEvent.span,\n            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n        });\n        this.resizeStarted(allDayEventsContainer, this.getDayColumnWidth(allDayEventsContainer));\n    }\n    /**\n     * @hidden\n     * @param {?} allDayEvent\n     * @param {?} resizeEvent\n     * @param {?} dayWidth\n     * @return {?}\n     */\n    allDayEventResizing(allDayEvent, resizeEvent, dayWidth) {\n        /** @type {?} */\n        const currentResize = this.allDayEventResizes.get(allDayEvent);\n        if (typeof resizeEvent.edges.left !== 'undefined') {\n            /** @type {?} */\n            const diff = Math.round(+resizeEvent.edges.left / dayWidth);\n            allDayEvent.offset = currentResize.originalOffset + diff;\n            allDayEvent.span = currentResize.originalSpan - diff;\n        }\n        else if (typeof resizeEvent.edges.right !== 'undefined') {\n            /** @type {?} */\n            const diff = Math.round(+resizeEvent.edges.right / dayWidth);\n            allDayEvent.span = currentResize.originalSpan + diff;\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} allDayEvent\n     * @return {?}\n     */\n    allDayEventResizeEnded(allDayEvent) {\n        /** @type {?} */\n        const currentResize = this.allDayEventResizes.get(allDayEvent);\n        if (currentResize) {\n            /** @type {?} */\n            const allDayEventResizingBeforeStart = currentResize.edge === 'left';\n            /** @type {?} */\n            let daysDiff;\n            if (allDayEventResizingBeforeStart) {\n                daysDiff = allDayEvent.offset - currentResize.originalOffset;\n            }\n            else {\n                daysDiff = allDayEvent.span - currentResize.originalSpan;\n            }\n            allDayEvent.offset = currentResize.originalOffset;\n            allDayEvent.span = currentResize.originalSpan;\n            /** @type {?} */\n            let newStart = allDayEvent.event.start;\n            /** @type {?} */\n            let newEnd = allDayEvent.event.end || allDayEvent.event.start;\n            if (allDayEventResizingBeforeStart) {\n                newStart = addDaysWithExclusions(this.dateAdapter, newStart, daysDiff, this.excludeDays);\n            }\n            else {\n                newEnd = addDaysWithExclusions(this.dateAdapter, newEnd, daysDiff, this.excludeDays);\n            }\n            this.eventTimesChanged.emit({\n                newStart,\n                newEnd,\n                event: allDayEvent.event,\n                type: CalendarEventTimesChangedEventType.Resize\n            });\n            this.allDayEventResizes.delete(allDayEvent);\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} eventRowContainer\n     * @return {?}\n     */\n    getDayColumnWidth(eventRowContainer) {\n        return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n    }\n    /**\n     * @hidden\n     * @param {?} dropEvent\n     * @param {?} date\n     * @param {?} allDay\n     * @return {?}\n     */\n    eventDropped(dropEvent, date, allDay) {\n        if (shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId)) {\n            this.eventTimesChanged.emit({\n                type: CalendarEventTimesChangedEventType.Drop,\n                event: dropEvent.dropData.event,\n                newStart: date,\n                allDay\n            });\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} type\n     * @return {?}\n     */\n    dragEnter(type) {\n        this.eventDragEnterByType[type]++;\n    }\n    /**\n     * @hidden\n     * @param {?} type\n     * @return {?}\n     */\n    dragLeave(type) {\n        this.eventDragEnterByType[type]--;\n    }\n    /**\n     * @hidden\n     * @param {?} eventsContainer\n     * @param {?} event\n     * @param {?=} dayEvent\n     * @return {?}\n     */\n    dragStarted(eventsContainer, event, dayEvent) {\n        this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n        /** @type {?} */\n        const dragHelper = new CalendarDragHelper(eventsContainer, event);\n        this.validateDrag = (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ x, y, transform }) => this.allDayEventResizes.size === 0 &&\n            this.timeEventResizes.size === 0 &&\n            dragHelper.validateDrag({\n                x,\n                y,\n                snapDraggedEvents: this.snapDraggedEvents,\n                dragAlreadyMoved: this.dragAlreadyMoved,\n                transform\n            }));\n        this.dragActive = true;\n        this.dragAlreadyMoved = false;\n        this.eventDragEnterByType = {\n            allDay: 0,\n            time: 0\n        };\n        if (!this.snapDraggedEvents && dayEvent) {\n            this.view.hourColumns.forEach((/**\n             * @param {?} column\n             * @return {?}\n             */\n            column => {\n                /** @type {?} */\n                const linkedEvent = column.events.find((/**\n                 * @param {?} columnEvent\n                 * @return {?}\n                 */\n                columnEvent => columnEvent.event === dayEvent.event && columnEvent !== dayEvent));\n                // hide any linked events while dragging\n                if (linkedEvent) {\n                    linkedEvent.width = 0;\n                    linkedEvent.height = 0;\n                }\n            }));\n        }\n        this.cdr.markForCheck();\n    }\n    /**\n     * @hidden\n     * @param {?} dayEvent\n     * @param {?} dragEvent\n     * @return {?}\n     */\n    dragMove(dayEvent, dragEvent) {\n        if (this.snapDraggedEvents) {\n            /** @type {?} */\n            const newEventTimes = this.getDragMovedEventTimes(dayEvent, dragEvent, this.dayColumnWidth, true);\n            /** @type {?} */\n            const originalEvent = dayEvent.event;\n            /** @type {?} */\n            const adjustedEvent = Object.assign({}, originalEvent, newEventTimes);\n            /** @type {?} */\n            const tempEvents = this.events.map((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                if (event === originalEvent) {\n                    return adjustedEvent;\n                }\n                return event;\n            }));\n            this.restoreOriginalEvents(tempEvents, new Map([[adjustedEvent, originalEvent]]));\n        }\n        this.dragAlreadyMoved = true;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    allDayEventDragMove() {\n        this.dragAlreadyMoved = true;\n    }\n    /**\n     * @hidden\n     * @param {?} weekEvent\n     * @param {?} dragEndEvent\n     * @param {?} dayWidth\n     * @param {?=} useY\n     * @return {?}\n     */\n    dragEnded(weekEvent, dragEndEvent, dayWidth, useY = false) {\n        this.view = this.getWeekView(this.events);\n        this.dragActive = false;\n        const { start, end } = this.getDragMovedEventTimes(weekEvent, dragEndEvent, dayWidth, useY);\n        if (this.eventDragEnterByType[useY ? 'time' : 'allDay'] > 0 &&\n            isDraggedWithinPeriod(start, end, this.view.period)) {\n            this.eventTimesChanged.emit({\n                newStart: start,\n                newEnd: end,\n                event: weekEvent.event,\n                type: CalendarEventTimesChangedEventType.Drag,\n                allDay: !useY\n            });\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshHeader() {\n        this.days = this.utils.getWeekViewHeader(Object.assign({ viewDate: this.viewDate, weekStartsOn: this.weekStartsOn, excluded: this.excludeDays, weekendDays: this.weekendDays }, getWeekViewPeriod(this.dateAdapter, this.viewDate, this.weekStartsOn, this.excludeDays, this.daysInWeek)));\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshBody() {\n        this.view = this.getWeekView(this.events);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshAll() {\n        this.refreshHeader();\n        this.refreshBody();\n        this.emitBeforeViewRender();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    emitBeforeViewRender() {\n        if (this.days && this.view) {\n            this.beforeViewRender.emit(Object.assign({ header: this.days }, this.view));\n        }\n    }\n    /**\n     * @protected\n     * @param {?} events\n     * @return {?}\n     */\n    getWeekView(events) {\n        return this.utils.getWeekView(Object.assign({ events, viewDate: this.viewDate, weekStartsOn: this.weekStartsOn, excluded: this.excludeDays, precision: this.precision, absolutePositionedEvents: true, hourSegments: this.hourSegments, dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            }, dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }, segmentHeight: this.hourSegmentHeight, weekendDays: this.weekendDays }, getWeekViewPeriod(this.dateAdapter, this.viewDate, this.weekStartsOn, this.excludeDays, this.daysInWeek)));\n    }\n    /**\n     * @protected\n     * @param {?} weekEvent\n     * @param {?} dragEndEvent\n     * @param {?} dayWidth\n     * @param {?} useY\n     * @return {?}\n     */\n    getDragMovedEventTimes(weekEvent, dragEndEvent, dayWidth, useY) {\n        /** @type {?} */\n        const daysDragged = roundToNearest(dragEndEvent.x, dayWidth) / dayWidth;\n        /** @type {?} */\n        const minutesMoved = useY\n            ? getMinutesMoved(dragEndEvent.y, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize)\n            : 0;\n        /** @type {?} */\n        const start = this.dateAdapter.addMinutes(addDaysWithExclusions(this.dateAdapter, weekEvent.event.start, daysDragged, this.excludeDays), minutesMoved);\n        /** @type {?} */\n        let end;\n        if (weekEvent.event.end) {\n            end = this.dateAdapter.addMinutes(addDaysWithExclusions(this.dateAdapter, weekEvent.event.end, daysDragged, this.excludeDays), minutesMoved);\n        }\n        return { start, end };\n    }\n    /**\n     * @protected\n     * @param {?} tempEvents\n     * @param {?} adjustedEvents\n     * @return {?}\n     */\n    restoreOriginalEvents(tempEvents, adjustedEvents) {\n        /** @type {?} */\n        const previousView = this.view;\n        this.view = this.getWeekView(tempEvents);\n        /** @type {?} */\n        const adjustedEventsArray = tempEvents.filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => adjustedEvents.has(event)));\n        this.view.hourColumns.forEach((/**\n         * @param {?} column\n         * @param {?} columnIndex\n         * @return {?}\n         */\n        (column, columnIndex) => {\n            previousView.hourColumns[columnIndex].hours.forEach((/**\n             * @param {?} hour\n             * @param {?} hourIndex\n             * @return {?}\n             */\n            (hour, hourIndex) => {\n                hour.segments.forEach((/**\n                 * @param {?} segment\n                 * @param {?} segmentIndex\n                 * @return {?}\n                 */\n                (segment, segmentIndex) => {\n                    column.hours[hourIndex].segments[segmentIndex].cssClass =\n                        segment.cssClass;\n                }));\n            }));\n            adjustedEventsArray.forEach((/**\n             * @param {?} adjustedEvent\n             * @return {?}\n             */\n            adjustedEvent => {\n                /** @type {?} */\n                const originalEvent = adjustedEvents.get(adjustedEvent);\n                /** @type {?} */\n                const existingColumnEvent = column.events.find((/**\n                 * @param {?} columnEvent\n                 * @return {?}\n                 */\n                columnEvent => columnEvent.event === adjustedEvent));\n                if (existingColumnEvent) {\n                    // restore the original event so trackBy kicks in and the dom isn't changed\n                    existingColumnEvent.event = originalEvent;\n                }\n                else {\n                    // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early\n                    column.events.push({\n                        event: originalEvent,\n                        left: 0,\n                        top: 0,\n                        height: 0,\n                        width: 0,\n                        startsBeforeDay: false,\n                        endsAfterDay: false\n                    });\n                }\n            }));\n        }));\n        adjustedEvents.clear();\n    }\n    /**\n     * @protected\n     * @param {?} calendarEvent\n     * @param {?} resizeEvent\n     * @return {?}\n     */\n    getTimeEventResizedDates(calendarEvent, resizeEvent) {\n        /** @type {?} */\n        const minimumEventHeight = getMinimumEventHeightInMinutes(this.hourSegments, this.hourSegmentHeight);\n        /** @type {?} */\n        const newEventDates = {\n            start: calendarEvent.start,\n            end: getDefaultEventEnd(this.dateAdapter, calendarEvent, minimumEventHeight)\n        };\n        const { end } = calendarEvent, eventWithoutEnd = __rest(calendarEvent, [\"end\"]);\n        /** @type {?} */\n        const smallestResizes = {\n            start: this.dateAdapter.addMinutes(newEventDates.end, minimumEventHeight * -1),\n            end: getDefaultEventEnd(this.dateAdapter, eventWithoutEnd, minimumEventHeight)\n        };\n        if (typeof resizeEvent.edges.left !== 'undefined') {\n            /** @type {?} */\n            const daysDiff = Math.round(+resizeEvent.edges.left / this.dayColumnWidth);\n            /** @type {?} */\n            const newStart = addDaysWithExclusions(this.dateAdapter, newEventDates.start, daysDiff, this.excludeDays);\n            if (newStart < smallestResizes.start) {\n                newEventDates.start = newStart;\n            }\n            else {\n                newEventDates.start = smallestResizes.start;\n            }\n        }\n        else if (typeof resizeEvent.edges.right !== 'undefined') {\n            /** @type {?} */\n            const daysDiff = Math.round(+resizeEvent.edges.right / this.dayColumnWidth);\n            /** @type {?} */\n            const newEnd = addDaysWithExclusions(this.dateAdapter, newEventDates.end, daysDiff, this.excludeDays);\n            if (newEnd > smallestResizes.end) {\n                newEventDates.end = newEnd;\n            }\n            else {\n                newEventDates.end = smallestResizes.end;\n            }\n        }\n        if (typeof resizeEvent.edges.top !== 'undefined') {\n            /** @type {?} */\n            const minutesMoved = getMinutesMoved((/** @type {?} */ (resizeEvent.edges.top)), this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n            /** @type {?} */\n            const newStart = this.dateAdapter.addMinutes(newEventDates.start, minutesMoved);\n            if (newStart < smallestResizes.start) {\n                newEventDates.start = newStart;\n            }\n            else {\n                newEventDates.start = smallestResizes.start;\n            }\n        }\n        else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n            /** @type {?} */\n            const minutesMoved = getMinutesMoved((/** @type {?} */ (resizeEvent.edges.bottom)), this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n            /** @type {?} */\n            const newEnd = this.dateAdapter.addMinutes(newEventDates.end, minutesMoved);\n            if (newEnd > smallestResizes.end) {\n                newEventDates.end = newEnd;\n            }\n            else {\n                newEventDates.end = smallestResizes.end;\n            }\n        }\n        return newEventDates;\n    }\n}\nCalendarWeekViewComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-week-view',\n                template: `\n    <div class=\"cal-week-view\">\n      <mwl-calendar-week-view-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n        (eventDropped)=\"\n          eventDropped({ dropData: $event }, $event.newStart, true)\n        \"\n      >\n      </mwl-calendar-week-view-header>\n      <div\n        class=\"cal-all-day-events\"\n        #allDayEventsContainer\n        *ngIf=\"view.allDayEventRows.length > 0\"\n        mwlDroppable\n        (dragEnter)=\"dragEnter('allDay')\"\n        (dragLeave)=\"dragLeave('allDay')\"\n      >\n        <div class=\"cal-day-columns\">\n          <div\n            class=\"cal-time-label-column\"\n            [ngTemplateOutlet]=\"allDayEventsLabelTemplate\"\n          ></div>\n          <div\n            class=\"cal-day-column\"\n            *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n            mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            (drop)=\"eventDropped($event, day.date, true)\"\n          ></div>\n        </div>\n        <div\n          *ngFor=\"let eventRow of view.allDayEventRows; trackBy: trackById\"\n          #eventRowContainer\n          class=\"cal-events-row\"\n        >\n          <div\n            *ngFor=\"\n              let allDayEvent of eventRow.row;\n              trackBy: trackByDayOrWeekEvent\n            \"\n            #event\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"\n              allDayEvent.event.draggable && allDayEventResizes.size === 0\n            \"\n            [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n            [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n            [ngClass]=\"allDayEvent.event?.cssClass\"\n            [style.width.%]=\"(100 / days.length) * allDayEvent.span\"\n            [style.marginLeft.%]=\"(100 / days.length) * allDayEvent.offset\"\n            mwlResizable\n            [resizeSnapGrid]=\"{ left: dayColumnWidth, right: dayColumnWidth }\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"\n              allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n            \"\n            (resizing)=\"\n              allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n            \"\n            (resizeEnd)=\"allDayEventResizeEnded(allDayEvent)\"\n            mwlDraggable\n            dragActiveClass=\"cal-drag-active\"\n            [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n            [dragAxis]=\"{\n              x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n              y:\n                !snapDraggedEvents &&\n                allDayEvent.event.draggable &&\n                allDayEventResizes.size === 0\n            }\"\n            [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n            [validateDrag]=\"validateDrag\"\n            (dragStart)=\"dragStarted(eventRowContainer, event)\"\n            (dragging)=\"allDayEventDragMove()\"\n            (dragEnd)=\"dragEnded(allDayEvent, $event, dayColumnWidth)\"\n          >\n            <div\n              class=\"cal-resize-handle cal-resize-handle-before-start\"\n              *ngIf=\"\n                allDayEvent.event?.resizable?.beforeStart &&\n                !allDayEvent.startsBeforeWeek\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ left: true }\"\n            ></div>\n            <mwl-calendar-week-view-event\n              [weekEvent]=\"allDayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              [eventActionsTemplate]=\"eventActionsTemplate\"\n              (eventClicked)=\"eventClicked.emit({ event: allDayEvent.event })\"\n            >\n            </mwl-calendar-week-view-event>\n            <div\n              class=\"cal-resize-handle cal-resize-handle-after-end\"\n              *ngIf=\"\n                allDayEvent.event?.resizable?.afterEnd &&\n                !allDayEvent.endsAfterWeek\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ right: true }\"\n            ></div>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"cal-time-events\"\n        mwlDroppable\n        (dragEnter)=\"dragEnter('time')\"\n        (dragLeave)=\"dragLeave('time')\"\n      >\n        <div class=\"cal-time-label-column\" *ngIf=\"view.hourColumns.length > 0\">\n          <div\n            *ngFor=\"\n              let hour of view.hourColumns[0].hours;\n              trackBy: trackByHour;\n              let odd = odd\n            \"\n            class=\"cal-hour\"\n            [class.cal-hour-odd]=\"odd\"\n          >\n            <mwl-calendar-week-view-hour-segment\n              *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n              [style.height.px]=\"hourSegmentHeight\"\n              [segment]=\"segment\"\n              [segmentHeight]=\"hourSegmentHeight\"\n              [locale]=\"locale\"\n              [customTemplate]=\"hourSegmentTemplate\"\n              [isTimeLabel]=\"true\"\n            >\n            </mwl-calendar-week-view-hour-segment>\n          </div>\n        </div>\n        <div\n          class=\"cal-day-columns\"\n          [class.cal-resize-active]=\"timeEventResizes.size > 0\"\n          #dayColumns\n        >\n          <div\n            class=\"cal-day-column\"\n            *ngFor=\"let column of view.hourColumns; trackBy: trackByHourColumn\"\n          >\n            <div\n              *ngFor=\"\n                let timeEvent of column.events;\n                trackBy: trackByDayOrWeekEvent\n              \"\n              #event\n              class=\"cal-event-container\"\n              [class.cal-draggable]=\"\n                timeEvent.event.draggable && timeEventResizes.size === 0\n              \"\n              [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n              [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n              [ngClass]=\"timeEvent.event.cssClass\"\n              [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n              [style.top.px]=\"timeEvent.top\"\n              [style.height.px]=\"timeEvent.height\"\n              [style.left.%]=\"timeEvent.left\"\n              [style.width.%]=\"timeEvent.width\"\n              mwlResizable\n              [resizeSnapGrid]=\"{\n                left: dayColumnWidth,\n                right: dayColumnWidth,\n                top: eventSnapSize || hourSegmentHeight,\n                bottom: eventSnapSize || hourSegmentHeight\n              }\"\n              [validateResize]=\"validateResize\"\n              [allowNegativeResizes]=\"true\"\n              (resizeStart)=\"\n                timeEventResizeStarted(dayColumns, timeEvent, $event)\n              \"\n              (resizing)=\"timeEventResizing(timeEvent, $event)\"\n              (resizeEnd)=\"timeEventResizeEnded(timeEvent)\"\n              mwlDraggable\n              dragActiveClass=\"cal-drag-active\"\n              [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n              [dragAxis]=\"{\n                x: timeEvent.event.draggable && timeEventResizes.size === 0,\n                y: timeEvent.event.draggable && timeEventResizes.size === 0\n              }\"\n              [dragSnapGrid]=\"\n                snapDraggedEvents\n                  ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n                  : {}\n              \"\n              [ghostDragEnabled]=\"!snapDraggedEvents\"\n              [validateDrag]=\"validateDrag\"\n              (dragStart)=\"dragStarted(dayColumns, event, timeEvent)\"\n              (dragging)=\"dragMove(timeEvent, $event)\"\n              (dragEnd)=\"dragEnded(timeEvent, $event, dayColumnWidth, true)\"\n            >\n              <div\n                class=\"cal-resize-handle cal-resize-handle-before-start\"\n                *ngIf=\"\n                  timeEvent.event?.resizable?.beforeStart &&\n                  !timeEvent.startsBeforeDay\n                \"\n                mwlResizeHandle\n                [resizeEdges]=\"{\n                  left: true,\n                  top: true\n                }\"\n              ></div>\n              <mwl-calendar-week-view-event\n                [weekEvent]=\"timeEvent\"\n                [tooltipPlacement]=\"tooltipPlacement\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                [tooltipAppendToBody]=\"tooltipAppendToBody\"\n                [tooltipDisabled]=\"dragActive || timeEventResizes.size > 0\"\n                [tooltipDelay]=\"tooltipDelay\"\n                [customTemplate]=\"eventTemplate\"\n                [eventTitleTemplate]=\"eventTitleTemplate\"\n                [eventActionsTemplate]=\"eventActionsTemplate\"\n                [column]=\"column\"\n                (eventClicked)=\"eventClicked.emit({ event: timeEvent.event })\"\n              >\n              </mwl-calendar-week-view-event>\n              <div\n                class=\"cal-resize-handle cal-resize-handle-after-end\"\n                *ngIf=\"\n                  timeEvent.event?.resizable?.afterEnd &&\n                  !timeEvent.endsAfterDay\n                \"\n                mwlResizeHandle\n                [resizeEdges]=\"{\n                  right: true,\n                  bottom: true\n                }\"\n              ></div>\n            </div>\n\n            <div\n              *ngFor=\"\n                let hour of column.hours;\n                trackBy: trackByHour;\n                let odd = odd\n              \"\n              class=\"cal-hour\"\n              [class.cal-hour-odd]=\"odd\"\n            >\n              <mwl-calendar-week-view-hour-segment\n                *ngFor=\"\n                  let segment of hour.segments;\n                  trackBy: trackByHourSegment\n                \"\n                [style.height.px]=\"hourSegmentHeight\"\n                [segment]=\"segment\"\n                [segmentHeight]=\"hourSegmentHeight\"\n                [locale]=\"locale\"\n                [customTemplate]=\"hourSegmentTemplate\"\n                (mwlClick)=\"hourSegmentClicked.emit({ date: segment.date })\"\n                [clickListenerDisabled]=\"\n                  hourSegmentClicked.observers.length === 0\n                \"\n                mwlDroppable\n                [dragOverClass]=\"\n                  !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n                \"\n                dragActiveClass=\"cal-drag-active\"\n                (drop)=\"eventDropped($event, segment.date, false)\"\n              >\n              </mwl-calendar-week-view-hour-segment>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n            }] }\n];\n/** @nocollapse */\nCalendarWeekViewComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: CalendarUtils },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: DateAdapter }\n];\nCalendarWeekViewComponent.propDecorators = {\n    viewDate: [{ type: Input }],\n    events: [{ type: Input }],\n    excludeDays: [{ type: Input }],\n    refresh: [{ type: Input }],\n    locale: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    weekStartsOn: [{ type: Input }],\n    headerTemplate: [{ type: Input }],\n    eventTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    precision: [{ type: Input }],\n    weekendDays: [{ type: Input }],\n    snapDraggedEvents: [{ type: Input }],\n    hourSegments: [{ type: Input }],\n    hourSegmentHeight: [{ type: Input }],\n    dayStartHour: [{ type: Input }],\n    dayStartMinute: [{ type: Input }],\n    dayEndHour: [{ type: Input }],\n    dayEndMinute: [{ type: Input }],\n    hourSegmentTemplate: [{ type: Input }],\n    eventSnapSize: [{ type: Input }],\n    allDayEventsLabelTemplate: [{ type: Input }],\n    daysInWeek: [{ type: Input }],\n    dayHeaderClicked: [{ type: Output }],\n    eventClicked: [{ type: Output }],\n    eventTimesChanged: [{ type: Output }],\n    beforeViewRender: [{ type: Output }],\n    hourSegmentClicked: [{ type: Output }]\n};\nif (false) {\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.viewDate;\n    /**\n     * An array of events to display on view\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.events;\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.excludeDays;\n    /**\n     * An observable that when emitted on will re-render the current view\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.refresh;\n    /**\n     * The locale used to format dates\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.locale;\n    /**\n     * The placement of the event tooltip\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.tooltipPlacement;\n    /**\n     * A custom template to use for the event tooltips\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.tooltipTemplate;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.tooltipAppendToBody;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.tooltipDelay;\n    /**\n     * The start number of the week.\n     * This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\n     * Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.weekStartsOn;\n    /**\n     * A custom template to use to replace the header\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.headerTemplate;\n    /**\n     * A custom template to use for week view events\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventTemplate;\n    /**\n     * A custom template to use for event titles\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventTitleTemplate;\n    /**\n     * A custom template to use for event actions\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventActionsTemplate;\n    /**\n     * The precision to display events.\n     * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.precision;\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.weekendDays;\n    /**\n     * Whether to snap events to a grid when dragging\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.snapDraggedEvents;\n    /**\n     * The number of segments in an hour. Must be <= 6\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.hourSegments;\n    /**\n     * The height in pixels of each hour segment\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.hourSegmentHeight;\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayStartHour;\n    /**\n     * The day start minutes. Must be 0-59\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayStartMinute;\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayEndHour;\n    /**\n     * The day end minutes. Must be 0-59\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayEndMinute;\n    /**\n     * A custom template to use to replace the hour segment\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.hourSegmentTemplate;\n    /**\n     * The grid size to snap resizing and dragging of hourly events to\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventSnapSize;\n    /**\n     * A custom template to use for the all day events label text\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.allDayEventsLabelTemplate;\n    /**\n     * The number of days in a week. Can be used to create a shorter or longer week view.\n     * The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.daysInWeek;\n    /**\n     * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayHeaderClicked;\n    /**\n     * Called when the event title is clicked\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventClicked;\n    /**\n     * Called when an event is resized or dragged and dropped\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventTimesChanged;\n    /**\n     * An output that will be called before the view is rendered for the current week.\n     * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.beforeViewRender;\n    /**\n     * Called when an hour segment is clicked\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.hourSegmentClicked;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.days;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.view;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.refreshSubscription;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.allDayEventResizes;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.timeEventResizes;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.eventDragEnterByType;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dragActive;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dragAlreadyMoved;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.validateDrag;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.validateResize;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.dayColumnWidth;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.calendarId;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackByWeekDayHeaderDate;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackByHourSegment;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackByHour;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackByDayOrWeekEvent;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackByHourColumn;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarWeekViewComponent.prototype.trackById;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarWeekViewComponent.prototype.cdr;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarWeekViewComponent.prototype.utils;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarWeekViewComponent.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarWeekViewHeaderComponent {\n    constructor() {\n        this.dayHeaderClicked = new EventEmitter();\n        this.eventDropped = new EventEmitter();\n        this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n    }\n}\nCalendarWeekViewHeaderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-week-view-header',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-dayHeaderClicked=\"dayHeaderClicked\"\n      let-eventDropped=\"eventDropped\"\n      let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n    >\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({ day: day })\"\n          mwlDroppable\n          dragOverClass=\"cal-drag-over\"\n          (drop)=\"\n            eventDropped.emit({\n              event: $event.dropData.event,\n              newStart: day.date\n            })\n          \"\n        >\n          <b>{{ day.date | calendarDate: 'weekViewColumnHeader':locale }}</b\n          ><br />\n          <span>{{\n            day.date | calendarDate: 'weekViewColumnSubHeader':locale\n          }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        days: days,\n        locale: locale,\n        dayHeaderClicked: dayHeaderClicked,\n        eventDropped: eventDropped,\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarWeekViewHeaderComponent.propDecorators = {\n    days: [{ type: Input }],\n    locale: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    dayHeaderClicked: [{ type: Output }],\n    eventDropped: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.days;\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.locale;\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.dayHeaderClicked;\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.eventDropped;\n    /** @type {?} */\n    CalendarWeekViewHeaderComponent.prototype.trackByWeekDayHeaderDate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarWeekViewEventComponent {\n    constructor() {\n        this.eventClicked = new EventEmitter();\n    }\n}\nCalendarWeekViewEventComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-week-view-event',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\"\n      let-tooltipDisabled=\"tooltipDisabled\"\n      let-tooltipDelay=\"tooltipDelay\"\n      let-column=\"column\"\n    >\n      <div\n        class=\"cal-event\"\n        [ngStyle]=\"{\n          backgroundColor: weekEvent.event.color?.secondary,\n          borderColor: weekEvent.event.color?.primary\n        }\"\n        [mwlCalendarTooltip]=\"\n          !tooltipDisabled\n            ? (weekEvent.event.title\n              | calendarEventTitle: 'weekTooltip':weekEvent.event)\n            : ''\n        \"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\"\n        [tooltipDelay]=\"tooltipDelay\"\n        (mwlClick)=\"eventClicked.emit()\"\n      >\n        <mwl-calendar-event-actions\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventActionsTemplate\"\n        >\n        </mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"week\"\n        >\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody,\n        tooltipDisabled: tooltipDisabled,\n        tooltipDelay: tooltipDelay,\n        column: column\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarWeekViewEventComponent.propDecorators = {\n    weekEvent: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    tooltipDisabled: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    column: [{ type: Input }],\n    eventClicked: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.weekEvent;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.tooltipPlacement;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.tooltipAppendToBody;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.tooltipDisabled;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.tooltipDelay;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.eventTitleTemplate;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.eventActionsTemplate;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.tooltipTemplate;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.column;\n    /** @type {?} */\n    CalendarWeekViewEventComponent.prototype.eventClicked;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarWeekViewHourSegmentComponent {\n}\nCalendarWeekViewHourSegmentComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-week-view-hour-segment',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-segment=\"segment\"\n      let-locale=\"locale\"\n      let-segmentHeight=\"segmentHeight\"\n      let-isTimeLabel=\"isTimeLabel\"\n    >\n      <div\n        class=\"cal-hour-segment\"\n        [style.height.px]=\"segmentHeight\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\"\n      >\n        <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n          {{ segment.displayDate | calendarDate: 'weekViewHour':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale,\n        segmentHeight: segmentHeight,\n        isTimeLabel: isTimeLabel\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarWeekViewHourSegmentComponent.propDecorators = {\n    segment: [{ type: Input }],\n    segmentHeight: [{ type: Input }],\n    locale: [{ type: Input }],\n    isTimeLabel: [{ type: Input }],\n    customTemplate: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarWeekViewHourSegmentComponent.prototype.segment;\n    /** @type {?} */\n    CalendarWeekViewHourSegmentComponent.prototype.segmentHeight;\n    /** @type {?} */\n    CalendarWeekViewHourSegmentComponent.prototype.locale;\n    /** @type {?} */\n    CalendarWeekViewHourSegmentComponent.prototype.isTimeLabel;\n    /** @type {?} */\n    CalendarWeekViewHourSegmentComponent.prototype.customTemplate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarWeekModule {\n}\nCalendarWeekModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    ResizableModule,\n                    DragAndDropModule,\n                    CalendarCommonModule\n                ],\n                declarations: [\n                    CalendarWeekViewComponent,\n                    CalendarWeekViewHeaderComponent,\n                    CalendarWeekViewEventComponent,\n                    CalendarWeekViewHourSegmentComponent\n                ],\n                exports: [\n                    ResizableModule,\n                    DragAndDropModule,\n                    CalendarWeekViewComponent,\n                    CalendarWeekViewHeaderComponent,\n                    CalendarWeekViewEventComponent,\n                    CalendarWeekViewHourSegmentComponent\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction CalendarDayViewBeforeRenderEvent() { }\nif (false) {\n    /** @type {?} */\n    CalendarDayViewBeforeRenderEvent.prototype.body;\n    /** @type {?} */\n    CalendarDayViewBeforeRenderEvent.prototype.period;\n}\n/**\n * @hidden\n * @record\n */\nfunction DayViewEventResize() { }\nif (false) {\n    /** @type {?} */\n    DayViewEventResize.prototype.originalTop;\n    /** @type {?} */\n    DayViewEventResize.prototype.originalHeight;\n    /** @type {?} */\n    DayViewEventResize.prototype.edge;\n}\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\nclass CalendarDayViewComponent {\n    /**\n     * @hidden\n     * @param {?} cdr\n     * @param {?} utils\n     * @param {?} locale\n     * @param {?} dateAdapter\n     */\n    constructor(cdr, utils, locale, dateAdapter) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.dateAdapter = dateAdapter;\n        /**\n         * An array of events to display on view\n         * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n         */\n        this.events = [];\n        /**\n         * The number of segments in an hour. Must be <= 6\n         */\n        this.hourSegments = 2;\n        /**\n         * The height in pixels of each hour segment\n         */\n        this.hourSegmentHeight = 30;\n        /**\n         * The day start hours in 24 hour time. Must be 0-23\n         */\n        this.dayStartHour = 0;\n        /**\n         * The day start minutes. Must be 0-59\n         */\n        this.dayStartMinute = 0;\n        /**\n         * The day end hours in 24 hour time. Must be 0-23\n         */\n        this.dayEndHour = 23;\n        /**\n         * The day end minutes. Must be 0-59\n         */\n        this.dayEndMinute = 59;\n        /**\n         * The width in pixels of each event on the view\n         */\n        this.eventWidth = 150;\n        /**\n         * The placement of the event tooltip\n         */\n        this.tooltipPlacement = 'auto';\n        /**\n         * Whether to append tooltips to the body or next to the trigger element\n         */\n        this.tooltipAppendToBody = true;\n        /**\n         * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n         * will be displayed immediately.\n         */\n        this.tooltipDelay = null;\n        /**\n         * Whether to snap events to a grid when dragging\n         */\n        this.snapDraggedEvents = true;\n        /**\n         * Called when an event title is clicked\n         */\n        this.eventClicked = new EventEmitter();\n        /**\n         * Called when an hour segment is clicked\n         */\n        this.hourSegmentClicked = new EventEmitter();\n        /**\n         * Called when an event is resized or dragged and dropped\n         */\n        this.eventTimesChanged = new EventEmitter();\n        /**\n         * An output that will be called before the view is rendered for the current day.\n         * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n         */\n        this.beforeViewRender = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.hours = [];\n        /**\n         * @hidden\n         */\n        this.width = 0;\n        /**\n         * @hidden\n         */\n        this.currentResizes = new Map();\n        /**\n         * @hidden\n         */\n        this.eventDragEnter = 0;\n        /**\n         * @hidden\n         */\n        this.calendarId = Symbol('angular calendar day view id');\n        /**\n         * @hidden\n         */\n        this.dragAlreadyMoved = false;\n        /**\n         * @hidden\n         */\n        this.trackByEventId = trackByEventId;\n        /**\n         * @hidden\n         */\n        this.trackByHour = trackByHour;\n        /**\n         * @hidden\n         */\n        this.trackByHourSegment = trackByHourSegment;\n        /**\n         * @hidden\n         */\n        this.trackByDayEvent = trackByDayOrWeekEvent;\n        this.locale = locale;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.refreshAll();\n                this.cdr.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const refreshHourGrid = changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.hourSegments;\n        /** @type {?} */\n        const refreshView = changes.viewDate ||\n            changes.events ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.eventWidth ||\n            changes.hourSegments;\n        if (refreshHourGrid) {\n            this.refreshHourGrid();\n        }\n        if (changes.events) {\n            validateEvents(this.events);\n        }\n        if (refreshView) {\n            this.refreshView();\n        }\n        if (refreshHourGrid || refreshView) {\n            this.emitBeforeViewRender();\n        }\n    }\n    /**\n     * @param {?} dropEvent\n     * @param {?} date\n     * @param {?} allDay\n     * @return {?}\n     */\n    eventDropped(dropEvent, date, allDay) {\n        if (shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId)) {\n            this.eventTimesChanged.emit({\n                type: CalendarEventTimesChangedEventType.Drop,\n                event: dropEvent.dropData.event,\n                newStart: date,\n                allDay\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?} resizeEvent\n     * @param {?} dayEventsContainer\n     * @return {?}\n     */\n    resizeStarted(event, resizeEvent, dayEventsContainer) {\n        this.currentResizes.set(event, {\n            originalTop: event.top,\n            originalHeight: event.height,\n            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n        });\n        /** @type {?} */\n        const resizeHelper = new CalendarResizeHelper(dayEventsContainer);\n        this.validateResize = (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ rectangle }) => resizeHelper.validateResize({ rectangle }));\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} event\n     * @param {?} resizeEvent\n     * @return {?}\n     */\n    resizing(event, resizeEvent) {\n        /** @type {?} */\n        const currentResize = this.currentResizes.get(event);\n        if (typeof resizeEvent.edges.top !== 'undefined') {\n            event.top = currentResize.originalTop + +resizeEvent.edges.top;\n            event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n        }\n        else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n            event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n        }\n    }\n    /**\n     * @param {?} dayEvent\n     * @return {?}\n     */\n    resizeEnded(dayEvent) {\n        /** @type {?} */\n        const currentResize = this.currentResizes.get(dayEvent);\n        /** @type {?} */\n        const resizingBeforeStart = currentResize.edge === 'top';\n        /** @type {?} */\n        let pixelsMoved;\n        if (resizingBeforeStart) {\n            pixelsMoved = dayEvent.top - currentResize.originalTop;\n        }\n        else {\n            pixelsMoved = dayEvent.height - currentResize.originalHeight;\n        }\n        dayEvent.top = currentResize.originalTop;\n        dayEvent.height = currentResize.originalHeight;\n        /** @type {?} */\n        const minutesMoved = getMinutesMoved(pixelsMoved, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n        /** @type {?} */\n        let newStart = dayEvent.event.start;\n        /** @type {?} */\n        let newEnd = getDefaultEventEnd(this.dateAdapter, dayEvent.event, getMinimumEventHeightInMinutes(this.hourSegments, this.hourSegmentHeight));\n        if (resizingBeforeStart) {\n            newStart = this.dateAdapter.addMinutes(newStart, minutesMoved);\n        }\n        else {\n            newEnd = this.dateAdapter.addMinutes(newEnd, minutesMoved);\n        }\n        this.eventTimesChanged.emit({\n            newStart,\n            newEnd,\n            event: dayEvent.event,\n            type: CalendarEventTimesChangedEventType.Resize\n        });\n        this.currentResizes.delete(dayEvent);\n    }\n    /**\n     * @param {?} event\n     * @param {?} dayEventsContainer\n     * @param {?} dayEvent\n     * @return {?}\n     */\n    dragStarted(event, dayEventsContainer, dayEvent) {\n        /** @type {?} */\n        const dragHelper = new CalendarDragHelper(dayEventsContainer, event);\n        this.validateDrag = (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ x, y, transform }) => this.currentResizes.size === 0 &&\n            dragHelper.validateDrag({\n                x,\n                y,\n                snapDraggedEvents: this.snapDraggedEvents,\n                dragAlreadyMoved: this.dragAlreadyMoved,\n                transform\n            }));\n        this.eventDragEnter = 0;\n        this.dragAlreadyMoved = false;\n        this.currentDrag = {\n            dayEvent,\n            originalTop: dayEvent.top,\n            originalLeft: dayEvent.left\n        };\n        this.cdr.markForCheck();\n    }\n    /**\n     * @hidden\n     * @param {?} coords\n     * @return {?}\n     */\n    dragMove(coords) {\n        this.dragAlreadyMoved = true;\n        if (this.snapDraggedEvents) {\n            this.currentDrag.dayEvent.top = this.currentDrag.originalTop + coords.y;\n            this.currentDrag.dayEvent.left = this.currentDrag.originalLeft + coords.x;\n        }\n    }\n    /**\n     * @param {?} dayEvent\n     * @param {?} dragEndEvent\n     * @return {?}\n     */\n    dragEnded(dayEvent, dragEndEvent) {\n        this.currentDrag.dayEvent.top = this.currentDrag.originalTop;\n        this.currentDrag.dayEvent.left = this.currentDrag.originalLeft;\n        this.currentDrag = null;\n        if (this.eventDragEnter > 0) {\n            /** @type {?} */\n            let minutesMoved = getMinutesMoved(dragEndEvent.y, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n            /** @type {?} */\n            let newStart = this.dateAdapter.addMinutes(dayEvent.event.start, minutesMoved);\n            if (dragEndEvent.y < 0 && newStart < this.view.period.start) {\n                minutesMoved += this.dateAdapter.differenceInMinutes(this.view.period.start, newStart);\n                newStart = this.view.period.start;\n            }\n            /** @type {?} */\n            let newEnd;\n            if (dayEvent.event.end) {\n                newEnd = this.dateAdapter.addMinutes(dayEvent.event.end, minutesMoved);\n            }\n            if (isDraggedWithinPeriod(newStart, newEnd, this.view.period)) {\n                this.eventTimesChanged.emit({\n                    newStart,\n                    newEnd,\n                    event: dayEvent.event,\n                    type: CalendarEventTimesChangedEventType.Drag,\n                    allDay: false\n                });\n            }\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshHourGrid() {\n        this.hours = this.utils.getDayViewHourGrid({\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }\n        });\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshView() {\n        this.view = this.utils.getDayView({\n            events: this.events,\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            },\n            eventWidth: this.eventWidth,\n            segmentHeight: this.hourSegmentHeight\n        });\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    refreshAll() {\n        this.refreshHourGrid();\n        this.refreshView();\n        this.emitBeforeViewRender();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    emitBeforeViewRender() {\n        if (this.hours && this.view) {\n            this.beforeViewRender.emit({\n                body: {\n                    hourGrid: this.hours,\n                    allDayEvents: this.view.allDayEvents\n                },\n                period: this.view.period\n            });\n        }\n    }\n}\nCalendarDayViewComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-day-view',\n                template: `\n    <div class=\"cal-day-view\">\n      <div\n        class=\"cal-all-day-events\"\n        mwlDroppable\n        dragOverClass=\"cal-drag-over\"\n        dragActiveClass=\"cal-drag-active\"\n        (drop)=\"eventDropped($event, view.period.start, true)\"\n      >\n        <mwl-calendar-day-view-event\n          *ngFor=\"let event of view.allDayEvents; trackBy: trackByEventId\"\n          [ngClass]=\"event.cssClass\"\n          [dayEvent]=\"{ event: event }\"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          [tooltipDelay]=\"tooltipDelay\"\n          [customTemplate]=\"eventTemplate\"\n          [eventTitleTemplate]=\"eventTitleTemplate\"\n          [eventActionsTemplate]=\"eventActionsTemplate\"\n          (eventClicked)=\"eventClicked.emit({ event: event })\"\n          [class.cal-draggable]=\"!snapDraggedEvents && event.draggable\"\n          mwlDraggable\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: event, calendarId: calendarId }\"\n          [dragAxis]=\"{\n            x: !snapDraggedEvents && event.draggable,\n            y: !snapDraggedEvents && event.draggable\n          }\"\n        >\n        </mwl-calendar-day-view-event>\n      </div>\n      <div\n        class=\"cal-hour-rows\"\n        #dayEventsContainer\n        mwlDroppable\n        (dragEnter)=\"eventDragEnter = eventDragEnter + 1\"\n        (dragLeave)=\"eventDragEnter = eventDragEnter - 1\"\n      >\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events; trackBy: trackByDayEvent\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeSnapGrid]=\"{\n              top: eventSnapSize || hourSegmentHeight,\n              bottom: eventSnapSize || hourSegmentHeight\n            }\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayEventsContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            dragActiveClass=\"cal-drag-active\"\n            [dropData]=\"{ event: dayEvent.event, calendarId: calendarId }\"\n            [dragAxis]=\"{\n              x:\n                !snapDraggedEvents &&\n                dayEvent.event.draggable &&\n                currentResizes.size === 0,\n              y: dayEvent.event.draggable && currentResizes.size === 0\n            }\"\n            [dragSnapGrid]=\"\n              snapDraggedEvents ? { y: eventSnapSize || hourSegmentHeight } : {}\n            \"\n            [validateDrag]=\"validateDrag\"\n            [ghostDragEnabled]=\"!snapDraggedEvents\"\n            (dragStart)=\"dragStarted(event, dayEventsContainer, dayEvent)\"\n            (dragging)=\"dragMove($event)\"\n            (dragEnd)=\"dragEnded(dayEvent, $event)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\"\n          >\n            <div\n              class=\"cal-resize-handle cal-resize-handle-before-start\"\n              *ngIf=\"\n                dayEvent.event?.resizable?.beforeStart &&\n                !dayEvent.startsBeforeDay\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ top: true }\"\n            ></div>\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              [eventActionsTemplate]=\"eventActionsTemplate\"\n              (eventClicked)=\"eventClicked.emit({ event: dayEvent.event })\"\n            >\n            </mwl-calendar-day-view-event>\n            <div\n              class=\"cal-resize-handle cal-resize-handle-after-end\"\n              *ngIf=\"\n                dayEvent.event?.resizable?.afterEnd && !dayEvent.endsAfterDay\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ bottom: true }\"\n            ></div>\n          </div>\n        </div>\n        <div\n          class=\"cal-hour\"\n          *ngFor=\"let hour of hours; trackBy: trackByHour\"\n          [style.minWidth.px]=\"view?.width + 70\"\n        >\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (mwlClick)=\"hourSegmentClicked.emit({ date: segment.date })\"\n            [clickListenerDisabled]=\"hourSegmentClicked.observers.length === 0\"\n            mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            dragActiveClass=\"cal-drag-active\"\n            (drop)=\"eventDropped($event, segment.date, false)\"\n          >\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  `\n            }] }\n];\n/** @nocollapse */\nCalendarDayViewComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: CalendarUtils },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: DateAdapter }\n];\nCalendarDayViewComponent.propDecorators = {\n    viewDate: [{ type: Input }],\n    events: [{ type: Input }],\n    hourSegments: [{ type: Input }],\n    hourSegmentHeight: [{ type: Input }],\n    dayStartHour: [{ type: Input }],\n    dayStartMinute: [{ type: Input }],\n    dayEndHour: [{ type: Input }],\n    dayEndMinute: [{ type: Input }],\n    eventWidth: [{ type: Input }],\n    refresh: [{ type: Input }],\n    locale: [{ type: Input }],\n    eventSnapSize: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    hourSegmentTemplate: [{ type: Input }],\n    eventTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    snapDraggedEvents: [{ type: Input }],\n    eventClicked: [{ type: Output }],\n    hourSegmentClicked: [{ type: Output }],\n    eventTimesChanged: [{ type: Output }],\n    beforeViewRender: [{ type: Output }]\n};\nif (false) {\n    /**\n     * The current view date\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.viewDate;\n    /**\n     * An array of events to display on view\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.events;\n    /**\n     * The number of segments in an hour. Must be <= 6\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.hourSegments;\n    /**\n     * The height in pixels of each hour segment\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.hourSegmentHeight;\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.dayStartHour;\n    /**\n     * The day start minutes. Must be 0-59\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.dayStartMinute;\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.dayEndHour;\n    /**\n     * The day end minutes. Must be 0-59\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.dayEndMinute;\n    /**\n     * The width in pixels of each event on the view\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventWidth;\n    /**\n     * An observable that when emitted on will re-render the current view\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.refresh;\n    /**\n     * The locale used to format dates\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.locale;\n    /**\n     * The grid size to snap resizing and dragging of events to\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventSnapSize;\n    /**\n     * The placement of the event tooltip\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.tooltipPlacement;\n    /**\n     * A custom template to use for the event tooltips\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.tooltipTemplate;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.tooltipAppendToBody;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.tooltipDelay;\n    /**\n     * A custom template to use to replace the hour segment\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.hourSegmentTemplate;\n    /**\n     * A custom template to use for day view events\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventTemplate;\n    /**\n     * A custom template to use for event titles\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventTitleTemplate;\n    /**\n     * A custom template to use for event actions\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventActionsTemplate;\n    /**\n     * Whether to snap events to a grid when dragging\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.snapDraggedEvents;\n    /**\n     * Called when an event title is clicked\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventClicked;\n    /**\n     * Called when an hour segment is clicked\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.hourSegmentClicked;\n    /**\n     * Called when an event is resized or dragged and dropped\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventTimesChanged;\n    /**\n     * An output that will be called before the view is rendered for the current day.\n     * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.beforeViewRender;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.hours;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.view;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.width;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.refreshSubscription;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.currentResizes;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.eventDragEnter;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.calendarId;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.dragAlreadyMoved;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.currentDrag;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.validateDrag;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.validateResize;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.trackByEventId;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.trackByHour;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.trackByHourSegment;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    CalendarDayViewComponent.prototype.trackByDayEvent;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarDayViewComponent.prototype.cdr;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarDayViewComponent.prototype.utils;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CalendarDayViewComponent.prototype.dateAdapter;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarDayViewHourSegmentComponent {\n}\nCalendarDayViewHourSegmentComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-day-view-hour-segment',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-segment=\"segment\"\n      let-locale=\"locale\"\n      let-segmentHeight=\"segmentHeight\"\n    >\n      <div\n        class=\"cal-hour-segment\"\n        [style.height.px]=\"segmentHeight\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\"\n      >\n        <div class=\"cal-time\">\n          {{ segment.displayDate | calendarDate: 'dayViewHour':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale,\n        segmentHeight: segmentHeight\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarDayViewHourSegmentComponent.propDecorators = {\n    segment: [{ type: Input }],\n    segmentHeight: [{ type: Input }],\n    locale: [{ type: Input }],\n    customTemplate: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarDayViewHourSegmentComponent.prototype.segment;\n    /** @type {?} */\n    CalendarDayViewHourSegmentComponent.prototype.segmentHeight;\n    /** @type {?} */\n    CalendarDayViewHourSegmentComponent.prototype.locale;\n    /** @type {?} */\n    CalendarDayViewHourSegmentComponent.prototype.customTemplate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarDayViewEventComponent {\n    constructor() {\n        this.eventClicked = new EventEmitter();\n    }\n}\nCalendarDayViewEventComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-calendar-day-view-event',\n                template: `\n    <ng-template\n      #defaultTemplate\n      let-dayEvent=\"dayEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\"\n      let-tooltipDelay=\"tooltipDelay\"\n    >\n      <div\n        class=\"cal-event\"\n        [ngStyle]=\"{\n          backgroundColor: dayEvent.event.color?.secondary,\n          borderColor: dayEvent.event.color?.primary\n        }\"\n        [mwlCalendarTooltip]=\"\n          dayEvent.event.title | calendarEventTitle: 'dayTooltip':dayEvent.event\n        \"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"dayEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\"\n        [tooltipDelay]=\"tooltipDelay\"\n        (mwlClick)=\"eventClicked.emit()\"\n      >\n        <mwl-calendar-event-actions\n          [event]=\"dayEvent.event\"\n          [customTemplate]=\"eventActionsTemplate\"\n        >\n        </mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"dayEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"day\"\n        >\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        dayEvent: dayEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody,\n        tooltipDelay: tooltipDelay\n      }\"\n    >\n    </ng-template>\n  `\n            }] }\n];\nCalendarDayViewEventComponent.propDecorators = {\n    dayEvent: [{ type: Input }],\n    tooltipPlacement: [{ type: Input }],\n    tooltipAppendToBody: [{ type: Input }],\n    customTemplate: [{ type: Input }],\n    eventTitleTemplate: [{ type: Input }],\n    eventActionsTemplate: [{ type: Input }],\n    tooltipTemplate: [{ type: Input }],\n    tooltipDelay: [{ type: Input }],\n    eventClicked: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.dayEvent;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.tooltipPlacement;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.tooltipAppendToBody;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.customTemplate;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.eventTitleTemplate;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.eventActionsTemplate;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.tooltipTemplate;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.tooltipDelay;\n    /** @type {?} */\n    CalendarDayViewEventComponent.prototype.eventClicked;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CalendarDayModule {\n}\nCalendarDayModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    ResizableModule,\n                    DragAndDropModule,\n                    CalendarCommonModule\n                ],\n                declarations: [\n                    CalendarDayViewComponent,\n                    CalendarDayViewHourSegmentComponent,\n                    CalendarDayViewEventComponent\n                ],\n                exports: [\n                    ResizableModule,\n                    DragAndDropModule,\n                    CalendarDayViewComponent,\n                    CalendarDayViewHourSegmentComponent,\n                    CalendarDayViewEventComponent\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The main module of this library. Example usage:\n *\n * ```typescript\n * import { CalenderModule } from 'angular-calendar';\n *\n * \\@NgModule({\n *   imports: [\n *     CalenderModule.forRoot()\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\nclass CalendarModule {\n    /**\n     * @param {?} dateAdapter\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(dateAdapter, config = {}) {\n        return {\n            ngModule: CalendarModule,\n            providers: [\n                dateAdapter,\n                config.eventTitleFormatter || CalendarEventTitleFormatter,\n                config.dateFormatter || CalendarDateFormatter,\n                config.utils || CalendarUtils\n            ]\n        };\n    }\n}\nCalendarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CalendarCommonModule,\n                    CalendarMonthModule,\n                    CalendarWeekModule,\n                    CalendarDayModule\n                ],\n                exports: [\n                    CalendarCommonModule,\n                    CalendarMonthModule,\n                    CalendarWeekModule,\n                    CalendarDayModule\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CalendarAngularDateFormatter, CalendarCommonModule, CalendarDateFormatter, CalendarDayModule, CalendarDayViewComponent, CalendarEventTimesChangedEventType, CalendarEventTitleFormatter, CalendarModule, CalendarMomentDateFormatter, CalendarMonthModule, CalendarMonthViewComponent, CalendarNativeDateFormatter, CalendarUtils, CalendarView, CalendarWeekModule, CalendarWeekViewComponent, DateAdapter, MOMENT, collapseAnimation, getWeekViewPeriod, CalendarOpenDayEventsComponent as ɵa, CalendarEventActionsComponent as ɵb, CalendarEventTitleComponent as ɵc, CalendarTooltipWindowComponent as ɵd, CalendarTooltipDirective as ɵe, CalendarPreviousViewDirective as ɵf, CalendarNextViewDirective as ɵg, CalendarTodayDirective as ɵh, CalendarDatePipe as ɵi, CalendarEventTitlePipe as ɵj, ClickDirective as ɵk, CalendarMonthCellComponent as ɵl, CalendarMonthViewHeaderComponent as ɵm, CalendarWeekViewHeaderComponent as ɵn, CalendarWeekViewEventComponent as ɵo, CalendarWeekViewHourSegmentComponent as ɵp, CalendarDayViewHourSegmentComponent as ɵq, CalendarDayViewEventComponent as ɵr };\n"]}