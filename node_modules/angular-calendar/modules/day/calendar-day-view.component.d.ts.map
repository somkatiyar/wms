{"version":3,"file":"calendar-day-view.component.d.ts","sources":["/home/skymet/Videos/main/node_modules/angular-calendar/modules/day/calendar-day-view.component.d.ts"],"sourcesContent":["import { OnChanges, EventEmitter, ChangeDetectorRef, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { CalendarEvent, DayView, DayViewHour, DayViewHourSegment, DayViewEvent, ViewPeriod, WeekViewAllDayEvent } from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { DateAdapter } from '../../date-adapters/date-adapter';\nimport { DragEndEvent, DragMoveEvent, ValidateDrag } from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\nexport interface CalendarDayViewBeforeRenderEvent {\n    body: {\n        hourGrid: DayViewHour[];\n        allDayEvents: CalendarEvent[];\n    };\n    period: ViewPeriod;\n}\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n    originalTop: number;\n    originalHeight: number;\n    edge: string;\n}\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\nexport declare class CalendarDayViewComponent implements OnChanges, OnInit, OnDestroy {\n    protected cdr: ChangeDetectorRef;\n    protected utils: CalendarUtils;\n    protected dateAdapter: DateAdapter;\n    /**\n     * The current view date\n     */\n    viewDate: Date;\n    /**\n     * An array of events to display on view\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     */\n    events: CalendarEvent[];\n    /**\n     * The number of segments in an hour. Must be <= 6\n     */\n    hourSegments: number;\n    /**\n     * The height in pixels of each hour segment\n     */\n    hourSegmentHeight: number;\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     */\n    dayStartHour: number;\n    /**\n     * The day start minutes. Must be 0-59\n     */\n    dayStartMinute: number;\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     */\n    dayEndHour: number;\n    /**\n     * The day end minutes. Must be 0-59\n     */\n    dayEndMinute: number;\n    /**\n     * The width in pixels of each event on the view\n     */\n    eventWidth: number;\n    /**\n     * An observable that when emitted on will re-render the current view\n     */\n    refresh: Subject<any>;\n    /**\n     * The locale used to format dates\n     */\n    locale: string;\n    /**\n     * The grid size to snap resizing and dragging of events to\n     */\n    eventSnapSize: number;\n    /**\n     * The placement of the event tooltip\n     */\n    tooltipPlacement: PlacementArray;\n    /**\n     * A custom template to use for the event tooltips\n     */\n    tooltipTemplate: TemplateRef<any>;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     */\n    tooltipAppendToBody: boolean;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     */\n    tooltipDelay: number | null;\n    /**\n     * A custom template to use to replace the hour segment\n     */\n    hourSegmentTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for day view events\n     */\n    eventTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event titles\n     */\n    eventTitleTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event actions\n     */\n    eventActionsTemplate: TemplateRef<any>;\n    /**\n     * Whether to snap events to a grid when dragging\n     */\n    snapDraggedEvents: boolean;\n    /**\n     * Called when an event title is clicked\n     */\n    eventClicked: EventEmitter<{\n        event: CalendarEvent<any>;\n    }>;\n    /**\n     * Called when an hour segment is clicked\n     */\n    hourSegmentClicked: EventEmitter<{\n        date: Date;\n    }>;\n    /**\n     * Called when an event is resized or dragged and dropped\n     */\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent<any>>;\n    /**\n     * An output that will be called before the view is rendered for the current day.\n     * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n     */\n    beforeViewRender: EventEmitter<CalendarDayViewBeforeRenderEvent>;\n    /**\n     * @hidden\n     */\n    hours: DayViewHour[];\n    /**\n     * @hidden\n     */\n    view: DayView;\n    /**\n     * @hidden\n     */\n    width: number;\n    /**\n     * @hidden\n     */\n    refreshSubscription: Subscription;\n    /**\n     * @hidden\n     */\n    currentResizes: Map<DayViewEvent, DayViewEventResize>;\n    /**\n     * @hidden\n     */\n    eventDragEnter: number;\n    /**\n     * @hidden\n     */\n    calendarId: symbol;\n    /**\n     * @hidden\n     */\n    dragAlreadyMoved: boolean;\n    /**\n     * @hidden\n     */\n    currentDrag?: {\n        dayEvent: DayViewEvent;\n        originalTop: number;\n        originalLeft: number;\n    };\n    /**\n     * @hidden\n     */\n    validateDrag: ValidateDrag;\n    /**\n     * @hidden\n     */\n    validateResize: (args: any) => boolean;\n    /**\n     * @hidden\n     */\n    trackByEventId: (index: number, event: CalendarEvent<any>) => string | number | CalendarEvent<any>;\n    /**\n     * @hidden\n     */\n    trackByHour: (index: number, hour: DayViewHour) => string;\n    /**\n     * @hidden\n     */\n    trackByHourSegment: (index: number, segment: DayViewHourSegment) => string;\n    /**\n     * @hidden\n     */\n    trackByDayEvent: (index: number, weekEvent: WeekViewAllDayEvent | DayViewEvent) => string | number | CalendarEvent<any>;\n    /**\n     * @hidden\n     */\n    constructor(cdr: ChangeDetectorRef, utils: CalendarUtils, locale: string, dateAdapter: DateAdapter);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    eventDropped(dropEvent: {\n        dropData?: {\n            event?: CalendarEvent;\n            calendarId?: symbol;\n        };\n    }, date: Date, allDay: boolean): void;\n    resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayEventsContainer: HTMLElement): void;\n    resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void;\n    resizeEnded(dayEvent: DayViewEvent): void;\n    dragStarted(event: HTMLElement, dayEventsContainer: HTMLElement, dayEvent: DayViewEvent): void;\n    /**\n     * @hidden\n     */\n    dragMove(coords: DragMoveEvent): void;\n    dragEnded(dayEvent: DayViewEvent, dragEndEvent: DragEndEvent): void;\n    protected refreshHourGrid(): void;\n    protected refreshView(): void;\n    protected refreshAll(): void;\n    protected emitBeforeViewRender(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OA;"}