{"version":3,"file":"esm.js","sources":["/home/skymet/Videos/main/node_modules/@swimlane/ngx-charts/release/esm.js"],"sourcesContent":["import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, Input, Component, ElementRef, ViewEncapsulation, HostListener, ViewChild, HostBinding, Renderer2, Directive, Output, EventEmitter, ViewContainerRef, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, TemplateRef, ContentChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { rgb } from 'd3-color';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { range, min, max } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile, scaleTime, scalePoint } from 'd3-scale';\nimport { brushX } from 'd3-brush';\nimport { select, event } from 'd3-selection';\nimport { curveLinear, area, line, curveCardinalClosed, lineRadial, arc, pie } from 'd3-shape';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation, forceX, forceY } from 'd3-force';\nimport { interpolate } from 'd3-interpolate';\nimport { format } from 'd3-format';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof (SVGElement) !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\nngxChartsPolyfills();\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[PlacementTypes[\"top\"] = 'top'] = \"top\";\n    PlacementTypes[PlacementTypes[\"bottom\"] = 'bottom'] = \"bottom\";\n    PlacementTypes[PlacementTypes[\"left\"] = 'left'] = \"left\";\n    PlacementTypes[PlacementTypes[\"right\"] = 'right'] = \"right\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nvar caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === 'top') {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === 'bottom') {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === 'center') {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === 'left') {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === 'right') {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === 'center') {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n * @class PositionHelper\n */\nvar PositionHelper = /** @class */ (function () {\n    function PositionHelper() {\n    }\n    /**\n     * Calculate vertical alignment position\n     *\n     * @static\n     * @param {any} elDimensions\n     * @param {any} popoverDimensions\n     * @param {any} alignment\n     * @returns {number}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.calculateVerticalAlignment = function (elDimensions, popoverDimensions, alignment) {\n        var result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    };\n    /**\n     * Calculate vertical caret position\n     *\n     * @static\n     * @param {any} elDimensions\n     * @param {any} popoverDimensions\n     * @param {any} caretDimensions\n     * @param {any} alignment\n     * @returns {number}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.calculateVerticalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {\n        var result;\n        if (alignment === 'top') {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === 'bottom') {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === 'center') {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        var popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += (popoverPosition + popoverDimensions.height - window.innerHeight);\n        }\n        return result;\n    };\n    /**\n     * Calculate horz alignment position\n     *\n     * @static\n     * @param {any} elDimensions\n     * @param {any} popoverDimensions\n     * @param {any} alignment\n     * @returns {number}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.calculateHorizontalAlignment = function (elDimensions, popoverDimensions, alignment) {\n        var result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    };\n    /**\n     * Calculate horz caret position\n     *\n     * @static\n     * @param {any} elDimensions\n     * @param {any} popoverDimensions\n     * @param {any} caretDimensions\n     * @param {any} alignment\n     * @returns {number}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.calculateHorizontalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {\n        var result;\n        if (alignment === 'left') {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === 'right') {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === 'center') {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += (popoverPosition + popoverDimensions.width - window.innerWidth);\n        }\n        return result;\n    };\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @static\n     * @param {any} elDimensions\n     * @param {any} popoverDimensions\n     * @param {any} placement\n     * @param {any} spacing\n     * @returns {boolean}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.shouldFlip = function (elDimensions, popoverDimensions, placement, spacing) {\n        var flip = false;\n        if (placement === 'right') {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === 'left') {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === 'top') {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === 'bottom') {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    };\n    /**\n     * Position caret\n     *\n     * @static\n     * @param {any} placement\n     * @param {any} elmDim\n     * @param {any} hostDim\n     * @param {any} caretDimensions\n     * @param {any} alignment\n     * @returns {*}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.positionCaret = function (placement, elmDim, hostDim, caretDimensions, alignment) {\n        var top = 0;\n        var left = 0;\n        if (placement === PlacementTypes.right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top: top, left: left };\n    };\n    /**\n     * Position content\n     *\n     * @static\n     * @param {any} placement\n     * @param {any} elmDim\n     * @param {any} hostDim\n     * @param {any} spacing\n     * @param {any} alignment\n     * @returns {*}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.positionContent = function (placement, elmDim, hostDim, spacing, alignment) {\n        var top = 0;\n        var left = 0;\n        if (placement === PlacementTypes.right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top: top, left: left };\n    };\n    /**\n     * Determine placement based on flip\n     *\n     * @static\n     * @param {any} placement\n     * @param {any} elmDim\n     * @param {any} hostDim\n     * @param {any} spacing\n     * @returns {*}\n     *\n     * @memberOf PositionHelper\n     */\n    PositionHelper.determinePlacement = function (placement, elmDim, hostDim, spacing) {\n        var shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.right) {\n                return PlacementTypes.left;\n            }\n            else if (placement === PlacementTypes.left) {\n                return PlacementTypes.right;\n            }\n            else if (placement === PlacementTypes.top) {\n                return PlacementTypes.bottom;\n            }\n            else if (placement === PlacementTypes.bottom) {\n                return PlacementTypes.top;\n            }\n        }\n        return placement;\n    };\n    return PositionHelper;\n}());\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[StyleTypes[\"popover\"] = 'popover'] = \"popover\";\n    StyleTypes[StyleTypes[\"tooltip\"] = 'tooltip'] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar AlignmentTypes;\n(function (AlignmentTypes) {\n    AlignmentTypes[AlignmentTypes[\"left\"] = 'left'] = \"left\";\n    AlignmentTypes[AlignmentTypes[\"center\"] = 'center'] = \"center\";\n    AlignmentTypes[AlignmentTypes[\"right\"] = 'right'] = \"right\";\n})(AlignmentTypes || (AlignmentTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n * @class InjectionService\n */\nvar InjectionService = /** @class */ (function () {\n    function InjectionService(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    InjectionService_1 = InjectionService;\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    InjectionService.setGlobalRootViewContainer = function (container) {\n        InjectionService_1.globalRootViewContainer = container;\n    };\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @returns {ComponentRef<any>}\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.getRootViewContainer = function () {\n        var rootComponents = this.applicationRef.components;\n        // fix cannot read length of undefined\n        if (rootComponents) {\n            if (rootComponents.length)\n                return rootComponents[0];\n        }\n        if (this._container)\n            return this._container;\n        if (InjectionService_1.globalRootViewContainer)\n            return InjectionService_1.globalRootViewContainer;\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');\n    };\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param {any} container\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.setRootViewContainer = function (container) {\n        this._container = container;\n    };\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param {ComponentRef<any>} componentRef\n     * @returns {HTMLElement}\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.getComponentRootNode = function (componentRef) {\n        // the top most component root node has no `hostView`\n        if (!componentRef.hostView)\n            return componentRef.element.nativeElement;\n        return componentRef.hostView.rootNodes[0];\n    };\n    /**\n     * Gets the root component container html element.\n     *\n     * @returns {HTMLElement}\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.getRootViewContainerNode = function () {\n        return this.getComponentRootNode(this.getRootViewContainer());\n    };\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param {ComponentRef<any>} component\n     * @param {*} options\n     * @returns {ComponentRef<any>}\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.projectComponentBindings = function (component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                var bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (var _i = 0, bindingKeys_1 = bindingKeys; _i < bindingKeys_1.length; _i++) {\n                    var bindingName = bindingKeys_1[_i];\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                var eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (var _a = 0, eventKeys_1 = eventKeys; _a < eventKeys_1.length; _a++) {\n                    var eventName = eventKeys_1[_a];\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    };\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @template T\n     * @param {Type<T>} componentClass\n     * @param {*} [options={}]\n     * @param {Element} [location=this.getRootViewContainerNode()]\n     * @returns {ComponentRef<any>}\n     *\n     * @memberOf InjectionService\n     */\n    InjectionService.prototype.appendComponent = function (componentClass, bindings, location) {\n        if (bindings === void 0) { bindings = {}; }\n        if (location === void 0) { location = this.getRootViewContainerNode(); }\n        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);\n        var componentRef = componentFactory.create(this.injector);\n        var appRef = this.applicationRef;\n        var componentRootNode = this.getComponentRootNode(componentRef);\n        // project the options passed to the component instance\n        this.projectComponentBindings(componentRef, bindings);\n        appRef.attachView(componentRef.hostView);\n        componentRef.onDestroy(function () {\n            appRef.detachView(componentRef.hostView);\n        });\n        // use the renderer to append the element for univseral support\n        var renderer = componentRef.instance.renderer;\n        renderer.appendChild(location, componentRootNode);\n        return componentRef;\n    };\n    var InjectionService_1, _a, _b, _c;\n    InjectionService.globalRootViewContainer = null;\n    InjectionService = InjectionService_1 = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ApplicationRef !== \"undefined\" && ApplicationRef) === \"function\" ? _a : Object, typeof (_b = typeof ComponentFactoryResolver !== \"undefined\" && ComponentFactoryResolver) === \"function\" ? _b : Object, typeof (_c = typeof Injector !== \"undefined\" && Injector) === \"function\" ? _c : Object])\n    ], InjectionService);\n    return InjectionService;\n}());\n\nvar InjectionRegistery = /** @class */ (function () {\n    function InjectionRegistery(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    InjectionRegistery.prototype.getByType = function (type) {\n        if (type === void 0) { type = this.type; }\n        return this.components.get(type);\n    };\n    InjectionRegistery.prototype.create = function (bindings) {\n        return this.createByType(this.type, bindings);\n    };\n    InjectionRegistery.prototype.createByType = function (type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        var component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    };\n    InjectionRegistery.prototype.destroy = function (instance) {\n        var compsByType = this.components.get(instance.componentType);\n        if (compsByType) {\n            var idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                var component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    };\n    InjectionRegistery.prototype.destroyAll = function () {\n        this.destroyByType(this.type);\n    };\n    InjectionRegistery.prototype.destroyByType = function (type) {\n        var comps = this.components.get(type);\n        if (comps) {\n            for (var _i = 0, comps_1 = comps; _i < comps_1.length; _i++) {\n                var comp = comps_1[_i];\n                this.destroy(comp);\n            }\n        }\n    };\n    InjectionRegistery.prototype.assignDefaults = function (bindings) {\n        var _a = this.defaults, inputs = _a.inputs, outputs = _a.outputs;\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = Object.assign(inputs, bindings.inputs);\n        }\n        if (outputs) {\n            bindings.outputs = Object.assign(outputs, bindings.outputs);\n        }\n        return bindings;\n    };\n    InjectionRegistery.prototype.injectComponent = function (type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    };\n    InjectionRegistery.prototype.register = function (type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        var types = this.components.get(type);\n        types.push(component);\n    };\n    return InjectionRegistery;\n}());\n\n/**\n * Throttle a function\n *\n * @export\n * @param {*}      func\n * @param {number} wait\n * @param {*}      [options]\n * @returns\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    var context;\n    var args;\n    var result;\n    var timeout = null;\n    var previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        var now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n *\n * @export\n * @param {number} duration\n * @param {*} [options]\n * @returns\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar TooltipContentComponent = /** @class */ (function () {\n    function TooltipContentComponent(element, renderer) {\n        this.element = element;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(TooltipContentComponent.prototype, \"cssClasses\", {\n        get: function () {\n            var clz = 'ngx-charts-tooltip-content';\n            clz += \" position-\" + this.placement;\n            clz += \" type-\" + this.type;\n            clz += \" \" + this.cssClass;\n            return clz;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TooltipContentComponent.prototype.ngAfterViewInit = function () {\n        setTimeout(this.position.bind(this));\n    };\n    TooltipContentComponent.prototype.position = function () {\n        var _this = this;\n        var nativeElm = this.element.nativeElement;\n        var hostDim = this.host.nativeElement.getBoundingClientRect();\n        if (!hostDim.height && !hostDim.width)\n            return;\n        var elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        setTimeout(function () { return _this.renderer.addClass(nativeElm, 'animate'); }, 1);\n    };\n    TooltipContentComponent.prototype.positionContent = function (nativeElm, hostDim, elmDim) {\n        var _a = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment), top = _a.top, left = _a.left;\n        this.renderer.setStyle(nativeElm, 'top', top + \"px\");\n        this.renderer.setStyle(nativeElm, 'left', left + \"px\");\n    };\n    TooltipContentComponent.prototype.positionCaret = function (hostDim, elmDim) {\n        var caretElm = this.caretElm.nativeElement;\n        var caretDimensions = caretElm.getBoundingClientRect();\n        var _a = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment), top = _a.top, left = _a.left;\n        this.renderer.setStyle(caretElm, 'top', top + \"px\");\n        this.renderer.setStyle(caretElm, 'left', left + \"px\");\n    };\n    TooltipContentComponent.prototype.checkFlip = function (hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    };\n    TooltipContentComponent.prototype.onWindowResize = function () {\n        this.position();\n    };\n    var _a, _b, _c, _d, _e;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipContentComponent.prototype, \"host\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipContentComponent.prototype, \"showCaret\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof StyleTypes !== \"undefined\" && StyleTypes) === \"function\" ? _a : Object)\n    ], TooltipContentComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_b = typeof PlacementTypes !== \"undefined\" && PlacementTypes) === \"function\" ? _b : Object)\n    ], TooltipContentComponent.prototype, \"placement\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_c = typeof AlignmentTypes !== \"undefined\" && AlignmentTypes) === \"function\" ? _c : Object)\n    ], TooltipContentComponent.prototype, \"alignment\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TooltipContentComponent.prototype, \"spacing\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TooltipContentComponent.prototype, \"cssClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TooltipContentComponent.prototype, \"title\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipContentComponent.prototype, \"template\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipContentComponent.prototype, \"context\", void 0);\n    __decorate([\n        ViewChild('caretElm', { static: false }),\n        __metadata(\"design:type\", Object)\n    ], TooltipContentComponent.prototype, \"caretElm\", void 0);\n    __decorate([\n        HostBinding('class'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [])\n    ], TooltipContentComponent.prototype, \"cssClasses\", null);\n    __decorate([\n        HostListener('window:resize'),\n        throttleable(100),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipContentComponent.prototype, \"onWindowResize\", null);\n    TooltipContentComponent = __decorate([\n        Component({\n            selector: 'ngx-tooltip-content',\n            template: \"\\n    <div>\\n      <span #caretElm [hidden]=\\\"!showCaret\\\" class=\\\"tooltip-caret position-{{ this.placement }}\\\"> </span>\\n      <div class=\\\"tooltip-content\\\">\\n        <span *ngIf=\\\"!title\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{ model: context }\\\"> </ng-template>\\n        </span>\\n        <span *ngIf=\\\"title\\\" [innerHTML]=\\\"title\\\"> </span>\\n      </div>\\n    </div>\\n  \",\n            encapsulation: ViewEncapsulation.None,\n            styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px 5px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate3d(10px,0,0)}.ngx-charts-tooltip-content.position-left{transform:translate3d(-10px,0,0)}.ngx-charts-tooltip-content.position-top{transform:translate3d(0,-10px,0)}.ngx-charts-tooltip-content.position-bottom{transform:translate3d(0,10px,0)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate3d(0,0,0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\"]\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_d = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _d : Object, typeof (_e = typeof Renderer2 !== \"undefined\" && Renderer2) === \"function\" ? _e : Object])\n    ], TooltipContentComponent);\n    return TooltipContentComponent;\n}());\n\nvar TooltipService = /** @class */ (function (_super) {\n    __extends(TooltipService, _super);\n    function TooltipService(injectionService) {\n        var _this = _super.call(this, injectionService) || this;\n        _this.injectionService = injectionService;\n        _this.type = TooltipContentComponent;\n        return _this;\n    }\n    var _a;\n    TooltipService = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof InjectionService !== \"undefined\" && InjectionService) === \"function\" ? _a : Object])\n    ], TooltipService);\n    return TooltipService;\n}(InjectionRegistery));\n\nvar TooltipDirective = /** @class */ (function () {\n    function TooltipDirective(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipTitle = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.top;\n        this.tooltipAlignment = AlignmentTypes.center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    Object.defineProperty(TooltipDirective.prototype, \"listensForFocus\", {\n        get: function () {\n            return this.tooltipShowEvent === ShowTypes.all ||\n                this.tooltipShowEvent === ShowTypes.focus;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"listensForHover\", {\n        get: function () {\n            return this.tooltipShowEvent === ShowTypes.all ||\n                this.tooltipShowEvent === ShowTypes.mouseover;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TooltipDirective.prototype.ngOnDestroy = function () {\n        this.hideTooltip(true);\n    };\n    TooltipDirective.prototype.onFocus = function () {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    };\n    TooltipDirective.prototype.onBlur = function () {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    };\n    TooltipDirective.prototype.onMouseEnter = function () {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    };\n    TooltipDirective.prototype.onMouseLeave = function (target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                var contentDom = this.component.instance.element.nativeElement;\n                var contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    };\n    TooltipDirective.prototype.onMouseClick = function () {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    };\n    TooltipDirective.prototype.showTooltip = function (immediate) {\n        var _this = this;\n        if (this.component || this.tooltipDisabled)\n            return;\n        var time = immediate ? 0 : this.tooltipShowTimeout;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(function () {\n            _this.tooltipService.destroyAll();\n            var options = _this.createBoundOptions();\n            _this.component = _this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(function () {\n                if (_this.component) {\n                    _this.addHideListeners(_this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            _this.show.emit(true);\n        }, time);\n    };\n    TooltipDirective.prototype.addHideListeners = function (tooltip) {\n        var _this = this;\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', function () {\n            clearTimeout(_this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', function () {\n                _this.hideTooltip(_this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen(document, 'click', function (event$$1) {\n                var contains = tooltip.contains(event$$1.target);\n                if (!contains)\n                    _this.hideTooltip();\n            });\n        }\n    };\n    TooltipDirective.prototype.hideTooltip = function (immediate) {\n        var _this = this;\n        if (immediate === void 0) { immediate = false; }\n        if (!this.component)\n            return;\n        var destroyFn = function () {\n            // remove events\n            if (_this.mouseLeaveContentEvent)\n                _this.mouseLeaveContentEvent();\n            if (_this.mouseEnterContentEvent)\n                _this.mouseEnterContentEvent();\n            if (_this.documentClickEvent)\n                _this.documentClickEvent();\n            // emit events\n            _this.hide.emit(true);\n            // destroy component\n            _this.tooltipService.destroy(_this.component);\n            _this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    };\n    TooltipDirective.prototype.createBoundOptions = function () {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    };\n    var _a, _b, _c, _d, _e, _f, _g;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TooltipDirective.prototype, \"tooltipCssClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TooltipDirective.prototype, \"tooltipTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipAppendToBody\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TooltipDirective.prototype, \"tooltipSpacing\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipShowCaret\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof PlacementTypes !== \"undefined\" && PlacementTypes) === \"function\" ? _a : Object)\n    ], TooltipDirective.prototype, \"tooltipPlacement\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_b = typeof AlignmentTypes !== \"undefined\" && AlignmentTypes) === \"function\" ? _b : Object)\n    ], TooltipDirective.prototype, \"tooltipAlignment\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_c = typeof StyleTypes !== \"undefined\" && StyleTypes) === \"function\" ? _c : Object)\n    ], TooltipDirective.prototype, \"tooltipType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipCloseOnClickOutside\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipCloseOnMouseLeave\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TooltipDirective.prototype, \"tooltipHideTimeout\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TooltipDirective.prototype, \"tooltipShowTimeout\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipDirective.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_d = typeof ShowTypes !== \"undefined\" && ShowTypes) === \"function\" ? _d : Object)\n    ], TooltipDirective.prototype, \"tooltipShowEvent\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipDirective.prototype, \"tooltipContext\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipDirective.prototype, \"tooltipImmediateExit\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TooltipDirective.prototype, \"show\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TooltipDirective.prototype, \"hide\", void 0);\n    __decorate([\n        HostListener('focusin'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipDirective.prototype, \"onFocus\", null);\n    __decorate([\n        HostListener('blur'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipDirective.prototype, \"onBlur\", null);\n    __decorate([\n        HostListener('mouseenter'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipDirective.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave', ['$event.target']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipDirective.prototype, \"onMouseLeave\", null);\n    __decorate([\n        HostListener('click'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TooltipDirective.prototype, \"onMouseClick\", null);\n    TooltipDirective = __decorate([\n        Directive({ selector: '[ngx-tooltip]' }),\n        __metadata(\"design:paramtypes\", [typeof (_e = typeof TooltipService !== \"undefined\" && TooltipService) === \"function\" ? _e : Object, typeof (_f = typeof ViewContainerRef !== \"undefined\" && ViewContainerRef) === \"function\" ? _f : Object, typeof (_g = typeof Renderer2 !== \"undefined\" && Renderer2) === \"function\" ? _g : Object])\n    ], TooltipDirective);\n    return TooltipDirective;\n}());\n\nvar TooltipModule = /** @class */ (function () {\n    function TooltipModule() {\n    }\n    TooltipModule = __decorate([\n        NgModule({\n            declarations: [TooltipContentComponent, TooltipDirective],\n            providers: [InjectionService, TooltipService],\n            exports: [TooltipContentComponent, TooltipDirective],\n            imports: [CommonModule],\n            entryComponents: [TooltipContentComponent]\n        })\n    ], TooltipModule);\n    return TooltipModule;\n}());\n\nvar ChartComponent = /** @class */ (function () {\n    function ChartComponent(vcr, tooltipService) {\n        this.vcr = vcr;\n        this.tooltipService = tooltipService;\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.tooltipService.injectionService.setRootViewContainer(this.vcr);\n    }\n    ChartComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    ChartComponent.prototype.update = function () {\n        var legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === 'right') {\n                if (this.legendType === 'scaleLegend') {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        var chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns / 12.0));\n        this.legendWidth = (!this.legendOptions || this.legendOptions.position === 'right')\n            ? Math.floor((this.view[0] * legendColumns / 12.0))\n            : this.chartWidth;\n    };\n    ChartComponent.prototype.getLegendType = function () {\n        if (this.legendOptions.scaleType === 'linear') {\n            return 'scaleLegend';\n        }\n        else {\n            return 'legend';\n        }\n    };\n    var _a, _b, _c, _d, _e;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"view\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"showLegend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"legendOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"legendData\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"legendType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ChartComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], ChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ChartComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], ChartComponent.prototype, \"legendLabelClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], ChartComponent.prototype, \"legendLabelActivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], ChartComponent.prototype, \"legendLabelDeactivate\", void 0);\n    ChartComponent = __decorate([\n        Component({\n            providers: [TooltipService],\n            selector: 'ngx-charts-chart',\n            template: \"\\n    <div\\n      class=\\\"ngx-charts-outer\\\"\\n      [style.width.px]=\\\"view[0]\\\"\\n      [@animationState]=\\\"'active'\\\"\\n      [@.disabled]=\\\"!animations\\\">\\n      <svg\\n        class=\\\"ngx-charts\\\"\\n        [attr.width]=\\\"chartWidth\\\"\\n        [attr.height]=\\\"view[1]\\\">\\n        <ng-content></ng-content>\\n      </svg>\\n      <ngx-charts-scale-legend\\n        *ngIf=\\\"showLegend && legendType === 'scaleLegend'\\\"\\n        class=\\\"chart-legend\\\"\\n        [horizontal]=\\\"legendOptions && legendOptions.position === 'below'\\\"\\n        [valueRange]=\\\"legendOptions.domain\\\"\\n        [colors]=\\\"legendOptions.colors\\\"\\n        [height]=\\\"view[1]\\\"\\n        [width]=\\\"legendWidth\\\">\\n      </ngx-charts-scale-legend>\\n      <ngx-charts-legend\\n        *ngIf=\\\"showLegend && legendType === 'legend'\\\"\\n        class=\\\"chart-legend\\\"\\n        [horizontal]=\\\"legendOptions && legendOptions.position === 'below'\\\"\\n        [data]=\\\"legendOptions.domain\\\"\\n        [title]=\\\"legendOptions.title\\\"\\n        [colors]=\\\"legendOptions.colors\\\"\\n        [height]=\\\"view[1]\\\"\\n        [width]=\\\"legendWidth\\\"\\n        [activeEntries]=\\\"activeEntries\\\"\\n        (labelClick)=\\\"legendLabelClick.emit($event)\\\"\\n        (labelActivate)=\\\"legendLabelActivate.emit($event)\\\"\\n        (labelDeactivate)=\\\"legendLabelDeactivate.emit($event)\\\">\\n      </ngx-charts-legend>\\n    </div>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':enter', [\n                        style({ opacity: 0 }),\n                        animate('500ms 100ms', style({ opacity: 1 }))\n                    ])\n                ])\n            ]\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_d = typeof ViewContainerRef !== \"undefined\" && ViewContainerRef) === \"function\" ? _d : Object, typeof (_e = typeof TooltipService !== \"undefined\" && TooltipService) === \"function\" ? _e : Object])\n    ], ChartComponent);\n    return ChartComponent;\n}());\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n * @param {*} label\n * @returns {string}\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n * @param {*} label\n * @returns {string}\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, function (match) {\n        return {\n            '&': '&amp;',\n            '\\'': '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;',\n        }[match];\n    });\n}\n\nvar LegendComponent = /** @class */ (function () {\n    function LegendComponent(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    LegendComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    LegendComponent.prototype.update = function () {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    };\n    LegendComponent.prototype.getLegendEntries = function () {\n        var items = [];\n        var _loop_1 = function (label) {\n            var formattedLabel = formatLabel(label);\n            var idx = items.findIndex(function (i) {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label: label,\n                    formattedLabel: formattedLabel,\n                    color: this_1.colors.getColor(label)\n                });\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {\n            var label = _a[_i];\n            _loop_1(label);\n        }\n        return items;\n    };\n    LegendComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    };\n    LegendComponent.prototype.activate = function (item) {\n        this.labelActivate.emit(item);\n    };\n    LegendComponent.prototype.deactivate = function (item) {\n        this.labelDeactivate.emit(item);\n    };\n    LegendComponent.prototype.trackBy = function (index, item) {\n        return item.label;\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"title\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendComponent.prototype, \"horizontal\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], LegendComponent.prototype, \"labelClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], LegendComponent.prototype, \"labelActivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], LegendComponent.prototype, \"labelDeactivate\", void 0);\n    LegendComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-legend',\n            template: \"\\n    <div [style.width.px]=\\\"width\\\">\\n      <header class=\\\"legend-title\\\" *ngIf=\\\"title?.length > 0\\\">\\n        <span class=\\\"legend-title-text\\\">{{title}}</span>\\n      </header>\\n      <div class=\\\"legend-wrap\\\">\\n        <ul class=\\\"legend-labels\\\"\\n            [class.horizontal-legend]=\\\"horizontal\\\"\\n          [style.max-height.px]=\\\"height - 45\\\">\\n          <li\\n            *ngFor=\\\"let entry of legendEntries; trackBy: trackBy\\\"\\n            class=\\\"legend-label\\\">\\n            <ngx-charts-legend-entry\\n              [label]=\\\"entry.label\\\"\\n              [formattedLabel]=\\\"entry.formattedLabel\\\"\\n              [color]=\\\"entry.color\\\"\\n              [isActive]=\\\"isActive(entry)\\\"\\n              (select)=\\\"labelClick.emit($event)\\\"\\n              (activate)=\\\"activate($event)\\\"\\n              (deactivate)=\\\"deactivate($event)\\\">\\n            </ngx-charts-legend-entry>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  \",\n            styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend li,.chart-legend ul{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;-webkit-transition:.2s;-moz-transition:.2s;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_d = typeof ChangeDetectorRef !== \"undefined\" && ChangeDetectorRef) === \"function\" ? _d : Object])\n    ], LegendComponent);\n    return LegendComponent;\n}());\n\nvar ScaleLegendComponent = /** @class */ (function () {\n    function ScaleLegendComponent(sanitizer) {\n        this.sanitizer = sanitizer;\n        this.horizontal = false;\n    }\n    ScaleLegendComponent.prototype.ngOnChanges = function (changes) {\n        var gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        var direction = (this.horizontal) ? 'right' : 'bottom';\n        this.gradient = this.sanitizer.bypassSecurityTrustStyle(\"linear-gradient(to \" + direction + \", \" + gradientValues + \")\");\n    };\n    ScaleLegendComponent.prototype.gradientString = function (colors, splits) {\n        splits.push(1);\n        var pairs = [];\n        colors.reverse().forEach(function (c, i) {\n            pairs.push(c + \" \" + Math.round(splits[i] * 100) + \"%\");\n        });\n        return pairs.join(', ');\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ScaleLegendComponent.prototype, \"valueRange\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ScaleLegendComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ScaleLegendComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ScaleLegendComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ScaleLegendComponent.prototype, \"horizontal\", void 0);\n    ScaleLegendComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-scale-legend',\n            template: \"\\n    <div\\n      class=\\\"scale-legend\\\"\\n      [class.horizontal-legend]=\\\"horizontal\\\"\\n      [style.height.px]=\\\"horizontal ? undefined : height\\\"\\n      [style.width.px]=\\\"width\\\">\\n      <div class=\\\"scale-legend-label\\\">\\n        <span>{{ valueRange[1].toLocaleString() }}</span>\\n      </div>\\n      <div\\n        class=\\\"scale-legend-wrap\\\"\\n        [style.background]=\\\"gradient\\\">\\n      </div>\\n      <div class=\\\"scale-legend-label\\\">\\n        <span>{{ valueRange[0].toLocaleString() }}</span>\\n      </div>\\n    </div>\\n  \",\n            styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof DomSanitizer !== \"undefined\" && DomSanitizer) === \"function\" ? _a : Object])\n    ], ScaleLegendComponent);\n    return ScaleLegendComponent;\n}());\n\nvar LegendEntryComponent = /** @class */ (function () {\n    function LegendEntryComponent() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    Object.defineProperty(LegendEntryComponent.prototype, \"trimmedLabel\", {\n        get: function () {\n            return this.formattedLabel || '(empty)';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LegendEntryComponent.prototype.onMouseEnter = function () {\n        this.activate.emit({ name: this.label });\n    };\n    LegendEntryComponent.prototype.onMouseLeave = function () {\n        this.deactivate.emit({ name: this.label });\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LegendEntryComponent.prototype, \"color\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LegendEntryComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LegendEntryComponent.prototype, \"formattedLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LegendEntryComponent.prototype, \"isActive\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], LegendEntryComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], LegendEntryComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], LegendEntryComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_d = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _d : Object)\n    ], LegendEntryComponent.prototype, \"toggle\", void 0);\n    __decorate([\n        HostListener('mouseenter'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], LegendEntryComponent.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], LegendEntryComponent.prototype, \"onMouseLeave\", null);\n    LegendEntryComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-legend-entry',\n            template: \"\\n    <span \\n      [title]=\\\"formattedLabel\\\"\\n      tabindex=\\\"-1\\\"\\n      [class.active]=\\\"isActive\\\"\\n      (click)=\\\"select.emit(formattedLabel)\\\">\\n      <span\\n        class=\\\"legend-label-color\\\"\\n        [style.background-color]=\\\"color\\\"\\n        (click)=\\\"toggle.emit(formattedLabel)\\\">\\n      </span>\\n      <span class=\\\"legend-label-text\\\">\\n        {{trimmedLabel}}\\n      </span>\\n    </span>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], LegendEntryComponent);\n    return LegendEntryComponent;\n}());\n\nfunction trimLabel(s, max$$1) {\n    if (max$$1 === void 0) { max$$1 = 16; }\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max$$1) {\n        return s;\n    }\n    else {\n        return s.slice(0, max$$1) + \"...\";\n    }\n}\n\nvar AdvancedLegendComponent = /** @class */ (function () {\n    function AdvancedLegendComponent() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = function (label) { return label; };\n        this.percentageFormatting = function (percentage) { return percentage; };\n        this.defaultValueFormatting = function (value) { return value.toLocaleString(); };\n    }\n    AdvancedLegendComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    AdvancedLegendComponent.prototype.getTotal = function () {\n        return this.data.map(function (d) { return d.value; }).reduce(function (sum, d) { return sum + d; }, 0);\n    };\n    AdvancedLegendComponent.prototype.update = function () {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    };\n    AdvancedLegendComponent.prototype.getLegendItems = function () {\n        var _this = this;\n        return this.data.map(function (d) {\n            var label = formatLabel(d.name);\n            var value = d.value;\n            var color = _this.colors.getColor(label);\n            var percentage = _this.total > 0 ? (value / _this.total) * 100 : 0;\n            var formattedLabel = typeof _this.labelFormatting === 'function' ? _this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value: value,\n                color: color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: _this.percentageFormatting ? _this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    };\n    AdvancedLegendComponent.prototype.trackBy = function (item) {\n        return item.formattedLabel;\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AdvancedLegendComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AdvancedLegendComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AdvancedLegendComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AdvancedLegendComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AdvancedLegendComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], AdvancedLegendComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], AdvancedLegendComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], AdvancedLegendComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedLegendComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedLegendComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedLegendComponent.prototype, \"percentageFormatting\", void 0);\n    AdvancedLegendComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-advanced-legend',\n            template: \"\\n    <div class=\\\"advanced-pie-legend\\\" [style.width.px]=\\\"width\\\">\\n      <div\\n        *ngIf=\\\"animations\\\"\\n        class=\\\"total-value\\\"\\n        ngx-charts-count-up\\n        [countTo]=\\\"roundedTotal\\\"\\n        [valueFormatting]=\\\"valueFormatting\\\"\\n      ></div>\\n      <div class=\\\"total-value\\\" *ngIf=\\\"!animations\\\">\\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\\n      </div>\\n      <div class=\\\"total-label\\\">\\n        {{ label }}\\n      </div>\\n      <div class=\\\"legend-items-container\\\">\\n        <div class=\\\"legend-items\\\">\\n          <div\\n            *ngFor=\\\"let legendItem of legendItems; trackBy: trackBy\\\"\\n            tabindex=\\\"-1\\\"\\n            class=\\\"legend-item\\\"\\n            (mouseenter)=\\\"activate.emit(legendItem.data)\\\"\\n            (mouseleave)=\\\"deactivate.emit(legendItem.data)\\\"\\n            (click)=\\\"select.emit(legendItem.data)\\\"\\n          >\\n            <div class=\\\"item-color\\\" [style.border-left-color]=\\\"legendItem.color\\\"></div>\\n            <div\\n              *ngIf=\\\"animations\\\"\\n              class=\\\"item-value\\\"\\n              ngx-charts-count-up\\n              [countTo]=\\\"legendItem._value\\\"\\n              [valueFormatting]=\\\"valueFormatting\\\"\\n            ></div>\\n            <div *ngIf=\\\"!animations\\\" class=\\\"item-value\\\">\\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\\n            </div>\\n            <div class=\\\"item-label\\\">{{ legendItem.displayLabel }}</div>\\n            <div\\n              *ngIf=\\\"animations\\\"\\n              class=\\\"item-percent\\\"\\n              ngx-charts-count-up\\n              [countTo]=\\\"legendItem.percentage\\\"\\n              [countSuffix]=\\\"'%'\\\"\\n            ></div>\\n            <div *ngIf=\\\"!animations\\\" class=\\\"item-percent\\\">{{ legendItem.percentage.toLocaleString() }}%</div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  \",\n            styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translate(0,-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:0}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;-webkit-transition:.2s;-moz-transition:.2s;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], AdvancedLegendComponent);\n    return AdvancedLegendComponent;\n}());\n\nvar cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    var newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = \"a\" + newId;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00'\n        ]\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634',\n            '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b',\n            '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3'\n        ]\n    }\n];\n\nfunction sortLinear(data, property, direction) {\n    if (direction === void 0) { direction = 'asc'; }\n    return data.sort(function (a, b) {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction, domain) {\n    if (direction === void 0) { direction = 'asc'; }\n    return data.sort(function (a, b) {\n        var aVal = a[property];\n        var bVal = b[property];\n        var aIdx = domain.indexOf(aVal);\n        var bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction) {\n    if (direction === void 0) { direction = 'asc'; }\n    return data.sort(function (a, b) {\n        var aDate = a[property].getTime();\n        var bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n * @param {any} value\n * @returns {string}\n */\nfunction invertColor(value) {\n    var color = rgb(value);\n    var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n    var depth = (yiq >= 128) ? -.8 : .8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param {any} { r, g, b }\n * @param {any} percent\n * @returns\n */\nfunction shadeRGBColor(_a, percent) {\n    var r = _a.r, g = _a.g, b = _a.b;\n    var t = percent < 0 ? 0 : 255;\n    var p = percent < 0 ? percent * -1 : percent;\n    r = (Math.round((t - r) * p) + r);\n    g = (Math.round((t - g) * p) + g);\n    b = (Math.round((t - b) * p) + b);\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n}\n\n/**\n * Visibility Observer\n */\nvar VisibilityObserver = /** @class */ (function () {\n    function VisibilityObserver(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    VisibilityObserver.prototype.destroy = function () {\n        clearTimeout(this.timeout);\n    };\n    VisibilityObserver.prototype.onVisibilityChange = function () {\n        var _this = this;\n        // trigger zone recalc for columns\n        this.zone.run(function () {\n            _this.isVisible = true;\n            _this.visible.emit(true);\n        });\n    };\n    VisibilityObserver.prototype.runCheck = function () {\n        var _this = this;\n        var check = function () {\n            if (!_this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            var _a = _this.element.nativeElement, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(_this.timeout);\n                _this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(_this.timeout);\n                _this.zone.runOutsideAngular(function () {\n                    _this.timeout = setTimeout(function () { return check(); }, 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(function () {\n            _this.timeout = setTimeout(function () { return check(); });\n        });\n    };\n    var _a;\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], VisibilityObserver.prototype, \"visible\", void 0);\n    return VisibilityObserver;\n}());\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\n\nvar BaseChartComponent = /** @class */ (function () {\n    function BaseChartComponent(chartElement, zone, cd) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.scheme = 'cool';\n        this.schemeType = 'ordinal';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    BaseChartComponent.prototype.ngAfterViewInit = function () {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    };\n    BaseChartComponent.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    };\n    BaseChartComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    BaseChartComponent.prototype.update = function () {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            var dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    };\n    BaseChartComponent.prototype.getContainerDims = function () {\n        var width;\n        var height;\n        var hostElem = this.chartElement.nativeElement;\n        if (hostElem.parentNode !== null) {\n            // Get the container dimensions\n            var dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width: width, height: height };\n        }\n        return null;\n    };\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    BaseChartComponent.prototype.formatDates = function () {\n        for (var i = 0; i < this.results.length; i++) {\n            var g = this.results[i];\n            g.label = g.name;\n            if (g.label instanceof Date) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (var j = 0; j < g.series.length; j++) {\n                    var d = g.series[j];\n                    d.label = d.name;\n                    if (d.label instanceof Date) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    };\n    BaseChartComponent.prototype.unbindEvents = function () {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    BaseChartComponent.prototype.bindWindowResizeEvent = function () {\n        var _this = this;\n        var source = fromEvent(window, 'resize');\n        var subscription = source.pipe(debounceTime(200)).subscribe(function (e) {\n            _this.update();\n            if (_this.cd) {\n                _this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    };\n    /**\n     * Clones the data into a new object\n     *\n     * @private\n     * @param {any} data\n     * @returns {*}\n     *\n     * @memberOf BaseChart\n     */\n    BaseChartComponent.prototype.cloneData = function (data) {\n        var results = [];\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var item = data_1[_i];\n            var copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (var _a = 0, _b = item['series']; _a < _b.length; _a++) {\n                    var seriesItem = _b[_a];\n                    var seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BaseChartComponent.prototype, \"results\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BaseChartComponent.prototype, \"view\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BaseChartComponent.prototype, \"scheme\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BaseChartComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BaseChartComponent.prototype, \"customColors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BaseChartComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BaseChartComponent.prototype, \"select\", void 0);\n    BaseChartComponent = __decorate([\n        Component({\n            selector: 'base-chart',\n            template: \"\\n    <div></div>\\n  \"\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object, typeof (_b = typeof NgZone !== \"undefined\" && NgZone) === \"function\" ? _b : Object, typeof (_c = typeof ChangeDetectorRef !== \"undefined\" && ChangeDetectorRef) === \"function\" ? _c : Object])\n    ], BaseChartComponent);\n    return BaseChartComponent;\n}());\n\nvar AxisLabelComponent = /** @class */ (function () {\n    function AxisLabelComponent(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    AxisLabelComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    AxisLabelComponent.prototype.update = function () {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case 'top':\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case 'bottom':\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case 'left':\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case 'right':\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AxisLabelComponent.prototype, \"orient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AxisLabelComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AxisLabelComponent.prototype, \"offset\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AxisLabelComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AxisLabelComponent.prototype, \"height\", void 0);\n    AxisLabelComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-axis-label]',\n            template: \"\\n    <svg:text\\n      [attr.stroke-width]=\\\"strokeWidth\\\"\\n      [attr.x]=\\\"x\\\"\\n      [attr.y]=\\\"y\\\"\\n      [attr.text-anchor]=\\\"textAnchor\\\"\\n      [attr.transform]=\\\"transform\\\">\\n      {{label}}\\n    </svg:text>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], AxisLabelComponent);\n    return AxisLabelComponent;\n}());\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        var reduced = [];\n        var modulus = Math.floor(ticks.length / maxTicks);\n        for (var i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\n\nvar XAxisTicksComponent = /** @class */ (function () {\n    function XAxisTicksComponent() {\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = 'middle';\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n    }\n    XAxisTicksComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    XAxisTicksComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    XAxisTicksComponent.prototype.updateDims = function () {\n        var _this = this;\n        var height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: height });\n            setTimeout(function () { return _this.updateDims(); });\n        }\n    };\n    XAxisTicksComponent.prototype.update = function () {\n        var _this = this;\n        var scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        var angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = \"rotate(\" + angle + \")\";\n            this.textAnchor = 'end';\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = 'middle';\n        }\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    XAxisTicksComponent.prototype.getRotationAngle = function (ticks) {\n        var angle = 0;\n        this.maxTicksLength = 0;\n        for (var i = 0; i < ticks.length; i++) {\n            var tick = this.tickFormat(ticks[i]).toString();\n            var tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        var len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        var charWidth = 8; // need to measure this\n        var wordWidth = len * charWidth;\n        var baseWidth = wordWidth;\n        var maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        return angle;\n    };\n    XAxisTicksComponent.prototype.getTicks = function () {\n        var ticks;\n        var maxTicks = this.getMaxTicks(20);\n        var maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    };\n    XAxisTicksComponent.prototype.getMaxTicks = function (tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    };\n    XAxisTicksComponent.prototype.tickTransform = function (tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    };\n    XAxisTicksComponent.prototype.gridLineTransform = function () {\n        return \"translate(0,\" + (-this.verticalSpacing - 5) + \")\";\n    };\n    XAxisTicksComponent.prototype.tickTrim = function (label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"scale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"orient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"tickArguments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], XAxisTicksComponent.prototype, \"tickValues\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"tickStroke\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], XAxisTicksComponent.prototype, \"trimTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], XAxisTicksComponent.prototype, \"maxTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"tickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"gridLineHeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], XAxisTicksComponent.prototype, \"rotateTicks\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], XAxisTicksComponent.prototype, \"dimensionsChanged\", void 0);\n    __decorate([\n        ViewChild('ticksel', { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object)\n    ], XAxisTicksComponent.prototype, \"ticksElement\", void 0);\n    XAxisTicksComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-x-axis-ticks]',\n            template: \"\\n    <svg:g #ticksel>\\n      <svg:g *ngFor=\\\"let tick of ticks\\\" class=\\\"tick\\\" [attr.transform]=\\\"tickTransform(tick)\\\">\\n        <title>{{ tickFormat(tick) }}</title>\\n        <svg:text\\n          stroke-width=\\\"0.01\\\"\\n          [attr.text-anchor]=\\\"textAnchor\\\"\\n          [attr.transform]=\\\"textTransform\\\"\\n          [style.font-size]=\\\"'12px'\\\"\\n        >\\n          {{ tickTrim(tickFormat(tick)) }}\\n        </svg:text>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:g *ngFor=\\\"let tick of ticks\\\" [attr.transform]=\\\"tickTransform(tick)\\\">\\n      <svg:g *ngIf=\\\"showGridLines\\\" [attr.transform]=\\\"gridLineTransform()\\\">\\n        <svg:line class=\\\"gridline-path gridline-path-vertical\\\" [attr.y1]=\\\"-gridLineHeight\\\" y2=\\\"0\\\" />\\n      </svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], XAxisTicksComponent);\n    return XAxisTicksComponent;\n}());\n\nvar XAxisComponent = /** @class */ (function () {\n    function XAxisComponent() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = 'bottom';\n        this.xAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n    }\n    XAxisComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    XAxisComponent.prototype.update = function () {\n        this.transform = \"translate(0,\" + (this.xAxisOffset + this.padding + this.dims.height) + \")\";\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    };\n    XAxisComponent.prototype.emitTicksHeight = function (_a) {\n        var _this = this;\n        var height = _a.height;\n        var newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(function () {\n                _this.dimensionsChanged.emit({ height: height });\n            }, 0);\n        }\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], XAxisComponent.prototype, \"trimTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], XAxisComponent.prototype, \"rotateTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], XAxisComponent.prototype, \"maxTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"tickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"showLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"labelText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], XAxisComponent.prototype, \"ticks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"xAxisTickInterval\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"xAxisTickCount\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], XAxisComponent.prototype, \"xOrient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], XAxisComponent.prototype, \"xAxisOffset\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], XAxisComponent.prototype, \"dimensionsChanged\", void 0);\n    __decorate([\n        ViewChild(XAxisTicksComponent, { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof XAxisTicksComponent !== \"undefined\" && XAxisTicksComponent) === \"function\" ? _a : Object)\n    ], XAxisComponent.prototype, \"ticksComponent\", void 0);\n    XAxisComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-x-axis]',\n            template: \"\\n    <svg:g [attr.class]=\\\"xAxisClassName\\\" [attr.transform]=\\\"transform\\\">\\n      <svg:g\\n        ngx-charts-x-axis-ticks\\n        *ngIf=\\\"xScale\\\"\\n        [trimTicks]=\\\"trimTicks\\\"\\n        [rotateTicks]=\\\"rotateTicks\\\"\\n        [maxTickLength]=\\\"maxTickLength\\\"\\n        [tickFormatting]=\\\"tickFormatting\\\"\\n        [tickArguments]=\\\"tickArguments\\\"\\n        [tickStroke]=\\\"tickStroke\\\"\\n        [scale]=\\\"xScale\\\"\\n        [orient]=\\\"xOrient\\\"\\n        [showGridLines]=\\\"showGridLines\\\"\\n        [gridLineHeight]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n        [tickValues]=\\\"ticks\\\"\\n        (dimensionsChanged)=\\\"emitTicksHeight($event)\\\"\\n      />\\n      <svg:g\\n        ngx-charts-axis-label\\n        *ngIf=\\\"showLabel\\\"\\n        [label]=\\\"labelText\\\"\\n        [offset]=\\\"labelOffset\\\"\\n        [orient]=\\\"'bottom'\\\"\\n        [height]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], XAxisComponent);\n    return XAxisComponent;\n}());\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param {*} x, y, w, h, r, tl, tr, bl, br\n * @returns {string}\n */\nfunction roundedRect(x, y, w, h, r, _a) {\n    var tl = _a[0], tr = _a[1], bl = _a[2], br = _a[3];\n    var retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = \"M\" + [x + r, y];\n    retval += \"h\" + (w - 2 * r);\n    if (tr) {\n        retval += \"a\" + [r, r] + \" 0 0 1 \" + [r, r];\n    }\n    else {\n        retval += \"h\" + r + \"v\" + r;\n    }\n    retval += \"v\" + (h - 2 * r);\n    if (br) {\n        retval += \"a\" + [r, r] + \" 0 0 1 \" + [-r, r];\n    }\n    else {\n        retval += \"v\" + r + \"h\" + -r;\n    }\n    retval += \"h\" + (2 * r - w);\n    if (bl) {\n        retval += \"a\" + [r, r] + \" 0 0 1 \" + [-r, -r];\n    }\n    else {\n        retval += \"h\" + -r + \"v\" + -r;\n    }\n    retval += \"v\" + (2 * r - h);\n    if (tl) {\n        retval += \"a\" + [r, r] + \" 0 0 1 \" + [r, -r];\n    }\n    else {\n        retval += \"v\" + -r + \"h\" + r;\n    }\n    retval += \"z\";\n    return retval;\n}\n\nvar YAxisTicksComponent = /** @class */ (function () {\n    function YAxisTicksComponent() {\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = 'middle';\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n    }\n    YAxisTicksComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    YAxisTicksComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    YAxisTicksComponent.prototype.updateDims = function () {\n        var _this = this;\n        var width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width: width });\n            setTimeout(function () { return _this.updateDims(); });\n        }\n    };\n    YAxisTicksComponent.prototype.update = function () {\n        var _this = this;\n        var scale;\n        var sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? function (d) {\n                return scale(d) + scale.bandwidth() * 0.5;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case 'top':\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = 'middle';\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case 'bottom':\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = 'middle';\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case 'left':\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = 'end';\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case 'right':\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = 'start';\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    YAxisTicksComponent.prototype.setReferencelines = function () {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(function (item) { return item.value; })));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(function (item) { return item.value; })));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    };\n    YAxisTicksComponent.prototype.getTicks = function () {\n        var ticks;\n        var maxTicks = this.getMaxTicks(20);\n        var maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    };\n    YAxisTicksComponent.prototype.getMaxTicks = function (tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    };\n    YAxisTicksComponent.prototype.tickTransform = function (tick) {\n        return \"translate(\" + this.adjustedScale(tick) + \",\" + this.verticalSpacing + \")\";\n    };\n    YAxisTicksComponent.prototype.gridLineTransform = function () {\n        return \"translate(5,0)\";\n    };\n    YAxisTicksComponent.prototype.tickTrim = function (label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"scale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"orient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"tickArguments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], YAxisTicksComponent.prototype, \"tickValues\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"tickStroke\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], YAxisTicksComponent.prototype, \"trimTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], YAxisTicksComponent.prototype, \"maxTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"tickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"gridLineWidth\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"referenceLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], YAxisTicksComponent.prototype, \"showRefLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], YAxisTicksComponent.prototype, \"showRefLines\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], YAxisTicksComponent.prototype, \"dimensionsChanged\", void 0);\n    __decorate([\n        ViewChild('ticksel', { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object)\n    ], YAxisTicksComponent.prototype, \"ticksElement\", void 0);\n    YAxisTicksComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-y-axis-ticks]',\n            template: \"\\n    <svg:g #ticksel>\\n      <svg:g *ngFor=\\\"let tick of ticks\\\" class=\\\"tick\\\" [attr.transform]=\\\"transform(tick)\\\">\\n        <title>{{ tickFormat(tick) }}</title>\\n        <svg:text\\n          stroke-width=\\\"0.01\\\"\\n          [attr.dy]=\\\"dy\\\"\\n          [attr.x]=\\\"x1\\\"\\n          [attr.y]=\\\"y1\\\"\\n          [attr.text-anchor]=\\\"textAnchor\\\"\\n          [style.font-size]=\\\"'12px'\\\"\\n        >\\n          {{ tickTrim(tickFormat(tick)) }}\\n        </svg:text>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:path\\n      *ngIf=\\\"referenceLineLength > 1 && refMax && refMin && showRefLines\\\"\\n      class=\\\"reference-area\\\"\\n      [attr.d]=\\\"referenceAreaPath\\\"\\n      [attr.transform]=\\\"gridLineTransform()\\\"\\n    />\\n    <svg:g *ngFor=\\\"let tick of ticks\\\" [attr.transform]=\\\"transform(tick)\\\">\\n      <svg:g *ngIf=\\\"showGridLines\\\" [attr.transform]=\\\"gridLineTransform()\\\">\\n        <svg:line\\n          *ngIf=\\\"orient === 'left'\\\"\\n          class=\\\"gridline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"gridLineWidth\\\"\\n        />\\n        <svg:line\\n          *ngIf=\\\"orient === 'right'\\\"\\n          class=\\\"gridline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"-gridLineWidth\\\"\\n        />\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:g *ngFor=\\\"let refLine of referenceLines\\\">\\n      <svg:g *ngIf=\\\"showRefLines\\\" [attr.transform]=\\\"transform(refLine.value)\\\">\\n        <svg:line\\n          class=\\\"refline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"gridLineWidth\\\"\\n          [attr.transform]=\\\"gridLineTransform()\\\"\\n        />\\n        <svg:g *ngIf=\\\"showRefLabels\\\">\\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\\n          <svg:text\\n            class=\\\"refline-label\\\"\\n            [attr.dy]=\\\"dy\\\"\\n            [attr.y]=\\\"-6\\\"\\n            [attr.x]=\\\"gridLineWidth\\\"\\n            [attr.text-anchor]=\\\"textAnchor\\\"\\n          >\\n            {{ refLine.name }}\\n          </svg:text>\\n        </svg:g>\\n      </svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], YAxisTicksComponent);\n    return YAxisTicksComponent;\n}());\n\nvar YAxisComponent = /** @class */ (function () {\n    function YAxisComponent() {\n        this.showGridLines = false;\n        this.yOrient = 'left';\n        this.yAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    YAxisComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    YAxisComponent.prototype.update = function () {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === 'right') {\n            this.labelOffset = 65;\n            this.transform = \"translate(\" + (this.offset + this.dims.width) + \" , 0)\";\n        }\n        else {\n            this.offset = this.offset;\n            this.transform = \"translate(\" + this.offset + \" , 0)\";\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    };\n    YAxisComponent.prototype.emitTicksWidth = function (_a) {\n        var _this = this;\n        var width = _a.width;\n        if (width !== this.labelOffset && this.yOrient === 'right') {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(function () {\n                _this.dimensionsChanged.emit({ width: width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(function () {\n                _this.dimensionsChanged.emit({ width: width });\n            }, 0);\n        }\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], YAxisComponent.prototype, \"trimTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], YAxisComponent.prototype, \"maxTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"tickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], YAxisComponent.prototype, \"ticks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"showLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"labelText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"yAxisTickInterval\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"yAxisTickCount\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], YAxisComponent.prototype, \"yOrient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"referenceLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"showRefLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"showRefLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], YAxisComponent.prototype, \"yAxisOffset\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], YAxisComponent.prototype, \"dimensionsChanged\", void 0);\n    __decorate([\n        ViewChild(YAxisTicksComponent, { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof YAxisTicksComponent !== \"undefined\" && YAxisTicksComponent) === \"function\" ? _a : Object)\n    ], YAxisComponent.prototype, \"ticksComponent\", void 0);\n    YAxisComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-y-axis]',\n            template: \"\\n    <svg:g [attr.class]=\\\"yAxisClassName\\\" [attr.transform]=\\\"transform\\\">\\n      <svg:g\\n        ngx-charts-y-axis-ticks\\n        *ngIf=\\\"yScale\\\"\\n        [trimTicks]=\\\"trimTicks\\\"\\n        [maxTickLength]=\\\"maxTickLength\\\"\\n        [tickFormatting]=\\\"tickFormatting\\\"\\n        [tickArguments]=\\\"tickArguments\\\"\\n        [tickValues]=\\\"ticks\\\"\\n        [tickStroke]=\\\"tickStroke\\\"\\n        [scale]=\\\"yScale\\\"\\n        [orient]=\\\"yOrient\\\"\\n        [showGridLines]=\\\"showGridLines\\\"\\n        [gridLineWidth]=\\\"dims.width\\\"\\n        [referenceLines]=\\\"referenceLines\\\"\\n        [showRefLines]=\\\"showRefLines\\\"\\n        [showRefLabels]=\\\"showRefLabels\\\"\\n        [height]=\\\"dims.height\\\"\\n        (dimensionsChanged)=\\\"emitTicksWidth($event)\\\"\\n      />\\n\\n      <svg:g\\n        ngx-charts-axis-label\\n        *ngIf=\\\"showLabel\\\"\\n        [label]=\\\"labelText\\\"\\n        [offset]=\\\"labelOffset\\\"\\n        [orient]=\\\"yOrient\\\"\\n        [height]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], YAxisComponent);\n    return YAxisComponent;\n}());\n\nvar AxesModule = /** @class */ (function () {\n    function AxesModule() {\n    }\n    AxesModule = __decorate([\n        NgModule({\n            imports: [CommonModule],\n            declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n            exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n        })\n    ], AxesModule);\n    return AxesModule;\n}());\n\nvar ColorHelper = /** @class */ (function () {\n    function ColorHelper(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(function (cs) {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    ColorHelper.prototype.generateColorScheme = function (scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(function (cs) {\n                return cs.name === scheme;\n            });\n        }\n        var colorScale;\n        if (type === 'quantile') {\n            colorScale = scaleQuantile()\n                .range(scheme.domain)\n                .domain(domain);\n        }\n        else if (type === 'ordinal') {\n            colorScale = scaleOrdinal()\n                .range(scheme.domain)\n                .domain(domain);\n        }\n        else if (type === 'linear') {\n            // linear schemes must have at least 2 colors\n            var colorDomain = scheme.domain.slice();\n            if (colorDomain.length === 1) {\n                colorDomain.push(colorDomain[0]);\n                this.colorDomain = colorDomain;\n            }\n            var points = range(0, 1, 1.0 / colorDomain.length);\n            colorScale = scaleLinear()\n                .domain(points)\n                .range(colorDomain);\n        }\n        return colorScale;\n    };\n    ColorHelper.prototype.getColor = function (value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === 'linear') {\n            var valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            var formattedValue_1 = value.toString();\n            var found = void 0; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(function (mapping) {\n                    return mapping.name.toLowerCase() === formattedValue_1.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    };\n    ColorHelper.prototype.getLinearGradientStops = function (value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        var valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        var colorValueScale = scaleBand()\n            .domain(this.colorDomain)\n            .range([0, 1]);\n        var endColor = this.getColor(value);\n        // generate the stops\n        var startVal = valueScale(start);\n        var startColor = this.getColor(start);\n        var endVal = valueScale(value);\n        var i = 1;\n        var currentVal = startVal;\n        var stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            var color = this.colorDomain[i];\n            var offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color: color,\n                offset: offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (var _i = 0, stops_1 = stops; _i < stops_1.length; _i++) {\n                    var s = stops_1[_i];\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    };\n    return ColorHelper;\n}());\n\nvar CircleSeriesComponent = /** @class */ (function () {\n    function CircleSeriesComponent() {\n        this.type = 'standard';\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n    }\n    CircleSeriesComponent.prototype.ngOnInit = function () {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = \"url(#\" + this.gradientId + \")\";\n    };\n    CircleSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    CircleSeriesComponent.prototype.update = function () {\n        this.circle = this.getActiveCircle();\n    };\n    CircleSeriesComponent.prototype.getActiveCircle = function () {\n        var _this = this;\n        var indexActiveDataPoint = this.data.series.findIndex(function (d) {\n            var label = d.name;\n            return label && _this.visibleValue && label.toString() === _this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    };\n    CircleSeriesComponent.prototype.mapDataPointToCircle = function (d, i) {\n        var seriesName = this.data.name;\n        var value = d.value;\n        var label = d.name;\n        var tooltipLabel = formatLabel(label);\n        var cx;\n        if (this.scaleType === 'time') {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === 'linear') {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        var cy = this.yScale(this.type === 'standard' ? value : d.d1);\n        var radius = 5;\n        var height = this.yScale.range()[0] - cy;\n        var opacity = 1;\n        var color;\n        if (this.colors.scaleType === 'linear') {\n            if (this.type === 'standard') {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        var data = Object.assign({}, d, {\n            series: seriesName,\n            value: value,\n            name: label\n        });\n        return {\n            classNames: [\"circle-data-\" + i],\n            value: value,\n            label: label,\n            data: data,\n            cx: cx,\n            cy: cy,\n            radius: radius,\n            height: height,\n            tooltipLabel: tooltipLabel,\n            color: color,\n            opacity: opacity,\n            seriesName: seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    };\n    CircleSeriesComponent.prototype.getTooltipText = function (_a) {\n        var tooltipLabel = _a.tooltipLabel, value = _a.value, seriesName = _a.seriesName, min$$1 = _a.min, max$$1 = _a.max;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(seriesName) + \" \\u2022 \" + escapeLabel(tooltipLabel) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + this.getTooltipMinMaxText(min$$1, max$$1) + \"</span>\\n    \";\n    };\n    CircleSeriesComponent.prototype.getTooltipMinMaxText = function (min$$1, max$$1) {\n        if (min$$1 !== undefined || max$$1 !== undefined) {\n            var result = ' (';\n            if (min$$1 !== undefined) {\n                if (max$$1 === undefined) {\n                    result += '≥';\n                }\n                result += min$$1.toLocaleString();\n                if (max$$1 !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max$$1 !== undefined) {\n                result += '≤';\n            }\n            if (max$$1 !== undefined) {\n                result += max$$1.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    };\n    CircleSeriesComponent.prototype.getGradientStops = function (color) {\n        return [\n            {\n                offset: 0,\n                color: color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color: color,\n                opacity: 1\n            }\n        ];\n    };\n    CircleSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    CircleSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    CircleSeriesComponent.prototype.activateCircle = function () {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    };\n    CircleSeriesComponent.prototype.deactivateCircle = function () {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof ColorHelper !== \"undefined\" && ColorHelper) === \"function\" ? _a : Object)\n    ], CircleSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"visibleValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], CircleSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], CircleSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_b = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _b : Object)\n    ], CircleSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleSeriesComponent.prototype, \"deactivate\", void 0);\n    CircleSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-circle-series]',\n            template: \"\\n    <svg:g *ngIf=\\\"circle\\\">\\n      <defs>\\n        <svg:g\\n          ngx-charts-svg-linear-gradient\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"gradientId\\\"\\n          [stops]=\\\"circle.gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:rect\\n        *ngIf=\\\"barVisible && type === 'standard'\\\"\\n        [@animationState]=\\\"'active'\\\"\\n        [attr.x]=\\\"circle.cx - circle.radius\\\"\\n        [attr.y]=\\\"circle.cy\\\"\\n        [attr.width]=\\\"circle.radius * 2\\\"\\n        [attr.height]=\\\"circle.height\\\"\\n        [attr.fill]=\\\"gradientFill\\\"\\n        class=\\\"tooltip-bar\\\"\\n      />\\n      <svg:g\\n        ngx-charts-circle\\n        class=\\\"circle\\\"\\n        [cx]=\\\"circle.cx\\\"\\n        [cy]=\\\"circle.cy\\\"\\n        [r]=\\\"circle.radius\\\"\\n        [fill]=\\\"circle.color\\\"\\n        [class.active]=\\\"isActive({ name: circle.seriesName })\\\"\\n        [pointerEvents]=\\\"circle.value === 0 ? 'none' : 'all'\\\"\\n        [data]=\\\"circle.value\\\"\\n        [classNames]=\\\"circle.classNames\\\"\\n        (select)=\\\"onClick(circle.data)\\\"\\n        (activate)=\\\"activateCircle()\\\"\\n        (deactivate)=\\\"deactivateCircle()\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(circle)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"circle.data\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':enter', [\n                        style({\n                            opacity: 0\n                        }),\n                        animate(250, style({ opacity: 1 }))\n                    ])\n                ])\n            ]\n        })\n    ], CircleSeriesComponent);\n    return CircleSeriesComponent;\n}());\n\nvar CircleComponent = /** @class */ (function () {\n    function CircleComponent() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    CircleComponent.prototype.onClick = function () {\n        this.select.emit(this.data);\n    };\n    CircleComponent.prototype.onMouseEnter = function () {\n        this.activate.emit(this.data);\n    };\n    CircleComponent.prototype.onMouseLeave = function () {\n        this.deactivate.emit(this.data);\n    };\n    CircleComponent.prototype.ngOnChanges = function (changes) {\n        this.classNames = Array.isArray(this.classNames) ?\n            this.classNames.join(' ') :\n            '';\n        this.classNames += 'circle';\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"cx\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"cy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"r\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"stroke\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"classNames\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"circleOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"pointerEvents\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CircleComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        HostListener('click'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], CircleComponent.prototype, \"onClick\", null);\n    __decorate([\n        HostListener('mouseenter'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], CircleComponent.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], CircleComponent.prototype, \"onMouseLeave\", null);\n    CircleComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-circle]',\n            template: \"\\n    <svg:circle\\n      [attr.cx]=\\\"cx\\\"\\n      [attr.cy]=\\\"cy\\\"\\n      [attr.r]=\\\"r\\\"\\n      [attr.fill]=\\\"fill\\\"\\n      [attr.stroke]=\\\"stroke\\\"\\n      [attr.opacity]=\\\"circleOpacity\\\"\\n      [attr.class]=\\\"classNames\\\"\\n      [attr.pointer-events]=\\\"pointerEvents\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], CircleComponent);\n    return CircleComponent;\n}());\n\nvar GridPanelComponent = /** @class */ (function () {\n    function GridPanelComponent() {\n    }\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelComponent.prototype, \"path\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelComponent.prototype, \"x\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelComponent.prototype, \"y\", void 0);\n    GridPanelComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-grid-panel]',\n            template: \"\\n    <svg:rect\\n      [attr.height]=\\\"height\\\"\\n      [attr.width]=\\\"width\\\"\\n      [attr.x]=\\\"x\\\"\\n      [attr.y]=\\\"y\\\"\\n      stroke=\\\"none\\\"\\n      class=\\\"gridpanel\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], GridPanelComponent);\n    return GridPanelComponent;\n}());\n\nvar GridPanelSeriesComponent = /** @class */ (function () {\n    function GridPanelSeriesComponent() {\n    }\n    GridPanelSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    GridPanelSeriesComponent.prototype.update = function () {\n        this.gridPanels = this.getGridPanels();\n    };\n    GridPanelSeriesComponent.prototype.getGridPanels = function () {\n        var _this = this;\n        return this.data.map(function (d) {\n            var offset;\n            var width;\n            var height;\n            var x;\n            var y;\n            var className = 'odd';\n            if (_this.orient === 'vertical') {\n                var position = _this.xScale(d.name);\n                var positionIndex = Number.parseInt((position / _this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = 'even';\n                }\n                offset = _this.xScale.bandwidth() * _this.xScale.paddingInner();\n                width = _this.xScale.bandwidth() + offset;\n                height = _this.dims.height;\n                x = _this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (_this.orient === 'horizontal') {\n                var position = _this.yScale(d.name);\n                var positionIndex = Number.parseInt((position / _this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = 'even';\n                }\n                offset = _this.yScale.bandwidth() * _this.yScale.paddingInner();\n                width = _this.dims.width;\n                height = _this.yScale.bandwidth() + offset;\n                x = 0;\n                y = _this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height: height,\n                width: width,\n                x: x,\n                y: y\n            };\n        });\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelSeriesComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GridPanelSeriesComponent.prototype, \"orient\", void 0);\n    GridPanelSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-grid-panel-series]',\n            template: \"\\n    <svg:g ngx-charts-grid-panel *ngFor=\\\"let gridPanel of gridPanels\\\"\\n      [height]=\\\"gridPanel.height\\\"\\n      [width]=\\\"gridPanel.width\\\"\\n      [x]=\\\"gridPanel.x\\\"\\n      [y]=\\\"gridPanel.y\\\"\\n      [class.grid-panel]=\\\"true\\\"\\n      [class.odd]=\\\"gridPanel.class === 'odd'\\\"\\n      [class.even]=\\\"gridPanel.class === 'even'\\\">\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], GridPanelSeriesComponent);\n    return GridPanelSeriesComponent;\n}());\n\nvar SvgLinearGradientComponent = /** @class */ (function () {\n    function SvgLinearGradientComponent() {\n        this.orientation = 'vertical';\n    }\n    SvgLinearGradientComponent.prototype.ngOnChanges = function (changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === 'horizontal') {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === 'vertical') {\n            this.y1 = '100%';\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SvgLinearGradientComponent.prototype, \"orientation\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SvgLinearGradientComponent.prototype, \"name\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], SvgLinearGradientComponent.prototype, \"stops\", void 0);\n    SvgLinearGradientComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-svg-linear-gradient]',\n            template: \"\\n    <svg:linearGradient\\n      [id]=\\\"name\\\"\\n      [attr.x1]=\\\"x1\\\"\\n      [attr.y1]=\\\"y1\\\"\\n      [attr.x2]=\\\"x2\\\"\\n      [attr.y2]=\\\"y2\\\">\\n      <svg:stop *ngFor=\\\"let stop of stops\\\"\\n        [attr.offset]=\\\"stop.offset + '%'\\\"\\n        [style.stop-color]=\\\"stop.color\\\"\\n        [style.stop-opacity]=\\\"stop.opacity\\\"\\n      />\\n    </svg:linearGradient>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], SvgLinearGradientComponent);\n    return SvgLinearGradientComponent;\n}());\n\nvar SvgRadialGradientComponent = /** @class */ (function () {\n    function SvgRadialGradientComponent() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    Object.defineProperty(SvgRadialGradientComponent.prototype, \"stops\", {\n        get: function () {\n            return this.stopsInput || this.stopsDefault;\n        },\n        set: function (value) {\n            this.stopsInput = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SvgRadialGradientComponent.prototype.ngOnChanges = function (changes) {\n        this.r = '30%';\n        if (('color' in changes) ||\n            ('startOpacity' in changes) ||\n            ('endOpacity' in changes)) {\n            this.stopsDefault = [{\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                }, {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }];\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SvgRadialGradientComponent.prototype, \"color\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SvgRadialGradientComponent.prototype, \"name\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], SvgRadialGradientComponent.prototype, \"startOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SvgRadialGradientComponent.prototype, \"endOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], SvgRadialGradientComponent.prototype, \"cx\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], SvgRadialGradientComponent.prototype, \"cy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], SvgRadialGradientComponent.prototype, \"stops\", null);\n    SvgRadialGradientComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-svg-radial-gradient]',\n            template: \"\\n    <svg:radialGradient\\n      [id]=\\\"name\\\"\\n      [attr.cx]=\\\"cx\\\"\\n      [attr.cy]=\\\"cy\\\"\\n      [attr.r]=\\\"r\\\"\\n      gradientUnits=\\\"userSpaceOnUse\\\">\\n      <svg:stop *ngFor=\\\"let stop of stops\\\"\\n        [attr.offset]=\\\"stop.offset + '%'\\\"\\n        [style.stop-color]=\\\"stop.color\\\"\\n        [style.stop-opacity]=\\\"stop.opacity\\\"\\n      />\\n    </svg:radialGradient>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], SvgRadialGradientComponent);\n    return SvgRadialGradientComponent;\n}());\n\nvar Timeline = /** @class */ (function () {\n    function Timeline(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    Timeline.prototype.ngOnChanges = function (changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    };\n    Timeline.prototype.update = function () {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        var offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = \"translate(0 , \" + offsetY + \")\";\n        this.filterId = 'filter' + id().toString();\n        this.filter = \"url(#\" + this.filterId + \")\";\n        this.cd.markForCheck();\n    };\n    Timeline.prototype.getXDomain = function () {\n        var values = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        var domain = [];\n        if (this.scaleType === 'time') {\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            domain = [min$$1, max$$1];\n        }\n        else if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            domain = [min$$1, max$$1];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    };\n    Timeline.prototype.getXScale = function () {\n        var scale;\n        if (this.scaleType === 'time') {\n            scale = scaleTime()\n                .range([0, this.dims.width])\n                .domain(this.xDomain);\n        }\n        else if (this.scaleType === 'linear') {\n            scale = scaleLinear()\n                .range([0, this.dims.width])\n                .domain(this.xDomain);\n        }\n        else if (this.scaleType === 'ordinal') {\n            scale = scalePoint()\n                .range([0, this.dims.width])\n                .padding(0.1)\n                .domain(this.xDomain);\n        }\n        return scale;\n    };\n    Timeline.prototype.addBrush = function () {\n        var _this = this;\n        if (this.brush)\n            return;\n        var height = this.height;\n        var width = this.view[0];\n        this.brush = brushX()\n            .extent([[0, 0], [width, height]])\n            .on('brush end', function () {\n            var selection = event.selection || _this.xScale.range();\n            var newDomain = selection.map(_this.xScale.invert);\n            _this.onDomainChange.emit(newDomain);\n            _this.cd.markForCheck();\n        });\n        select(this.element)\n            .select('.brush')\n            .call(this.brush);\n    };\n    Timeline.prototype.updateBrush = function () {\n        if (!this.brush)\n            return;\n        var height = this.height;\n        var width = this.view[0];\n        this.brush.extent([[0, 0], [width, height]]);\n        select(this.element)\n            .select('.brush')\n            .call(this.brush);\n        select(this.element).select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    };\n    Timeline.prototype.getDims = function () {\n        var width = this.view[0];\n        var dims = {\n            width: width,\n            height: this.height\n        };\n        return dims;\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"view\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"state\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"results\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"scheme\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"customColors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"miniChart\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"autoScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], Timeline.prototype, \"height\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], Timeline.prototype, \"onDomainChange\", void 0);\n    Timeline = __decorate([\n        Component({\n            selector: 'g[ngx-charts-timeline]',\n            template: \"\\n    <svg:g\\n      class=\\\"timeline\\\"\\n      [attr.transform]=\\\"transform\\\">\\n      <svg:filter [attr.id]=\\\"filterId\\\">\\n        <svg:feColorMatrix in=\\\"SourceGraphic\\\"\\n            type=\\\"matrix\\\"\\n            values=\\\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\\\" />\\n      </svg:filter>\\n      <svg:g class=\\\"embedded-chart\\\">\\n        <ng-content></ng-content>\\n      </svg:g>\\n      <svg:rect x=\\\"0\\\"\\n        [attr.width]=\\\"view[0]\\\"\\n        y=\\\"0\\\"\\n        [attr.height]=\\\"height\\\"\\n        class=\\\"brush-background\\\"\\n      />\\n      <svg:g class=\\\"brush\\\"></svg:g>\\n    </svg:g>\\n  \",\n            styles: [\".timeline .brush-background{fill:rgba(0,0,0,.05)}.timeline .brush .selection{fill:rgba(0,0,0,.1);stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object, typeof (_b = typeof ChangeDetectorRef !== \"undefined\" && ChangeDetectorRef) === \"function\" ? _b : Object])\n    ], Timeline);\n    return Timeline;\n}());\n\nvar AreaComponent = /** @class */ (function () {\n    function AreaComponent(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.hasGradient = false;\n        this.element = element.nativeElement;\n    }\n    AreaComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    };\n    AreaComponent.prototype.update = function () {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = \"url(#\" + this.gradientId + \")\";\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    };\n    AreaComponent.prototype.loadAnimation = function () {\n        this.areaPath = this.startingPath;\n        setTimeout(this.update.bind(this), 100);\n    };\n    AreaComponent.prototype.updatePathEl = function () {\n        var node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750)\n                .attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    };\n    AreaComponent.prototype.getGradient = function () {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"path\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"startingPath\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"opacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"startOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"endOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"activeLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaComponent.prototype, \"stops\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], AreaComponent.prototype, \"select\", void 0);\n    AreaComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-area]',\n            template: \"\\n    <svg:defs *ngIf=\\\"gradient\\\">\\n      <svg:g ngx-charts-svg-linear-gradient\\n        orientation=\\\"vertical\\\"\\n        [name]=\\\"gradientId\\\"\\n        [stops]=\\\"gradientStops\\\"\\n      />\\n    </svg:defs>\\n    <svg:path\\n      class=\\\"area\\\"\\n      [attr.d]=\\\"areaPath\\\"\\n      [attr.fill]=\\\"gradient ? gradientFill : fill\\\"\\n      [style.opacity]=\\\"opacity\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], AreaComponent);\n    return AreaComponent;\n}());\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nvar root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nvar MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles, cancelable) {\n    if (bubbles === void 0) { bubbles = false; }\n    if (cancelable === void 0) { cancelable = true; }\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof (MouseEvent) === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles: bubbles, cancelable: cancelable });\n    }\n    else {\n        // IE\n        var event$$1 = document.createEvent('MouseEvent');\n        event$$1.initEvent(name, bubbles, cancelable);\n        return event$$1;\n    }\n}\n\nvar TooltipArea = /** @class */ (function () {\n    function TooltipArea() {\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    TooltipArea.prototype.getValues = function (xVal) {\n        var results = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            var item = group.series.find(function (d) { return d.name.toString() === xVal.toString(); });\n            var groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                var label = item.name;\n                var val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                var color = void 0;\n                if (this.colors.scaleType === 'linear') {\n                    var v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                var data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color: color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    };\n    TooltipArea.prototype.mouseMove = function (event$$1) {\n        var xPos = event$$1.pageX - event$$1.target.getBoundingClientRect().left;\n        var closestIndex = this.findClosestPointIndex(xPos);\n        var closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            var ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    };\n    TooltipArea.prototype.findClosestPointIndex = function (xPos) {\n        var minIndex = 0;\n        var maxIndex = this.xSet.length - 1;\n        var minDiff = Number.MAX_VALUE;\n        var closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            var currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            var currentElement = this.xScale(this.xSet[currentIndex]);\n            var curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    };\n    TooltipArea.prototype.showTooltip = function () {\n        var event$$1 = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event$$1);\n    };\n    TooltipArea.prototype.hideTooltip = function () {\n        var event$$1 = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event$$1);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    };\n    TooltipArea.prototype.getToolTipText = function (tooltipItem) {\n        var result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"xSet\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"results\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipArea.prototype, \"showPercentage\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TooltipArea.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], TooltipArea.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"hover\", void 0);\n    __decorate([\n        ViewChild('tooltipAnchor', { static: false }),\n        __metadata(\"design:type\", Object)\n    ], TooltipArea.prototype, \"tooltipAnchor\", void 0);\n    TooltipArea = __decorate([\n        Component({\n            selector: 'g[ngx-charts-tooltip-area]',\n            template: \"\\n    <svg:g>\\n      <svg:rect\\n        class=\\\"tooltip-area\\\"\\n        [attr.x]=\\\"0\\\"\\n        y=\\\"0\\\"\\n        [attr.width]=\\\"dims.width\\\"\\n        [attr.height]=\\\"dims.height\\\"\\n        style=\\\"opacity: 0; cursor: 'auto';\\\"\\n        (mousemove)=\\\"mouseMove($event)\\\"\\n        (mouseleave)=\\\"hideTooltip()\\\"\\n      />\\n      <xhtml:ng-template #defaultTooltipTemplate let-model=\\\"model\\\">\\n        <xhtml:div class=\\\"area-tooltip-container\\\">\\n          <xhtml:div *ngFor=\\\"let tooltipItem of model\\\" class=\\\"tooltip-item\\\">\\n            <span class=\\\"tooltip-item-color\\\" [style.background-color]=\\\"tooltipItem.color\\\"> </span>\\n            {{ getToolTipText(tooltipItem) }}\\n          </xhtml:div>\\n        </xhtml:div>\\n      </xhtml:ng-template>\\n      <svg:rect\\n        #tooltipAnchor\\n        [@animationState]=\\\"anchorOpacity !== 0 ? 'active' : 'inactive'\\\"\\n        class=\\\"tooltip-anchor\\\"\\n        [attr.x]=\\\"anchorPos\\\"\\n        y=\\\"0\\\"\\n        [attr.width]=\\\"1\\\"\\n        [attr.height]=\\\"dims.height\\\"\\n        [style.opacity]=\\\"anchorOpacity\\\"\\n        [style.pointer-events]=\\\"'none'\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'right'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipSpacing]=\\\"15\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\\\"\\n        [tooltipContext]=\\\"anchorValues\\\"\\n        [tooltipImmediateExit]=\\\"true\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition('inactive => active', [\n                        style({\n                            opacity: 0\n                        }),\n                        animate(250, style({ opacity: 0.7 }))\n                    ]),\n                    transition('active => inactive', [\n                        style({\n                            opacity: 0.7\n                        }),\n                        animate(250, style({ opacity: 0 }))\n                    ])\n                ])\n            ]\n        })\n    ], TooltipArea);\n    return TooltipArea;\n}());\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n *\n * @export\n * @param {any} countFrom\n * @param {any} countTo\n * @param {any} countDecimals\n * @param {any} countDuration\n * @param {any} callback\n * @returns\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    var startVal = Number(countFrom);\n    var endVal = Number(countTo);\n    var countDown = startVal > endVal;\n    var decimals = Math.max(0, countDecimals);\n    var dec = Math.pow(10, decimals);\n    var duration = Number(countDuration) * 1000;\n    var startTime;\n    function runCount(timestamp) {\n        var frameVal;\n        var progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        var tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress: progress,\n            timestamp: timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(function (val) { return runCount(val); });\n        }\n    }\n    return requestAnimationFrame(function (timestamp) {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n * @param {any} countTo\n * @returns\n */\nfunction decimalChecker(countTo) {\n    var endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n * @class CountUpDirective\n */\nvar CountUpDirective = /** @class */ (function () {\n    function CountUpDirective(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    Object.defineProperty(CountUpDirective.prototype, \"countDecimals\", {\n        get: function () {\n            if (this._countDecimals)\n                return this._countDecimals;\n            return decimalChecker(this.countTo);\n        },\n        set: function (val) {\n            this._countDecimals = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CountUpDirective.prototype, \"countTo\", {\n        get: function () {\n            return this._countTo;\n        },\n        set: function (val) {\n            this._countTo = parseFloat(val);\n            this.start();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CountUpDirective.prototype, \"countFrom\", {\n        get: function () {\n            return this._countFrom;\n        },\n        set: function (val) {\n            this._countFrom = parseFloat(val);\n            this.start();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CountUpDirective.prototype.ngOnDestroy = function () {\n        cancelAnimationFrame(this.animationReq);\n    };\n    CountUpDirective.prototype.start = function () {\n        var _this = this;\n        cancelAnimationFrame(this.animationReq);\n        var valueFormatting = this.valueFormatting || (function (value) { return \"\" + _this.countPrefix + value.toLocaleString() + _this.countSuffix; });\n        var callback = function (_a) {\n            var value = _a.value, progress = _a.progress, finished = _a.finished;\n            _this.value = valueFormatting(value);\n            _this.cd.markForCheck();\n            if (!finished)\n                _this.countChange.emit({ value: _this.value, progress: progress });\n            if (finished)\n                _this.countFinish.emit({ value: _this.value, progress: progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], CountUpDirective.prototype, \"countDuration\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CountUpDirective.prototype, \"countPrefix\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CountUpDirective.prototype, \"countSuffix\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CountUpDirective.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], CountUpDirective.prototype, \"countDecimals\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CountUpDirective.prototype, \"countTo\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CountUpDirective.prototype, \"countFrom\", null);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CountUpDirective.prototype, \"countChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CountUpDirective.prototype, \"countFinish\", void 0);\n    CountUpDirective = __decorate([\n        Component({\n            selector: '[ngx-charts-count-up]',\n            template: \"{{value}}\"\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ChangeDetectorRef !== \"undefined\" && ChangeDetectorRef) === \"function\" ? _a : Object, typeof (_b = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _b : Object])\n    ], CountUpDirective);\n    return CountUpDirective;\n}());\n\nvar COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nvar ChartCommonModule = /** @class */ (function () {\n    function ChartCommonModule() {\n    }\n    ChartCommonModule = __decorate([\n        NgModule({\n            imports: [\n                CommonModule,\n                AxesModule,\n                TooltipModule\n            ],\n            declarations: COMPONENTS.slice(),\n            exports: [\n                CommonModule,\n                AxesModule,\n                TooltipModule\n            ].concat(COMPONENTS)\n        })\n    ], ChartCommonModule);\n    return ChartCommonModule;\n}());\n\nfunction calculateViewDimensions(_a) {\n    var width = _a.width, height = _a.height, margins = _a.margins, _b = _a.showXAxis, showXAxis = _b === void 0 ? false : _b, _c = _a.showYAxis, showYAxis = _c === void 0 ? false : _c, _d = _a.xAxisHeight, xAxisHeight = _d === void 0 ? 0 : _d, _e = _a.yAxisWidth, yAxisWidth = _e === void 0 ? 0 : _e, _f = _a.showXLabel, showXLabel = _f === void 0 ? false : _f, _g = _a.showYLabel, showYLabel = _g === void 0 ? false : _g, _h = _a.showLegend, showLegend = _h === void 0 ? false : _h, _j = _a.legendType, legendType = _j === void 0 ? 'ordinal' : _j, _k = _a.legendPosition, legendPosition = _k === void 0 ? 'right' : _k, _l = _a.columns, columns = _l === void 0 ? 12 : _l;\n    var xOffset = margins[3];\n    var chartWidth = width;\n    var chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === 'right') {\n        if (legendType === 'ordinal') {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = chartWidth * columns / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            var offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            var offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n * @param results\n */\nfunction getUniqueXDomainValues(results) {\n    var valueSet = new Set();\n    for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\n        var result = results_1[_i];\n        for (var _a = 0, _b = result.series; _a < _b.length; _a++) {\n            var d = _b[_a];\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @param values\n * @returns {string} 'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType) {\n    if (checkDateType === void 0) { checkDateType = true; }\n    if (checkDateType) {\n        var allDates = values.every(function (value) { return value instanceof Date; });\n        if (allDates) {\n            return 'time';\n        }\n    }\n    var allNumbers = values.every(function (value) { return typeof value === 'number'; });\n    if (allNumbers) {\n        return 'linear';\n    }\n    return 'ordinal';\n}\n\nvar AreaChartComponent = /** @class */ (function (_super) {\n    __extends(AreaChartComponent, _super);\n    function AreaChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.baseValue = 'auto';\n        _this.showGridLines = true;\n        _this.curve = curveLinear;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.timelineHeight = 50;\n        _this.timelinePadding = 10;\n        return _this;\n    }\n    AreaChartComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \", \" + this.margin[0] + \")\";\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = \"url(#\" + this.clipPathId + \")\";\n    };\n    AreaChartComponent.prototype.updateTimeline = function () {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = \"translate(\" + this.dims.xOffset + \", \" + -this.margin[2] + \")\";\n        }\n    };\n    AreaChartComponent.prototype.getXDomain = function () {\n        var values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        var domain = [];\n        if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n        }\n        var min$$1;\n        var max$$1;\n        if (this.scaleType === 'time' || this.scaleType === 'linear') {\n            min$$1 = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, values);\n            max$$1 = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, values);\n        }\n        if (this.scaleType === 'time') {\n            domain = [new Date(min$$1), new Date(max$$1)];\n            this.xSet = values.slice().sort(function (a, b) {\n                var aDate = a.getTime();\n                var bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === 'linear') {\n            domain = [min$$1, max$$1];\n            this.xSet = values.slice().sort(function (a, b) { return a - b; });\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    };\n    AreaChartComponent.prototype.getYDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        var values = domain.slice();\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        var min$$1 = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, values);\n        var max$$1 = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, values);\n        return [min$$1, max$$1];\n    };\n    AreaChartComponent.prototype.getSeriesDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    AreaChartComponent.prototype.getXScale = function (domain, width) {\n        var scale;\n        if (this.scaleType === 'time') {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === 'linear') {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === 'ordinal') {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartComponent.prototype.getYScale = function (domain, height) {\n        var scale = scaleLinear()\n            .range([height, 0])\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartComponent.prototype.getScaleType = function (values) {\n        var date = true;\n        var num = true;\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var value = values_1[_i];\n            if (!this.isDate(value)) {\n                date = false;\n            }\n            if (typeof value !== 'number') {\n                num = false;\n            }\n        }\n        if (date) {\n            return 'time';\n        }\n        if (num) {\n            return 'linear';\n        }\n        return 'ordinal';\n    };\n    AreaChartComponent.prototype.isDate = function (value) {\n        if (value instanceof Date) {\n            return true;\n        }\n        return false;\n    };\n    AreaChartComponent.prototype.updateDomain = function (domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    };\n    AreaChartComponent.prototype.updateHoveredVertical = function (item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    };\n    AreaChartComponent.prototype.hideCircles = function () {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    };\n    AreaChartComponent.prototype.onClick = function (data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    };\n    AreaChartComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    AreaChartComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    AreaChartComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    AreaChartComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    AreaChartComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    AreaChartComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"state\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"baseValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"autoScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"timeline\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"xScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartComponent.prototype, \"yScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], AreaChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], AreaChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], AreaChartComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ContentChild('seriesTooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _d : Object)\n    ], AreaChartComponent.prototype, \"seriesTooltipTemplate\", void 0);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AreaChartComponent.prototype, \"hideCircles\", null);\n    AreaChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-area-chart',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [baseValue]=\\\"baseValue\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [baseValue]=\\\"baseValue\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], AreaChartComponent);\n    return AreaChartComponent;\n}(BaseChartComponent));\n\nvar AreaChartNormalizedComponent = /** @class */ (function (_super) {\n    __extends(AreaChartNormalizedComponent, _super);\n    function AreaChartNormalizedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.showGridLines = true;\n        _this.curve = curveLinear;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.timelineHeight = 50;\n        _this.timelinePadding = 10;\n        return _this;\n    }\n    AreaChartNormalizedComponent.prototype.update = function () {\n        var _this = this;\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        var _loop_1 = function (i) {\n            var val = this_1.xSet[i];\n            var d0 = 0;\n            var total = 0;\n            for (var _i = 0, _a = this_1.results; _i < _a.length; _i++) {\n                var group = _a[_i];\n                var d = group.series.find(function (item) {\n                    var a = item.name;\n                    var b = val;\n                    if (_this.scaleType === 'time') {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (var _b = 0, _c = this_1.results; _b < _c.length; _b++) {\n                var group = _c[_b];\n                var d = group.series.find(function (item) {\n                    var a = item.name;\n                    var b = val;\n                    if (_this.scaleType === 'time') {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0: d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this.xSet.length; i++) {\n            _loop_1(i);\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = \"url(#\" + this.clipPathId + \")\";\n    };\n    AreaChartNormalizedComponent.prototype.updateTimeline = function () {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = \"translate(\" + this.dims.xOffset + \", \" + -this.margin[2] + \")\";\n        }\n    };\n    AreaChartNormalizedComponent.prototype.getXDomain = function () {\n        var values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        var domain = [];\n        if (this.scaleType === 'time') {\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            domain = [new Date(min$$1), new Date(max$$1)];\n            this.xSet = values.slice().sort(function (a, b) {\n                var aDate = a.getTime();\n                var bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            domain = [min$$1, max$$1];\n            this.xSet = values.slice().sort(function (a, b) { return a - b; });\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    };\n    AreaChartNormalizedComponent.prototype.getYDomain = function () {\n        return [0, 100];\n    };\n    AreaChartNormalizedComponent.prototype.getSeriesDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    AreaChartNormalizedComponent.prototype.getXScale = function (domain, width) {\n        var scale;\n        if (this.scaleType === 'time') {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === 'linear') {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === 'ordinal') {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartNormalizedComponent.prototype.getYScale = function (domain, height) {\n        var scale = scaleLinear()\n            .range([height, 0])\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartNormalizedComponent.prototype.updateDomain = function (domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    };\n    AreaChartNormalizedComponent.prototype.updateHoveredVertical = function (item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    };\n    AreaChartNormalizedComponent.prototype.hideCircles = function () {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    };\n    AreaChartNormalizedComponent.prototype.onClick = function (data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    };\n    AreaChartNormalizedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    AreaChartNormalizedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    AreaChartNormalizedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    AreaChartNormalizedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    AreaChartNormalizedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    AreaChartNormalizedComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartNormalizedComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartNormalizedComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartNormalizedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartNormalizedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"timeline\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartNormalizedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartNormalizedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartNormalizedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartNormalizedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartNormalizedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartNormalizedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartNormalizedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartNormalizedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], AreaChartNormalizedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], AreaChartNormalizedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], AreaChartNormalizedComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ContentChild('seriesTooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _d : Object)\n    ], AreaChartNormalizedComponent.prototype, \"seriesTooltipTemplate\", void 0);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AreaChartNormalizedComponent.prototype, \"hideCircles\", null);\n    AreaChartNormalizedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-area-chart-normalized',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [gradient]=\\\"gradient\\\"\\n              normalized=\\\"true\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [showPercentage]=\\\"true\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                type=\\\"stacked\\\"\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            normalized=\\\"true\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], AreaChartNormalizedComponent);\n    return AreaChartNormalizedComponent;\n}(BaseChartComponent));\n\nvar AreaChartStackedComponent = /** @class */ (function (_super) {\n    __extends(AreaChartStackedComponent, _super);\n    function AreaChartStackedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.showGridLines = true;\n        _this.curve = curveLinear;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.timelineHeight = 50;\n        _this.timelinePadding = 10;\n        return _this;\n    }\n    AreaChartStackedComponent.prototype.update = function () {\n        var _this = this;\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        var _loop_1 = function (i) {\n            var val = this_1.xSet[i];\n            var d0 = 0;\n            for (var _i = 0, _a = this_1.results; _i < _a.length; _i++) {\n                var group = _a[_i];\n                var d = group.series.find(function (item) {\n                    var a = item.name;\n                    var b = val;\n                    if (_this.scaleType === 'time') {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0: d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this.xSet.length; i++) {\n            _loop_1(i);\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = \"url(#\" + this.clipPathId + \")\";\n    };\n    AreaChartStackedComponent.prototype.updateTimeline = function () {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = \"translate(\" + this.dims.xOffset + \", \" + -this.margin[2] + \")\";\n        }\n    };\n    AreaChartStackedComponent.prototype.getXDomain = function () {\n        var values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        var domain = [];\n        if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n        }\n        var min$$1;\n        var max$$1;\n        if (this.scaleType === 'time' || this.scaleType === 'linear') {\n            min$$1 = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, values);\n            max$$1 = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, values);\n        }\n        if (this.scaleType === 'time') {\n            domain = [new Date(min$$1), new Date(max$$1)];\n            this.xSet = values.slice().sort(function (a, b) {\n                var aDate = a.getTime();\n                var bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === 'linear') {\n            domain = [min$$1, max$$1];\n            this.xSet = values.slice().sort(function (a, b) { return a - b; });\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    };\n    AreaChartStackedComponent.prototype.getYDomain = function () {\n        var _this = this;\n        var domain = [];\n        var _loop_2 = function (i) {\n            var val = this_2.xSet[i];\n            var sum = 0;\n            for (var _i = 0, _a = this_2.results; _i < _a.length; _i++) {\n                var group = _a[_i];\n                var d = group.series.find(function (item) {\n                    var a = item.name;\n                    var b = val;\n                    if (_this.scaleType === 'time') {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        };\n        var this_2 = this;\n        for (var i = 0; i < this.xSet.length; i++) {\n            _loop_2(i);\n        }\n        var min$$1 = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, [0].concat(domain));\n        var max$$1 = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, domain);\n        return [min$$1, max$$1];\n    };\n    AreaChartStackedComponent.prototype.getSeriesDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    AreaChartStackedComponent.prototype.getXScale = function (domain, width) {\n        var scale;\n        if (this.scaleType === 'time') {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === 'linear') {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === 'ordinal') {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartStackedComponent.prototype.getYScale = function (domain, height) {\n        var scale = scaleLinear()\n            .range([height, 0])\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    AreaChartStackedComponent.prototype.updateDomain = function (domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    };\n    AreaChartStackedComponent.prototype.updateHoveredVertical = function (item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    };\n    AreaChartStackedComponent.prototype.hideCircles = function () {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    };\n    AreaChartStackedComponent.prototype.onClick = function (data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    };\n    AreaChartStackedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    AreaChartStackedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    AreaChartStackedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    AreaChartStackedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    AreaChartStackedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    AreaChartStackedComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartStackedComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    AreaChartStackedComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartStackedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartStackedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"timeline\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartStackedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AreaChartStackedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartStackedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartStackedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartStackedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaChartStackedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaChartStackedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"xScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaChartStackedComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartStackedComponent.prototype, \"yScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AreaChartStackedComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], AreaChartStackedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], AreaChartStackedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], AreaChartStackedComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ContentChild('seriesTooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _d : Object)\n    ], AreaChartStackedComponent.prototype, \"seriesTooltipTemplate\", void 0);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AreaChartStackedComponent.prototype, \"hideCircles\", null);\n    AreaChartStackedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-area-chart-stacked',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              stacked=\\\"true\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                type=\\\"stacked\\\"\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            stacked=\\\"true\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], AreaChartStackedComponent);\n    return AreaChartStackedComponent;\n}(BaseChartComponent));\n\nvar AreaSeriesComponent = /** @class */ (function () {\n    function AreaSeriesComponent() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    AreaSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    AreaSeriesComponent.prototype.update = function () {\n        var _this = this;\n        this.updateGradient();\n        var currentArea;\n        var startingArea;\n        var xProperty = function (d) {\n            var label = d.name;\n            return _this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0(function (d, i) { return _this.yScale(d.d0); })\n                .y1(function (d, i) { return _this.yScale(d.d1); });\n            startingArea = area()\n                .x(xProperty)\n                .y0(function (d) { return _this.yScale.range()[0]; })\n                .y1(function (d) { return _this.yScale.range()[0]; });\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(function () { return _this.baseValue === 'auto' ? _this.yScale.range()[0] : _this.yScale(_this.baseValue); })\n                .y1(function (d) { return _this.yScale(d.value); });\n            startingArea = area()\n                .x(xProperty)\n                .y0(function (d) { return _this.baseValue === 'auto' ? _this.yScale.range()[0] : _this.yScale(_this.baseValue); })\n                .y1(function (d) { return _this.baseValue === 'auto' ? _this.yScale.range()[0] : _this.yScale(_this.baseValue); });\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = .8;\n        var data = this.data.series;\n        if (this.scaleType === 'linear') {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === 'time') {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    };\n    AreaSeriesComponent.prototype.updateGradient = function () {\n        if (this.colors.scaleType === 'linear') {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                var d0values = this.data.series.map(function (d) { return d.d0; });\n                var d1values = this.data.series.map(function (d) { return d.d1; });\n                var max$$1 = Math.max.apply(Math, d1values);\n                var min$$1 = Math.min.apply(Math, d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max$$1, min$$1);\n            }\n            else {\n                var values = this.data.series.map(function (d) { return d.value; });\n                var max$$1 = Math.max.apply(Math, values);\n                this.gradientStops = this.colors.getLinearGradientStops(max$$1);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    };\n    AreaSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    AreaSeriesComponent.prototype.isInactive = function (entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"baseValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaSeriesComponent.prototype, \"stacked\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaSeriesComponent.prototype, \"normalized\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AreaSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AreaSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], AreaSeriesComponent.prototype, \"select\", void 0);\n    AreaSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-area-series]',\n            template: \"\\n    <svg:g ngx-charts-area\\n      class=\\\"area-series\\\"\\n      [data]=\\\"data\\\"\\n      [path]=\\\"path\\\"\\n      [fill]=\\\"colors.getColor(data.name)\\\"\\n      [stops]=\\\"gradientStops\\\"\\n      [startingPath]=\\\"startingPath\\\"\\n      [opacity]=\\\"opacity\\\"\\n      [gradient]=\\\"gradient || hasGradient\\\"\\n      [animations]=\\\"animations\\\"\\n      [class.active]=\\\"isActive(data)\\\"\\n      [class.inactive]=\\\"isInactive(data)\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], AreaSeriesComponent);\n    return AreaSeriesComponent;\n}());\n\nvar AreaChartModule = /** @class */ (function () {\n    function AreaChartModule() {\n    }\n    AreaChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                AreaChartComponent,\n                AreaChartNormalizedComponent,\n                AreaChartStackedComponent,\n                AreaSeriesComponent\n            ],\n            exports: [\n                AreaChartComponent,\n                AreaChartNormalizedComponent,\n                AreaChartStackedComponent,\n                AreaSeriesComponent\n            ]\n        })\n    ], AreaChartModule);\n    return AreaChartModule;\n}());\n\nvar BarComponent = /** @class */ (function () {\n    function BarComponent(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    BarComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    };\n    BarComponent.prototype.update = function () {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = \"url(#\" + this.gradientId + \")\";\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    };\n    BarComponent.prototype.loadAnimation = function () {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    };\n    BarComponent.prototype.updatePathEl = function () {\n        var node = select(this.element).select('.bar');\n        var path = this.getPath();\n        if (this.animations) {\n            node\n                .transition()\n                .duration(500)\n                .attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    };\n    BarComponent.prototype.getGradient = function () {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    };\n    BarComponent.prototype.getStartingPath = function () {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        var radius = this.getRadius();\n        var path;\n        if (this.roundEdges) {\n            if (this.orientation === 'vertical') {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === 'horizontal') {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === 'vertical') {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === 'horizontal') {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    };\n    BarComponent.prototype.getPath = function () {\n        var radius = this.getRadius();\n        var path;\n        if (this.roundEdges) {\n            if (this.orientation === 'vertical') {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === 'horizontal') {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    };\n    BarComponent.prototype.getRadius = function () {\n        var radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    };\n    BarComponent.prototype.getStartOpacity = function () {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    };\n    Object.defineProperty(BarComponent.prototype, \"edges\", {\n        get: function () {\n            var edges = [false, false, false, false];\n            if (this.roundEdges) {\n                if (this.orientation === 'vertical') {\n                    if (this.data.value > 0) {\n                        edges = [true, true, false, false];\n                    }\n                    else {\n                        edges = [false, false, true, true];\n                    }\n                }\n                else if (this.orientation === 'horizontal') {\n                    if (this.data.value > 0) {\n                        edges = [false, true, false, true];\n                    }\n                    else {\n                        edges = [true, false, true, false];\n                    }\n                }\n            }\n            return edges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BarComponent.prototype.onMouseEnter = function () {\n        this.activate.emit(this.data);\n    };\n    BarComponent.prototype.onMouseLeave = function () {\n        this.deactivate.emit(this.data);\n    };\n    BarComponent.prototype.checkToHideBar = function () {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === 'vertical' && this.height === 0) ||\n                    (this.orientation === 'horizontal' && this.width === 0));\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarComponent.prototype, \"x\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarComponent.prototype, \"y\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"orientation\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"offset\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarComponent.prototype, \"isActive\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarComponent.prototype, \"stops\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarComponent.prototype, \"ariaLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BarComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        HostListener('mouseenter'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BarComponent.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BarComponent.prototype, \"onMouseLeave\", null);\n    BarComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-bar]',\n            template: \"\\n    <svg:defs *ngIf=\\\"hasGradient\\\">\\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\\\"orientation\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n    </svg:defs>\\n    <svg:path\\n      class=\\\"bar\\\"\\n      stroke=\\\"none\\\"\\n      role=\\\"img\\\"\\n      tabIndex=\\\"-1\\\"\\n      [class.active]=\\\"isActive\\\"\\n      [class.hidden]=\\\"hideBar\\\"\\n      [attr.d]=\\\"path\\\"\\n      [attr.aria-label]=\\\"ariaLabel\\\"\\n      [attr.fill]=\\\"hasGradient ? gradientFill : fill\\\"\\n      (click)=\\\"select.emit(data)\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], BarComponent);\n    return BarComponent;\n}());\n\nvar BarHorizontalComponent = /** @class */ (function (_super) {\n    __extends(BarHorizontalComponent, _super);\n    function BarHorizontalComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.roundEdges = true;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarHorizontalComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    BarHorizontalComponent.prototype.getXScale = function () {\n        this.xDomain = this.getXDomain();\n        var scale = scaleLinear()\n            .range([0, this.dims.width])\n            .domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarHorizontalComponent.prototype.getYScale = function () {\n        this.yDomain = this.getYDomain();\n        var spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .domain(this.yDomain);\n    };\n    BarHorizontalComponent.prototype.getXDomain = function () {\n        var values = this.results.map(function (d) { return d.value; });\n        var min$$1 = this.xScaleMin ? Math.min.apply(Math, [this.xScaleMin].concat(values)) : Math.min.apply(Math, [0].concat(values));\n        var max$$1 = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(values)) : Math.max.apply(Math, [0].concat(values));\n        return [min$$1, max$$1];\n    };\n    BarHorizontalComponent.prototype.getYDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    BarHorizontalComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    BarHorizontalComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarHorizontalComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarHorizontalComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarHorizontalComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarHorizontalComponent.prototype.onDataLabelMaxWidthChanged = function (event$$1) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event$$1.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event$$1.size.width);\n        }\n        if (event$$1.index === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarHorizontalComponent.prototype.onActivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarHorizontalComponent.prototype.onDeactivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalComponent.prototype, \"xScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarHorizontalComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarHorizontalComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarHorizontalComponent.prototype, \"tooltipTemplate\", void 0);\n    BarHorizontalComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-horizontal',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-horizontal\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n          (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event)\\\"\\n        ></svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], BarHorizontalComponent);\n    return BarHorizontalComponent;\n}(BaseChartComponent));\n\nvar BarHorizontal2DComponent = /** @class */ (function (_super) {\n    __extends(BarHorizontal2DComponent, _super);\n    function BarHorizontal2DComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.groupPadding = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.roundEdges = true;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarHorizontal2DComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valuesDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    BarHorizontal2DComponent.prototype.getGroupScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    };\n    BarHorizontal2DComponent.prototype.getInnerScale = function () {\n        var height = this.groupScale.bandwidth();\n        var spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, height])\n            .paddingInner(spacing)\n            .domain(this.innerDomain);\n    };\n    BarHorizontal2DComponent.prototype.getValueScale = function () {\n        var scale = scaleLinear()\n            .range([0, this.dims.width])\n            .domain(this.valuesDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarHorizontal2DComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarHorizontal2DComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarHorizontal2DComponent.prototype.getValueDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        var min$$1 = Math.min.apply(Math, [0].concat(domain));\n        var max$$1 = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(domain)) : Math.max.apply(Math, [0].concat(domain));\n        return [min$$1, max$$1];\n    };\n    BarHorizontal2DComponent.prototype.groupTransform = function (group) {\n        return \"translate(0, \" + this.groupScale(group.label) + \")\";\n    };\n    BarHorizontal2DComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarHorizontal2DComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarHorizontal2DComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valuesDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarHorizontal2DComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valuesDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarHorizontal2DComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarHorizontal2DComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarHorizontal2DComponent.prototype.onDataLabelMaxWidthChanged = function (event$$1, groupIndex) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event$$1.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event$$1.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarHorizontal2DComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarHorizontal2DComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontal2DComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontal2DComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontal2DComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontal2DComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontal2DComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontal2DComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontal2DComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontal2DComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"groupPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontal2DComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontal2DComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontal2DComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarHorizontal2DComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarHorizontal2DComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarHorizontal2DComponent.prototype, \"tooltipTemplate\", void 0);\n    BarHorizontal2DComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-horizontal-2d',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-grid-panel-series\\n          [xScale]=\\\"valueScale\\\"\\n          [yScale]=\\\"groupScale\\\"\\n          [data]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          orient=\\\"horizontal\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"valueScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"groupScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            [xScale]=\\\"valueScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [yScale]=\\\"innerScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [roundEdges]=\\\"roundEdges\\\"\\n            [animations]=\\\"animations\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarHorizontal2DComponent);\n    return BarHorizontal2DComponent;\n}(BaseChartComponent));\n\nvar BarHorizontalNormalizedComponent = /** @class */ (function (_super) {\n    __extends(BarHorizontalNormalizedComponent, _super);\n    function BarHorizontalNormalizedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        return _this;\n    }\n    BarHorizontalNormalizedComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    BarHorizontalNormalizedComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarHorizontalNormalizedComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarHorizontalNormalizedComponent.prototype.getValueDomain = function () {\n        return [0, 100];\n    };\n    BarHorizontalNormalizedComponent.prototype.getYScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .domain(this.groupDomain);\n    };\n    BarHorizontalNormalizedComponent.prototype.getXScale = function () {\n        var scale = scaleLinear()\n            .range([0, this.dims.width])\n            .domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarHorizontalNormalizedComponent.prototype.groupTransform = function (group) {\n        return \"translate(0, \" + this.yScale(group.name) + \")\";\n    };\n    BarHorizontalNormalizedComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarHorizontalNormalizedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarHorizontalNormalizedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarHorizontalNormalizedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarHorizontalNormalizedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarHorizontalNormalizedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarHorizontalNormalizedComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarHorizontalNormalizedComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalNormalizedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalNormalizedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalNormalizedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalNormalizedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalNormalizedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalNormalizedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalNormalizedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalNormalizedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalNormalizedComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarHorizontalNormalizedComponent.prototype, \"tooltipTemplate\", void 0);\n    BarHorizontalNormalizedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-horizontal-normalized',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            type=\\\"normalized\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarHorizontalNormalizedComponent);\n    return BarHorizontalNormalizedComponent;\n}(BaseChartComponent));\n\nvar BarHorizontalStackedComponent = /** @class */ (function (_super) {\n    __extends(BarHorizontalStackedComponent, _super);\n    function BarHorizontalStackedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarHorizontalStackedComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    BarHorizontalStackedComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarHorizontalStackedComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarHorizontalStackedComponent.prototype.getValueDomain = function () {\n        var domain = [];\n        var smallest = 0;\n        var biggest = 0;\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            var smallestSum = 0;\n            var biggestSum = 0;\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        var min$$1 = Math.min.apply(Math, [0].concat(domain));\n        var max$$1 = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(domain)) : Math.max.apply(Math, domain);\n        return [min$$1, max$$1];\n    };\n    BarHorizontalStackedComponent.prototype.getYScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .domain(this.groupDomain);\n    };\n    BarHorizontalStackedComponent.prototype.getXScale = function () {\n        var scale = scaleLinear()\n            .range([0, this.dims.width])\n            .domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarHorizontalStackedComponent.prototype.groupTransform = function (group) {\n        return \"translate(0, \" + this.yScale(group.name) + \")\";\n    };\n    BarHorizontalStackedComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarHorizontalStackedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarHorizontalStackedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarHorizontalStackedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarHorizontalStackedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarHorizontalStackedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarHorizontalStackedComponent.prototype.onDataLabelMaxWidthChanged = function (event$$1, groupIndex) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event$$1.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event$$1.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarHorizontalStackedComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarHorizontalStackedComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalStackedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalStackedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalStackedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarHorizontalStackedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalStackedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalStackedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalStackedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarHorizontalStackedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarHorizontalStackedComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarHorizontalStackedComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarHorizontalStackedComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarHorizontalStackedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarHorizontalStackedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarHorizontalStackedComponent.prototype, \"tooltipTemplate\", void 0);\n    BarHorizontalStackedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-horizontal-stacked',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            type=\\\"stacked\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarHorizontalStackedComponent);\n    return BarHorizontalStackedComponent;\n}(BaseChartComponent));\n\nvar BarVerticalComponent = /** @class */ (function (_super) {\n    __extends(BarVerticalComponent, _super);\n    function BarVerticalComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.roundEdges = true;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarVerticalComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + (this.margin[0] + this.dataLabelMaxHeight.negative) + \")\";\n    };\n    BarVerticalComponent.prototype.getXScale = function () {\n        this.xDomain = this.getXDomain();\n        var spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand()\n            .range([0, this.dims.width])\n            .paddingInner(spacing)\n            .domain(this.xDomain);\n    };\n    BarVerticalComponent.prototype.getYScale = function () {\n        this.yDomain = this.getYDomain();\n        var scale = scaleLinear()\n            .range([this.dims.height, 0])\n            .domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarVerticalComponent.prototype.getXDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    BarVerticalComponent.prototype.getYDomain = function () {\n        var values = this.results.map(function (d) { return d.value; });\n        var min$$1 = this.yScaleMin ? Math.min.apply(Math, [this.yScaleMin].concat(values)) : Math.min.apply(Math, [0].concat(values));\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min$$1 = Math.min.apply(Math, [min$$1].concat(this.yAxisTicks));\n        }\n        var max$$1 = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(values)) : Math.max.apply(Math, [0].concat(values));\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max$$1 = Math.max.apply(Math, [max$$1].concat(this.yAxisTicks));\n        }\n        return [min$$1, max$$1];\n    };\n    BarVerticalComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    BarVerticalComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarVerticalComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarVerticalComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarVerticalComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarVerticalComponent.prototype.onDataLabelMaxHeightChanged = function (event$$1) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event$$1.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event$$1.size.height);\n        }\n        if (event$$1.index === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarVerticalComponent.prototype.onActivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarVerticalComponent.prototype.onDeactivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalComponent.prototype, \"yScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarVerticalComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarVerticalComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarVerticalComponent.prototype, \"tooltipTemplate\", void 0);\n    BarVerticalComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-vertical',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-vertical\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event)\\\"\\n        ></svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], BarVerticalComponent);\n    return BarVerticalComponent;\n}(BaseChartComponent));\n\nvar BarVertical2DComponent = /** @class */ (function (_super) {\n    __extends(BarVertical2DComponent, _super);\n    function BarVertical2DComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.scaleType = 'ordinal';\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.groupPadding = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.roundEdges = true;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarVertical2DComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valuesDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + (this.margin[0] + this.dataLabelMaxHeight.negative) + \")\";\n    };\n    BarVertical2DComponent.prototype.onDataLabelMaxHeightChanged = function (event$$1, groupIndex) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event$$1.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event$$1.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarVertical2DComponent.prototype.getGroupScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    };\n    BarVertical2DComponent.prototype.getInnerScale = function () {\n        var width = this.groupScale.bandwidth();\n        var spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, width])\n            .paddingInner(spacing)\n            .domain(this.innerDomain);\n    };\n    BarVertical2DComponent.prototype.getValueScale = function () {\n        var scale = scaleLinear()\n            .range([this.dims.height, 0])\n            .domain(this.valuesDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarVertical2DComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarVertical2DComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarVertical2DComponent.prototype.getValueDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        var min$$1 = Math.min.apply(Math, [0].concat(domain));\n        var max$$1 = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(domain)) : Math.max.apply(Math, [0].concat(domain));\n        return [min$$1, max$$1];\n    };\n    BarVertical2DComponent.prototype.groupTransform = function (group) {\n        return \"translate(\" + this.groupScale(group.label) + \", 0)\";\n    };\n    BarVertical2DComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarVertical2DComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarVertical2DComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valuesDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarVertical2DComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valuesDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarVertical2DComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarVertical2DComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarVertical2DComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarVertical2DComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVertical2DComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVertical2DComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVertical2DComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVertical2DComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVertical2DComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVertical2DComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVertical2DComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVertical2DComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"groupPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVertical2DComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVertical2DComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVertical2DComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarVertical2DComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarVertical2DComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarVertical2DComponent.prototype, \"tooltipTemplate\", void 0);\n    BarVertical2DComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-vertical-2d',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-grid-panel-series\\n          [xScale]=\\\"groupScale\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [data]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          orient=\\\"vertical\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"groupScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-vertical\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [xScale]=\\\"innerScale\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"group.series\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [seriesName]=\\\"group.name\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (select)=\\\"onClick($event, group)\\\"\\n          (activate)=\\\"onActivate($event, group)\\\"\\n          (deactivate)=\\\"onDeactivate($event, group)\\\"\\n          (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event, index)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarVertical2DComponent);\n    return BarVertical2DComponent;\n}(BaseChartComponent));\n\nvar BarVerticalNormalizedComponent = /** @class */ (function (_super) {\n    __extends(BarVerticalNormalizedComponent, _super);\n    function BarVerticalNormalizedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        return _this;\n    }\n    BarVerticalNormalizedComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    BarVerticalNormalizedComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarVerticalNormalizedComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarVerticalNormalizedComponent.prototype.getValueDomain = function () {\n        return [0, 100];\n    };\n    BarVerticalNormalizedComponent.prototype.getXScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .domain(this.groupDomain);\n    };\n    BarVerticalNormalizedComponent.prototype.getYScale = function () {\n        var scale = scaleLinear()\n            .range([this.dims.height, 0])\n            .domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarVerticalNormalizedComponent.prototype.groupTransform = function (group) {\n        return \"translate(\" + this.xScale(group.name) + \", 0)\";\n    };\n    BarVerticalNormalizedComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarVerticalNormalizedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarVerticalNormalizedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarVerticalNormalizedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarVerticalNormalizedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarVerticalNormalizedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarVerticalNormalizedComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarVerticalNormalizedComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalNormalizedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalNormalizedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalNormalizedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalNormalizedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalNormalizedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalNormalizedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalNormalizedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalNormalizedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalNormalizedComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalNormalizedComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarVerticalNormalizedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarVerticalNormalizedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarVerticalNormalizedComponent.prototype, \"tooltipTemplate\", void 0);\n    BarVerticalNormalizedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-vertical-normalized',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-vertical\\n            type=\\\"normalized\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarVerticalNormalizedComponent);\n    return BarVerticalNormalizedComponent;\n}(BaseChartComponent));\n\nvar BarVerticalStackedComponent = /** @class */ (function (_super) {\n    __extends(BarVerticalStackedComponent, _super);\n    function BarVerticalStackedComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.tooltipDisabled = false;\n        _this.showGridLines = true;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.barPadding = 8;\n        _this.roundDomains = false;\n        _this.showDataLabel = false;\n        _this.noBarWhenZero = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        return _this;\n    }\n    BarVerticalStackedComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + (this.margin[0] + this.dataLabelMaxHeight.negative) + \")\";\n    };\n    BarVerticalStackedComponent.prototype.getGroupDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    };\n    BarVerticalStackedComponent.prototype.getInnerDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    };\n    BarVerticalStackedComponent.prototype.getValueDomain = function () {\n        var domain = [];\n        var smallest = 0;\n        var biggest = 0;\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            var smallestSum = 0;\n            var biggestSum = 0;\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        var min$$1 = Math.min.apply(Math, [0].concat(domain));\n        var max$$1 = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(domain)) : Math.max.apply(Math, domain);\n        return [min$$1, max$$1];\n    };\n    BarVerticalStackedComponent.prototype.getXScale = function () {\n        var spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .domain(this.groupDomain);\n    };\n    BarVerticalStackedComponent.prototype.getYScale = function () {\n        var scale = scaleLinear()\n            .range([this.dims.height, 0])\n            .domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BarVerticalStackedComponent.prototype.onDataLabelMaxHeightChanged = function (event$$1, groupIndex) {\n        var _this = this;\n        if (event$$1.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event$$1.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event$$1.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(function () { return _this.update(); });\n        }\n    };\n    BarVerticalStackedComponent.prototype.groupTransform = function (group) {\n        return \"translate(\" + (this.xScale(group.name) || 0) + \", 0)\";\n    };\n    BarVerticalStackedComponent.prototype.onClick = function (data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    };\n    BarVerticalStackedComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    BarVerticalStackedComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    BarVerticalStackedComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BarVerticalStackedComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BarVerticalStackedComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BarVerticalStackedComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BarVerticalStackedComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalStackedComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalStackedComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalStackedComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BarVerticalStackedComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalStackedComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalStackedComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalStackedComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BarVerticalStackedComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"barPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BarVerticalStackedComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarVerticalStackedComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BarVerticalStackedComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarVerticalStackedComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BarVerticalStackedComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BarVerticalStackedComponent.prototype, \"tooltipTemplate\", void 0);\n    BarVerticalStackedComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bar-vertical-stacked',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-vertical\\n            type=\\\"stacked\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1,\n                            transform: '*'\n                        }),\n                        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BarVerticalStackedComponent);\n    return BarVerticalStackedComponent;\n}(BaseChartComponent));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\nvar SeriesVerticalComponent = /** @class */ (function () {\n    function SeriesVerticalComponent() {\n        this.type = 'standard';\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n    }\n    SeriesVerticalComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    SeriesVerticalComponent.prototype.update = function () {\n        var _this = this;\n        var _a;\n        this.updateTooltipSettings();\n        var width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        var yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        var d0 = (_a = {},\n            _a[D0Types.positive] = 0,\n            _a[D0Types.negative] = 0,\n            _a);\n        var d0Type = D0Types.positive;\n        var total;\n        if (this.type === 'normalized') {\n            total = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return sum + d; }, 0);\n        }\n        this.bars = this.series.map(function (d, index) {\n            var value = d.value;\n            var label = _this.getLabel(d);\n            var formattedLabel = formatLabel(label);\n            var roundEdges = _this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            var bar = {\n                value: value,\n                label: label,\n                roundEdges: roundEdges,\n                data: d,\n                width: width,\n                formattedLabel: formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (_this.type === 'standard') {\n                bar.height = Math.abs(_this.yScale(value) - _this.yScale(yScaleMin));\n                bar.x = _this.xScale(label);\n                if (value < 0) {\n                    bar.y = _this.yScale(0);\n                }\n                else {\n                    bar.y = _this.yScale(value);\n                }\n            }\n            else if (_this.type === 'stacked') {\n                var offset0 = d0[d0Type];\n                var offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = _this.yScale(offset0) - _this.yScale(offset1);\n                bar.x = 0;\n                bar.y = _this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (_this.type === 'normalized') {\n                var offset0 = d0[d0Type];\n                var offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = _this.yScale(offset0) - _this.yScale(offset1);\n                bar.x = 0;\n                bar.y = _this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (_this.colors.scaleType === 'ordinal') {\n                bar.color = _this.colors.getColor(label);\n            }\n            else {\n                if (_this.type === 'standard') {\n                    bar.color = _this.colors.getColor(value);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = _this.colors.getColor(bar.offset1);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            var tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (_this.seriesName) {\n                tooltipLabel = _this.seriesName + \" \\u2022 \" + formattedLabel;\n                bar.data.series = _this.seriesName;\n                bar.ariaLabel = _this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = _this.tooltipDisabled\n                ? undefined\n                : \"\\n        <span class=\\\"tooltip-label\\\">\" + escapeLabel(tooltipLabel) + \"</span>\\n        <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n      \";\n            return bar;\n        });\n        this.updateDataLabels();\n    };\n    SeriesVerticalComponent.prototype.updateDataLabels = function () {\n        var _this = this;\n        if (this.type === 'stacked') {\n            this.barsForDataLabels = [];\n            var section = {};\n            section.series = this.seriesName;\n            var totalPositive = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return (d > 0 ? sum + d : sum); }, 0);\n            var totalNegative = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return (d < 0 ? sum + d : sum); }, 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(function (d) {\n                var section = {};\n                section.series = _this.seriesName ? _this.seriesName : d.label;\n                section.total = d.value;\n                section.x = _this.xScale(d.label);\n                section.y = _this.yScale(0);\n                section.height = _this.yScale(section.total) - _this.yScale(0);\n                section.width = _this.xScale.bandwidth();\n                return section;\n            });\n        }\n    };\n    SeriesVerticalComponent.prototype.updateTooltipSettings = function () {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n        this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    };\n    SeriesVerticalComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    };\n    SeriesVerticalComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    SeriesVerticalComponent.prototype.getLabel = function (dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    };\n    SeriesVerticalComponent.prototype.trackBy = function (index, bar) {\n        return bar.label;\n    };\n    SeriesVerticalComponent.prototype.trackDataLabelBy = function (index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"series\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], SeriesVerticalComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SeriesVerticalComponent.prototype, \"seriesName\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], SeriesVerticalComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesVerticalComponent.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesVerticalComponent.prototype, \"dataLabelHeightChanged\", void 0);\n    SeriesVerticalComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-series-vertical]',\n            template: \"\\n    <svg:g\\n      ngx-charts-bar\\n      *ngFor=\\\"let bar of bars; trackBy: trackBy\\\"\\n      [@animationState]=\\\"'active'\\\"\\n      [@.disabled]=\\\"!animations\\\"\\n      [width]=\\\"bar.width\\\"\\n      [height]=\\\"bar.height\\\"\\n      [x]=\\\"bar.x\\\"\\n      [y]=\\\"bar.y\\\"\\n      [fill]=\\\"bar.color\\\"\\n      [stops]=\\\"bar.gradientStops\\\"\\n      [data]=\\\"bar.data\\\"\\n      [orientation]=\\\"'vertical'\\\"\\n      [roundEdges]=\\\"bar.roundEdges\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [ariaLabel]=\\\"bar.ariaLabel\\\"\\n      [isActive]=\\\"isActive(bar.data)\\\"\\n      (select)=\\\"onClick($event)\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n      [tooltipType]=\\\"tooltipType\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : bar.tooltipText\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"bar.data\\\"\\n      [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n      [animations]=\\\"animations\\\"\\n    ></svg:g>\\n    <svg:g *ngIf=\\\"showDataLabel\\\">\\n      <svg:g\\n        ngx-charts-bar-label\\n        *ngFor=\\\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\\\"\\n        [barX]=\\\"b.x\\\"\\n        [barY]=\\\"b.y\\\"\\n        [barWidth]=\\\"b.width\\\"\\n        [barHeight]=\\\"b.height\\\"\\n        [value]=\\\"b.total\\\"\\n        [valueFormatting]=\\\"dataLabelFormatting\\\"\\n        [orientation]=\\\"'vertical'\\\"\\n        (dimensionsChanged)=\\\"dataLabelHeightChanged.emit({ size: $event, index: i })\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1\n                        }),\n                        animate(500, style({ opacity: 0 }))\n                    ])\n                ])\n            ]\n        })\n    ], SeriesVerticalComponent);\n    return SeriesVerticalComponent;\n}());\n\nvar SeriesHorizontal = /** @class */ (function () {\n    function SeriesHorizontal() {\n        this.barsForDataLabels = [];\n        this.type = 'standard';\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n    }\n    SeriesHorizontal.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    SeriesHorizontal.prototype.update = function () {\n        var _this = this;\n        var _a;\n        this.updateTooltipSettings();\n        var d0 = (_a = {},\n            _a[D0Types.positive] = 0,\n            _a[D0Types.negative] = 0,\n            _a);\n        var d0Type;\n        d0Type = D0Types.positive;\n        var total;\n        if (this.type === 'normalized') {\n            total = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return sum + d; }, 0);\n        }\n        var xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(function (d, index) {\n            var value = d.value;\n            var label = _this.getLabel(d);\n            var formattedLabel = formatLabel(label);\n            var roundEdges = _this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            var bar = {\n                value: value,\n                label: label,\n                roundEdges: roundEdges,\n                data: d,\n                formattedLabel: formattedLabel\n            };\n            bar.height = _this.yScale.bandwidth();\n            if (_this.type === 'standard') {\n                bar.width = Math.abs(_this.xScale(value) - _this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = _this.xScale(value);\n                }\n                else {\n                    bar.x = _this.xScale(xScaleMin);\n                }\n                bar.y = _this.yScale(label);\n            }\n            else if (_this.type === 'stacked') {\n                var offset0 = d0[d0Type];\n                var offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = _this.xScale(offset1) - _this.xScale(offset0);\n                bar.x = _this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (_this.type === 'normalized') {\n                var offset0 = d0[d0Type];\n                var offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = _this.xScale(offset1) - _this.xScale(offset0);\n                bar.x = _this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (_this.colors.scaleType === 'ordinal') {\n                bar.color = _this.colors.getColor(label);\n            }\n            else {\n                if (_this.type === 'standard') {\n                    bar.color = _this.colors.getColor(value);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = _this.colors.getColor(bar.offset1);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            var tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (_this.seriesName) {\n                tooltipLabel = _this.seriesName + \" \\u2022 \" + formattedLabel;\n                bar.data.series = _this.seriesName;\n                bar.ariaLabel = _this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = _this.tooltipDisabled\n                ? undefined\n                : \"\\n        <span class=\\\"tooltip-label\\\">\" + escapeLabel(tooltipLabel) + \"</span>\\n        <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n      \";\n            return bar;\n        });\n        this.updateDataLabels();\n    };\n    SeriesHorizontal.prototype.updateDataLabels = function () {\n        var _this = this;\n        if (this.type === 'stacked') {\n            this.barsForDataLabels = [];\n            var section = {};\n            section.series = this.seriesName;\n            var totalPositive = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return (d > 0 ? sum + d : sum); }, 0);\n            var totalNegative = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return (d < 0 ? sum + d : sum); }, 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(function (d) {\n                var section = {};\n                section.series = _this.seriesName ? _this.seriesName : d.label;\n                section.total = d.value;\n                section.x = _this.xScale(0);\n                section.y = _this.yScale(d.label);\n                section.width = _this.xScale(section.total) - _this.xScale(0);\n                section.height = _this.yScale.bandwidth();\n                return section;\n            });\n        }\n    };\n    SeriesHorizontal.prototype.updateTooltipSettings = function () {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n        this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    };\n    SeriesHorizontal.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    };\n    SeriesHorizontal.prototype.getLabel = function (dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    };\n    SeriesHorizontal.prototype.trackBy = function (index, bar) {\n        return bar.label;\n    };\n    SeriesHorizontal.prototype.trackDataLabelBy = function (index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    };\n    SeriesHorizontal.prototype.click = function (data) {\n        this.select.emit(data);\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"type\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"series\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], SeriesHorizontal.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SeriesHorizontal.prototype, \"seriesName\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], SeriesHorizontal.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"roundEdges\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"animations\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"showDataLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"dataLabelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SeriesHorizontal.prototype, \"noBarWhenZero\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"deactivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], SeriesHorizontal.prototype, \"dataLabelWidthChanged\", void 0);\n    SeriesHorizontal = __decorate([\n        Component({\n            selector: 'g[ngx-charts-series-horizontal]',\n            template: \"\\n    <svg:g\\n      ngx-charts-bar\\n      *ngFor=\\\"let bar of bars; trackBy: trackBy\\\"\\n      [@animationState]=\\\"'active'\\\"\\n      [width]=\\\"bar.width\\\"\\n      [height]=\\\"bar.height\\\"\\n      [x]=\\\"bar.x\\\"\\n      [y]=\\\"bar.y\\\"\\n      [fill]=\\\"bar.color\\\"\\n      [stops]=\\\"bar.gradientStops\\\"\\n      [data]=\\\"bar.data\\\"\\n      [orientation]=\\\"'horizontal'\\\"\\n      [roundEdges]=\\\"bar.roundEdges\\\"\\n      (select)=\\\"click($event)\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [isActive]=\\\"isActive(bar.data)\\\"\\n      [ariaLabel]=\\\"bar.ariaLabel\\\"\\n      [animations]=\\\"animations\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n      [tooltipType]=\\\"tooltipType\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : bar.tooltipText\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"bar.data\\\"\\n      [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n    ></svg:g>\\n    <svg:g *ngIf=\\\"showDataLabel\\\">\\n      <svg:g\\n        ngx-charts-bar-label\\n        *ngFor=\\\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\\\"\\n        [barX]=\\\"b.x\\\"\\n        [barY]=\\\"b.y\\\"\\n        [barWidth]=\\\"b.width\\\"\\n        [barHeight]=\\\"b.height\\\"\\n        [value]=\\\"b.total\\\"\\n        [valueFormatting]=\\\"dataLabelFormatting\\\"\\n        [orientation]=\\\"'horizontal'\\\"\\n        (dimensionsChanged)=\\\"dataLabelWidthChanged.emit({ size: $event, index: i })\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1\n                        }),\n                        animate(500, style({ opacity: 0 }))\n                    ])\n                ])\n            ]\n        })\n    ], SeriesHorizontal);\n    return SeriesHorizontal;\n}());\n\nvar BarLabelComponent = /** @class */ (function () {\n    function BarLabelComponent(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    BarLabelComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    BarLabelComponent.prototype.getSize = function () {\n        var h = this.element.getBoundingClientRect().height;\n        var w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    };\n    BarLabelComponent.prototype.ngAfterViewInit = function () {\n        this.dimensionsChanged.emit(this.getSize());\n    };\n    BarLabelComponent.prototype.update = function () {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = \"rotate(-45, \" + this.x + \" , \" + this.y + \")\";\n        }\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"barX\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"barY\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"barWidth\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"barHeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BarLabelComponent.prototype, \"orientation\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BarLabelComponent.prototype, \"dimensionsChanged\", void 0);\n    BarLabelComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-bar-label]',\n            template: \"  \\n    <svg:text   \\n      class=\\\"textDataLabel\\\" \\n      alignment-baseline=\\\"middle\\\"     \\n      [attr.text-anchor]=\\\"textAnchor\\\"\\n      [attr.transform]=\\\"transform\\\"\\n      [attr.x]=\\\"x\\\" \\n      [attr.y]=\\\"y\\\">\\n      {{formatedValue}}     \\n    </svg:text>          \\n\\n  \",\n            styles: [\".textDataLabel{font-size:11px}\"],\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_b = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _b : Object])\n    ], BarLabelComponent);\n    return BarLabelComponent;\n}());\n\nvar BarChartModule = /** @class */ (function () {\n    function BarChartModule() {\n    }\n    BarChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                BarComponent,\n                BarHorizontalComponent,\n                BarHorizontal2DComponent,\n                BarHorizontalNormalizedComponent,\n                BarHorizontalStackedComponent,\n                BarVerticalComponent,\n                BarVertical2DComponent,\n                BarVerticalNormalizedComponent,\n                BarVerticalStackedComponent,\n                BarLabelComponent,\n                SeriesHorizontal,\n                SeriesVerticalComponent\n            ],\n            exports: [\n                BarComponent,\n                BarHorizontalComponent,\n                BarHorizontal2DComponent,\n                BarHorizontalNormalizedComponent,\n                BarHorizontalStackedComponent,\n                BarVerticalComponent,\n                BarVertical2DComponent,\n                BarVerticalNormalizedComponent,\n                BarVerticalStackedComponent,\n                BarLabelComponent,\n                SeriesHorizontal,\n                SeriesVerticalComponent\n            ]\n        })\n    ], BarChartModule);\n    return BarChartModule;\n}());\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    var domain = [];\n    if (scaleType === 'linear') {\n        values = values.map(function (v) { return Number(v); });\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === 'time' || scaleType === 'linear') {\n        var min$$1 = minVal ? minVal : Math.min.apply(Math, values);\n        var max$$1 = maxVal ? maxVal : Math.max.apply(Math, values);\n        domain = [min$$1, max$$1];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range$$1, scaleType, roundDomains) {\n    var scale;\n    if (scaleType === 'time') {\n        scale = scaleTime()\n            .range(range$$1)\n            .domain(domain);\n    }\n    else if (scaleType === 'linear') {\n        scale = scaleLinear()\n            .range(range$$1)\n            .domain(domain);\n        if (roundDomains) {\n            scale = scale.nice();\n        }\n    }\n    else if (scaleType === 'ordinal') {\n        scale = scalePoint()\n            .range([range$$1[0], range$$1[1]])\n            .domain(domain);\n    }\n    return scale;\n}\n\nvar BubbleChartComponent = /** @class */ (function (_super) {\n    __extends(BubbleChartComponent, _super);\n    function BubbleChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.showGridLines = true;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.xAxis = true;\n        _this.yAxis = true;\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.maxRadius = 10;\n        _this.minRadius = 3;\n        _this.schemeType = 'ordinal';\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.scaleType = 'linear';\n        _this.margin = [10, 20, 10, 20];\n        _this.bubblePadding = [0, 0, 0, 0];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.activeEntries = [];\n        return _this;\n    }\n    BubbleChartComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(function (d) { return d.name; });\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = \"translate(\" + this.dims.xOffset + \",\" + this.margin[0] + \")\";\n        var colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = \"url(#\" + this.clipPathId + \")\";\n    };\n    BubbleChartComponent.prototype.hideCircles = function () {\n        this.deactivateAll();\n    };\n    BubbleChartComponent.prototype.onClick = function (data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    };\n    BubbleChartComponent.prototype.getBubblePadding = function () {\n        var yMin = 0;\n        var xMin = 0;\n        var yMax = this.dims.height;\n        var xMax = this.dims.width;\n        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {\n            var s = _a[_i];\n            for (var _b = 0, _c = s.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                var r = this.rScale(d.r);\n                var cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                var cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    };\n    BubbleChartComponent.prototype.setScales = function () {\n        var width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        var height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    };\n    BubbleChartComponent.prototype.getYScale = function (domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    };\n    BubbleChartComponent.prototype.getXScale = function (domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    };\n    BubbleChartComponent.prototype.getRScale = function (domain, range$$1) {\n        var scale = scaleLinear()\n            .range(range$$1)\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    BubbleChartComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    BubbleChartComponent.prototype.getXDomain = function () {\n        var values = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    };\n    BubbleChartComponent.prototype.getYDomain = function () {\n        var values = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    };\n    BubbleChartComponent.prototype.getRDomain = function () {\n        var min$$1 = Infinity;\n        var max$$1 = -Infinity;\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                var value = Number(d.r) || 1;\n                min$$1 = Math.min(min$$1, value);\n                max$$1 = Math.max(max$$1, value);\n            }\n        }\n        return [min$$1, max$$1];\n    };\n    BubbleChartComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    BubbleChartComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    BubbleChartComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    BubbleChartComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    BubbleChartComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    BubbleChartComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleChartComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleChartComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleChartComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleChartComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BubbleChartComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], BubbleChartComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BubbleChartComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BubbleChartComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"maxRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"minRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"autoScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"xScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"yScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleChartComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], BubbleChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], BubbleChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], BubbleChartComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BubbleChartComponent.prototype, \"hideCircles\", null);\n    BubbleChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-bubble-chart',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bubble-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [dims]=\\\"dims\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        />\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        />\\n        <svg:rect\\n          class=\\\"bubble-chart-area\\\"\\n          x=\\\"0\\\"\\n          y=\\\"0\\\"\\n          [attr.width]=\\\"dims.width\\\"\\n          [attr.height]=\\\"dims.height\\\"\\n          style=\\\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\\\"\\n          (mouseenter)=\\\"deactivateAll()\\\"\\n        />\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of data; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-bubble-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [rScale]=\\\"rScale\\\"\\n              [xScaleType]=\\\"xScaleType\\\"\\n              [yScaleType]=\\\"yScaleType\\\"\\n              [xAxisLabel]=\\\"xAxisLabel\\\"\\n              [yAxisLabel]=\\\"yAxisLabel\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              (select)=\\\"onClick($event, series)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1\n                        }),\n                        animate(500, style({\n                            opacity: 0\n                        }))\n                    ])\n                ])\n            ]\n        })\n    ], BubbleChartComponent);\n    return BubbleChartComponent;\n}(BaseChartComponent));\n\nvar BubbleSeriesComponent = /** @class */ (function () {\n    function BubbleSeriesComponent() {\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    BubbleSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    BubbleSeriesComponent.prototype.update = function () {\n        this.circles = this.getCircles();\n    };\n    BubbleSeriesComponent.prototype.getCircles = function () {\n        var _this = this;\n        var seriesName = this.data.name;\n        return this.data.series\n            .map(function (d, i) {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                var y = d.y;\n                var x = d.x;\n                var r = d.r;\n                var radius = _this.rScale(r || 1);\n                var tooltipLabel = formatLabel(d.name);\n                var cx = _this.xScaleType === 'linear' ? _this.xScale(Number(x)) : _this.xScale(x);\n                var cy = _this.yScaleType === 'linear' ? _this.yScale(Number(y)) : _this.yScale(y);\n                var color = _this.colors.scaleType === 'linear' ? _this.colors.getColor(r) : _this.colors.getColor(seriesName);\n                var isActive = !_this.activeEntries.length ? true : _this.isActive({ name: seriesName });\n                var opacity = isActive ? 1 : 0.3;\n                var data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data: data,\n                    x: x,\n                    y: y,\n                    r: r,\n                    classNames: [\"circle-data-\" + i],\n                    value: y,\n                    label: x,\n                    cx: cx,\n                    cy: cy,\n                    radius: radius,\n                    tooltipLabel: tooltipLabel,\n                    color: color,\n                    opacity: opacity,\n                    seriesName: seriesName,\n                    isActive: isActive,\n                    transform: \"translate(\" + cx + \",\" + cy + \")\"\n                };\n            }\n        })\n            .filter(function (circle) { return circle !== undefined; });\n    };\n    BubbleSeriesComponent.prototype.getTooltipText = function (circle) {\n        var hasRadius = typeof circle.r !== 'undefined';\n        var hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        var hasSeriesName = circle.seriesName && circle.seriesName.length;\n        var radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        var xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? this.xAxisLabel + \":\" : '';\n        var yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? this.yAxisLabel + \":\" : '';\n        var x = formatLabel(circle.x);\n        var y = formatLabel(circle.y);\n        var name = hasSeriesName && hasTooltipLabel\n            ? circle.seriesName + \" \\u2022 \" + circle.tooltipLabel\n            : circle.seriesName + circle.tooltipLabel;\n        var tooltipTitle = hasSeriesName || hasTooltipLabel ?\n            \"<span class=\\\"tooltip-label\\\">\" + escapeLabel(name) + \"</span>\" : '';\n        return \"\\n      \" + tooltipTitle + \"\\n      <span class=\\\"tooltip-label\\\">\\n        <label>\" + escapeLabel(xAxisLabel) + \"</label> \" + escapeLabel(x) + \"<br />\\n        <label>\" + escapeLabel(yAxisLabel) + \"</label> \" + escapeLabel(y) + \"\\n      </span>\\n      <span class=\\\"tooltip-val\\\">\\n        \" + escapeLabel(radiusValue) + \"\\n      </span>\\n    \";\n    };\n    BubbleSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    BubbleSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    BubbleSeriesComponent.prototype.isVisible = function (circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    };\n    BubbleSeriesComponent.prototype.activateCircle = function (circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    };\n    BubbleSeriesComponent.prototype.deactivateCircle = function (circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    };\n    BubbleSeriesComponent.prototype.trackBy = function (index, circle) {\n        return circle.data.series + \" \" + circle.data.name;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"rScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"xScaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"yScaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"visibleValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], BubbleSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleSeriesComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], BubbleSeriesComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], BubbleSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], BubbleSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], BubbleSeriesComponent.prototype, \"deactivate\", void 0);\n    BubbleSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-bubble-series]',\n            template: \"\\n    <svg:g *ngFor=\\\"let circle of circles; trackBy: trackBy\\\">\\n      <svg:g [attr.transform]=\\\"circle.transform\\\">\\n        <svg:g\\n          ngx-charts-circle\\n          [@animationState]=\\\"'active'\\\"\\n          class=\\\"circle\\\"\\n          [cx]=\\\"0\\\"\\n          [cy]=\\\"0\\\"\\n          [r]=\\\"circle.radius\\\"\\n          [fill]=\\\"circle.color\\\"\\n          [style.opacity]=\\\"circle.opacity\\\"\\n          [class.active]=\\\"circle.isActive\\\"\\n          [pointerEvents]=\\\"'all'\\\"\\n          [data]=\\\"circle.value\\\"\\n          [classNames]=\\\"circle.classNames\\\"\\n          (select)=\\\"onClick(circle.data)\\\"\\n          (activate)=\\\"activateCircle(circle)\\\"\\n          (deactivate)=\\\"deactivateCircle(circle)\\\"\\n          ngx-tooltip\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipPlacement]=\\\"'top'\\\"\\n          [tooltipType]=\\\"'tooltip'\\\"\\n          [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(circle)\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipContext]=\\\"circle.data\\\"\\n        />\\n      </svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':enter', [\n                        style({\n                            opacity: 0,\n                            transform: 'scale(0)'\n                        }),\n                        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                    ])\n                ])\n            ]\n        })\n    ], BubbleSeriesComponent);\n    return BubbleSeriesComponent;\n}());\n\nvar BubbleChartModule = /** @class */ (function () {\n    function BubbleChartModule() {\n    }\n    BubbleChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                BubbleChartComponent,\n                BubbleSeriesComponent\n            ],\n            exports: [\n                BubbleChartComponent,\n                BubbleSeriesComponent\n            ]\n        })\n    ], BubbleChartModule);\n    return BubbleChartModule;\n}());\n\nvar ForceDirectedGraphComponent = /** @class */ (function (_super) {\n    __extends(ForceDirectedGraphComponent, _super);\n    function ForceDirectedGraphComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.force = forceSimulation()\n            .force('charge', forceManyBody())\n            .force('collide', forceCollide(5))\n            .force('x', forceX())\n            .force('y', forceY());\n        _this.forceLink = forceLink().id(function (node) { return node.value; });\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.nodes = [];\n        _this.links = [];\n        _this.activeEntries = [];\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [0, 0, 0, 0];\n        _this.results = [];\n        _this.groupResultsBy = function (node) { return node.value; };\n        return _this;\n    }\n    ForceDirectedGraphComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.getSeriesDomain();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"\\n      translate(\" + (this.dims.xOffset + this.dims.width / 2) + \", \" + (this.margin[0] + this.dims.height / 2) + \")\\n    \";\n        if (this.force) {\n            this.force\n                .nodes(this.nodes)\n                .force('link', this.forceLink.links(this.links))\n                .alpha(0.5)\n                .restart();\n        }\n    };\n    ForceDirectedGraphComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    ForceDirectedGraphComponent.prototype.onActivate = function (event$$1) {\n        if (this.activeEntries.indexOf(event$$1) > -1)\n            return;\n        this.activeEntries = [event$$1].concat(this.activeEntries);\n        this.activate.emit({ value: event$$1, entries: this.activeEntries });\n    };\n    ForceDirectedGraphComponent.prototype.onDeactivate = function (event$$1) {\n        var idx = this.activeEntries.indexOf(event$$1);\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: event$$1, entries: this.activeEntries });\n    };\n    ForceDirectedGraphComponent.prototype.getSeriesDomain = function () {\n        var _this = this;\n        return this.nodes\n            .map(function (d) { return _this.groupResultsBy(d); })\n            .reduce(function (nodes, node) { return (nodes.includes(node) ? nodes : nodes.concat([node])); }, [])\n            .sort();\n    };\n    ForceDirectedGraphComponent.prototype.trackLinkBy = function (index, link) {\n        return link.index;\n    };\n    ForceDirectedGraphComponent.prototype.trackNodeBy = function (index, node) {\n        return node.value;\n    };\n    ForceDirectedGraphComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n    };\n    ForceDirectedGraphComponent.prototype.getLegendOptions = function () {\n        return {\n            scaleType: 'ordinal',\n            domain: this.seriesDomain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    };\n    ForceDirectedGraphComponent.prototype.onDragStart = function (node, $event) {\n        this.force.alphaTarget(0.3).restart();\n        this.draggingNode = node;\n        this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n        this.draggingNode.fx = $event.x - this.draggingStart.x;\n        this.draggingNode.fy = $event.y - this.draggingStart.y;\n    };\n    ForceDirectedGraphComponent.prototype.onDrag = function ($event) {\n        if (!this.draggingNode)\n            return;\n        this.draggingNode.fx = $event.x - this.draggingStart.x;\n        this.draggingNode.fy = $event.y - this.draggingStart.y;\n    };\n    ForceDirectedGraphComponent.prototype.onDragEnd = function ($event) {\n        if (!this.draggingNode)\n            return;\n        this.force.alphaTarget(0);\n        this.draggingNode.fx = undefined;\n        this.draggingNode.fy = undefined;\n        this.draggingNode = undefined;\n    };\n    ForceDirectedGraphComponent.prototype.escape = function (label) {\n        return escapeLabel(label);\n    };\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ForceDirectedGraphComponent.prototype, \"force\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], ForceDirectedGraphComponent.prototype, \"forceLink\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ForceDirectedGraphComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], ForceDirectedGraphComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], ForceDirectedGraphComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], ForceDirectedGraphComponent.prototype, \"nodes\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof Array !== \"undefined\" && Array) === \"function\" ? _a : Object)\n    ], ForceDirectedGraphComponent.prototype, \"links\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], ForceDirectedGraphComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ForceDirectedGraphComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], ForceDirectedGraphComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], ForceDirectedGraphComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('linkTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _d : Object)\n    ], ForceDirectedGraphComponent.prototype, \"linkTemplate\", void 0);\n    __decorate([\n        ContentChild('nodeTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_e = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _e : Object)\n    ], ForceDirectedGraphComponent.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_f = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _f : Object)\n    ], ForceDirectedGraphComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ViewChild(ChartComponent, { read: ElementRef, static: false }),\n        __metadata(\"design:type\", typeof (_g = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _g : Object)\n    ], ForceDirectedGraphComponent.prototype, \"chart\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], ForceDirectedGraphComponent.prototype, \"groupResultsBy\", void 0);\n    __decorate([\n        HostListener('document:mousemove', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [typeof (_h = typeof MouseEvent !== \"undefined\" && MouseEvent) === \"function\" ? _h : Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], ForceDirectedGraphComponent.prototype, \"onDrag\", null);\n    __decorate([\n        HostListener('document:mouseup', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [typeof (_j = typeof MouseEvent !== \"undefined\" && MouseEvent) === \"function\" ? _j : Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], ForceDirectedGraphComponent.prototype, \"onDragEnd\", null);\n    ForceDirectedGraphComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-force-directed-graph',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"force-directed-graph chart\\\">\\n        <svg:g class=\\\"links\\\">\\n          <svg:g *ngFor=\\\"let link of links; trackBy: trackLinkBy\\\">\\n            <ng-template\\n              *ngIf=\\\"linkTemplate\\\"\\n              [ngTemplateOutlet]=\\\"linkTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: link }\\\"\\n            ></ng-template>\\n            <svg:line\\n              *ngIf=\\\"!linkTemplate\\\"\\n              strokeWidth=\\\"1\\\"\\n              class=\\\"edge\\\"\\n              [attr.x1]=\\\"link.source.x\\\"\\n              [attr.y1]=\\\"link.source.y\\\"\\n              [attr.x2]=\\\"link.target.x\\\"\\n              [attr.y2]=\\\"link.target.y\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n        <svg:g class=\\\"nodes\\\">\\n          <svg:g\\n            *ngFor=\\\"let node of nodes; trackBy: trackNodeBy\\\"\\n            [attr.transform]=\\\"'translate(' + node.x + ',' + node.y + ')'\\\"\\n            [attr.fill]=\\\"colors.getColor(groupResultsBy(node))\\\"\\n            [attr.stroke]=\\\"colors.getColor(groupResultsBy(node))\\\"\\n            (mousedown)=\\\"onDragStart(node, $event)\\\"\\n            (click)=\\\"onClick({ name: node.value })\\\"\\n            ngx-tooltip\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipPlacement]=\\\"'top'\\\"\\n            [tooltipType]=\\\"'tooltip'\\\"\\n            [tooltipTitle]=\\\"tooltipTemplate ? undefined : escape(node.value)\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [tooltipContext]=\\\"node\\\"\\n          >\\n            <ng-template\\n              *ngIf=\\\"nodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-template>\\n            <svg:circle *ngIf=\\\"!nodeTemplate\\\" r=\\\"5\\\" />\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".force-directed-graph .edge{stroke:#333}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], ForceDirectedGraphComponent);\n    return ForceDirectedGraphComponent;\n}(BaseChartComponent));\n\nvar ForceDirectedGraphModule = /** @class */ (function () {\n    function ForceDirectedGraphModule() {\n    }\n    ForceDirectedGraphModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                ForceDirectedGraphComponent,\n            ],\n            exports: [\n                ForceDirectedGraphComponent,\n            ]\n        })\n    ], ForceDirectedGraphModule);\n    return ForceDirectedGraphModule;\n}());\n\nvar HeatMapCellComponent = /** @class */ (function () {\n    function HeatMapCellComponent(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    HeatMapCellComponent.prototype.ngOnChanges = function (changes) {\n        this.transform = \"translate(\" + this.x + \" , \" + this.y + \")\";\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    };\n    HeatMapCellComponent.prototype.getGradientStops = function () {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    };\n    HeatMapCellComponent.prototype.loadAnimation = function () {\n        var node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    };\n    HeatMapCellComponent.prototype.animateToCurrentForm = function () {\n        var node = select(this.element).select('.cell');\n        node\n            .transition()\n            .duration(750)\n            .attr('opacity', 1);\n    };\n    HeatMapCellComponent.prototype.onClick = function () {\n        this.select.emit(this.data);\n    };\n    HeatMapCellComponent.prototype.onMouseEnter = function () {\n        this.activate.emit(this.data);\n    };\n    HeatMapCellComponent.prototype.onMouseLeave = function () {\n        this.deactivate.emit(this.data);\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"x\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"y\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapCellComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapCellComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapCellComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        HostListener('mouseenter'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], HeatMapCellComponent.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], HeatMapCellComponent.prototype, \"onMouseLeave\", null);\n    HeatMapCellComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-heat-map-cell]',\n            template: \"\\n    <svg:g [attr.transform]=\\\"transform\\\" class=\\\"cell\\\">\\n      <defs *ngIf=\\\"gradient\\\">\\n        <svg:g ngx-charts-svg-linear-gradient orientation=\\\"vertical\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n      </defs>\\n      <svg:rect\\n        [attr.fill]=\\\"gradient ? gradientUrl : fill\\\"\\n        rx=\\\"3\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        class=\\\"cell\\\"\\n        style=\\\"cursor: pointer\\\"\\n        (click)=\\\"onClick()\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], HeatMapCellComponent);\n    return HeatMapCellComponent;\n}());\n\nvar HeatCellSeriesComponent = /** @class */ (function () {\n    function HeatCellSeriesComponent() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    HeatCellSeriesComponent.prototype.ngOnInit = function () {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    };\n    HeatCellSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    HeatCellSeriesComponent.prototype.update = function () {\n        this.cells = this.getCells();\n    };\n    HeatCellSeriesComponent.prototype.getCells = function () {\n        var _this = this;\n        var cells = [];\n        this.data.map(function (row) {\n            row.series.map(function (cell) {\n                var value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row: row,\n                    cell: cell,\n                    x: _this.xScale(row.name),\n                    y: _this.yScale(cell.name),\n                    width: _this.xScale.bandwidth(),\n                    height: _this.yScale.bandwidth(),\n                    fill: _this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    };\n    HeatCellSeriesComponent.prototype.getTooltipText = function (_a) {\n        var label = _a.label, data = _a.data, series = _a.series;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(series) + \" \\u2022 \" + escapeLabel(label) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + data.toLocaleString() + \"</span>\\n    \";\n    };\n    HeatCellSeriesComponent.prototype.trackBy = function (index, item) {\n        return item.tooltipText;\n    };\n    HeatCellSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatCellSeriesComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatCellSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], HeatCellSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatCellSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], HeatCellSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], HeatCellSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_c = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _c : Object)\n    ], HeatCellSeriesComponent.prototype, \"deactivate\", void 0);\n    HeatCellSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-heat-map-cell-series]',\n            template: \"\\n    <svg:g\\n      ngx-charts-heat-map-cell\\n      *ngFor=\\\"let c of cells; trackBy: trackBy\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [fill]=\\\"c.fill\\\"\\n      [data]=\\\"c.data\\\"\\n      (select)=\\\"onClick(c.cell)\\\"\\n      (activate)=\\\"activate.emit(c.cell)\\\"\\n      (deactivate)=\\\"deactivate.emit(c.cell)\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [animations]=\\\"animations\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(c)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"{ series: c.series, name: c.label, value: c.data }\\\"\\n    ></svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], HeatCellSeriesComponent);\n    return HeatCellSeriesComponent;\n}());\n\nvar HeatMapComponent = /** @class */ (function (_super) {\n    __extends(HeatMapComponent, _super);\n    function HeatMapComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.innerPadding = 8;\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.tooltipDisabled = false;\n        _this.activeEntries = [];\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.scaleType = 'linear';\n        return _this;\n    }\n    HeatMapComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === 'linear') {\n            var min$$1 = this.min;\n            var max$$1 = this.max;\n            if (!this.min) {\n                min$$1 = Math.min.apply(Math, [0].concat(this.valueDomain));\n            }\n            if (!this.max) {\n                max$$1 = Math.max.apply(Math, this.valueDomain);\n            }\n            this.valueDomain = [min$$1, max$$1];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n        this.rects = this.getRects();\n    };\n    HeatMapComponent.prototype.getXDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    };\n    HeatMapComponent.prototype.getYDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    };\n    HeatMapComponent.prototype.getValueDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            for (var _b = 0, _c = group.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    };\n    HeatMapComponent.prototype.getDimension = function (value, index, N, L) {\n        if (index === void 0) { index = 0; }\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                .replace('\\'', '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    };\n    HeatMapComponent.prototype.getXScale = function () {\n        var f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .domain(this.xDomain)\n            .paddingInner(f);\n    };\n    HeatMapComponent.prototype.getYScale = function () {\n        var f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand()\n            .rangeRound([this.dims.height, 0])\n            .domain(this.yDomain)\n            .paddingInner(f);\n    };\n    HeatMapComponent.prototype.getRects = function () {\n        var _this = this;\n        var rects = [];\n        this.xDomain.map(function (xVal) {\n            _this.yDomain.map(function (yVal) {\n                rects.push({\n                    x: _this.xScale(xVal),\n                    y: _this.yScale(yVal),\n                    rx: 3,\n                    width: _this.xScale.bandwidth(),\n                    height: _this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    };\n    HeatMapComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    HeatMapComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    };\n    HeatMapComponent.prototype.getLegendOptions = function () {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n            title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    };\n    HeatMapComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    HeatMapComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    HeatMapComponent.prototype.onActivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        var items = this.results\n            .map(function (g) { return g.series; })\n            .flat()\n            .filter(function (i) {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = items.slice();\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    HeatMapComponent.prototype.onDeactivate = function (event$$1, group, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        var item = Object.assign({}, event$$1);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(function (i) {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], HeatMapComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], HeatMapComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"innerPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], HeatMapComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], HeatMapComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], HeatMapComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], HeatMapComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], HeatMapComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"min\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], HeatMapComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], HeatMapComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], HeatMapComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], HeatMapComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], HeatMapComponent.prototype, \"tooltipTemplate\", void 0);\n    HeatMapComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-heat-map',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [animations]=\\\"animations\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"heat-map chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:rect\\n          *ngFor=\\\"let rect of rects\\\"\\n          [attr.x]=\\\"rect.x\\\"\\n          [attr.y]=\\\"rect.y\\\"\\n          [attr.rx]=\\\"rect.rx\\\"\\n          [attr.width]=\\\"rect.width\\\"\\n          [attr.height]=\\\"rect.height\\\"\\n          [attr.fill]=\\\"rect.fill\\\"\\n        />\\n        <svg:g\\n          ngx-charts-heat-map-cell-series\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [data]=\\\"results\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipText]=\\\"tooltipText\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event, undefined)\\\"\\n          (deactivate)=\\\"onDeactivate($event, undefined)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None\n        })\n    ], HeatMapComponent);\n    return HeatMapComponent;\n}(BaseChartComponent));\n\nvar HeatMapModule = /** @class */ (function () {\n    function HeatMapModule() {\n    }\n    HeatMapModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                HeatMapCellComponent,\n                HeatCellSeriesComponent,\n                HeatMapComponent\n            ],\n            exports: [\n                HeatMapCellComponent,\n                HeatCellSeriesComponent,\n                HeatMapComponent\n            ]\n        })\n    ], HeatMapModule);\n    return HeatMapModule;\n}());\n\nvar LineComponent = /** @class */ (function () {\n    function LineComponent(element) {\n        this.element = element;\n        this.fill = 'none';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n    }\n    LineComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    };\n    LineComponent.prototype.updatePathEl = function () {\n        var node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node\n                .transition().duration(750)\n                .attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineComponent.prototype, \"path\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineComponent.prototype, \"stroke\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LineComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], LineComponent.prototype, \"select\", void 0);\n    LineComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-line]',\n            template: \"\\n    <svg:path\\n      [@animationState]=\\\"'active'\\\"\\n      class=\\\"line\\\"\\n      [attr.d]=\\\"initialPath\\\"\\n      [attr.fill]=\\\"fill\\\"\\n      [attr.stroke]=\\\"stroke\\\"\\n      stroke-width=\\\"1.5px\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':enter', [\n                        style({\n                            strokeDasharray: 2000,\n                            strokeDashoffset: 2000,\n                        }),\n                        animate(1000, style({\n                            strokeDashoffset: 0\n                        }))\n                    ])\n                ])\n            ]\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], LineComponent);\n    return LineComponent;\n}());\n\nvar LineChartComponent = /** @class */ (function (_super) {\n    __extends(LineChartComponent, _super);\n    function LineChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.showGridLines = true;\n        _this.curve = curveLinear;\n        _this.activeEntries = [];\n        _this.trimXAxisTicks = true;\n        _this.trimYAxisTicks = true;\n        _this.rotateXAxisTicks = true;\n        _this.maxXAxisTickLength = 16;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.tooltipDisabled = false;\n        _this.showRefLines = false;\n        _this.showRefLabels = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        _this.timelineHeight = 50;\n        _this.timelinePadding = 10;\n        return _this;\n    }\n    LineChartComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = \"url(#\" + this.clipPathId + \")\";\n    };\n    LineChartComponent.prototype.updateTimeline = function () {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = \"translate(\" + this.dims.xOffset + \", \" + -this.margin[2] + \")\";\n        }\n    };\n    LineChartComponent.prototype.getXDomain = function () {\n        var values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        var domain = [];\n        if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n        }\n        var min$$1;\n        var max$$1;\n        if (this.scaleType === 'time' || this.scaleType === 'linear') {\n            min$$1 = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, values);\n            max$$1 = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, values);\n        }\n        if (this.scaleType === 'time') {\n            domain = [new Date(min$$1), new Date(max$$1)];\n            this.xSet = values.slice().sort(function (a, b) {\n                var aDate = a.getTime();\n                var bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === 'linear') {\n            domain = [min$$1, max$$1];\n            this.xSet = values.slice().sort(function (a, b) { return a - b; });\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    };\n    LineChartComponent.prototype.getYDomain = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        var values = domain.slice();\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        var min$$1 = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, values);\n        var max$$1 = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, values);\n        return [min$$1, max$$1];\n    };\n    LineChartComponent.prototype.getSeriesDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    LineChartComponent.prototype.getXScale = function (domain, width) {\n        var scale;\n        if (this.scaleType === 'time') {\n            scale = scaleTime()\n                .range([0, width])\n                .domain(domain);\n        }\n        else if (this.scaleType === 'linear') {\n            scale = scaleLinear()\n                .range([0, width])\n                .domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === 'ordinal') {\n            scale = scalePoint()\n                .range([0, width])\n                .padding(0.1)\n                .domain(domain);\n        }\n        return scale;\n    };\n    LineChartComponent.prototype.getYScale = function (domain, height) {\n        var scale = scaleLinear()\n            .range([height, 0])\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    LineChartComponent.prototype.updateDomain = function (domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    };\n    LineChartComponent.prototype.updateHoveredVertical = function (item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    };\n    LineChartComponent.prototype.hideCircles = function () {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    };\n    LineChartComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    LineChartComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    LineChartComponent.prototype.setColors = function () {\n        var domain;\n        if (this.schemeType === 'ordinal') {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    LineChartComponent.prototype.getLegendOptions = function () {\n        var opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    };\n    LineChartComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    LineChartComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    LineChartComponent.prototype.onActivate = function (item) {\n        this.deactivateAll();\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    LineChartComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    LineChartComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LineChartComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LineChartComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"autoScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"timeline\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], LineChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LineChartComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineChartComponent.prototype, \"rangeFillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"trimXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"rotateXAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineChartComponent.prototype, \"maxXAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineChartComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], LineChartComponent.prototype, \"xAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], LineChartComponent.prototype, \"yAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"showRefLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"referenceLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineChartComponent.prototype, \"showRefLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"xScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineChartComponent.prototype, \"xScaleMax\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineChartComponent.prototype, \"yScaleMin\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineChartComponent.prototype, \"yScaleMax\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], LineChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], LineChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], LineChartComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ContentChild('seriesTooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _d : Object)\n    ], LineChartComponent.prototype, \"seriesTooltipTemplate\", void 0);\n    __decorate([\n        HostListener('mouseleave'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], LineChartComponent.prototype, \"hideCircles\", null);\n    LineChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-line-chart',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"line-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [referenceLines]=\\\"referenceLines\\\"\\n          [showRefLines]=\\\"showRefLines\\\"\\n          [showRefLabels]=\\\"showRefLabels\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-line-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [curve]=\\\"curve\\\"\\n              [rangeFillOpacity]=\\\"rangeFillOpacity\\\"\\n              [hasRange]=\\\"hasRange\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        [legend]=\\\"legend\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-line-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [curve]=\\\"curve\\\"\\n            [hasRange]=\\\"hasRange\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1\n                        }),\n                        animate(500, style({\n                            opacity: 0\n                        }))\n                    ])\n                ])\n            ]\n        })\n    ], LineChartComponent);\n    return LineChartComponent;\n}(BaseChartComponent));\n\nvar LineSeriesComponent = /** @class */ (function () {\n    function LineSeriesComponent() {\n        this.animations = true;\n    }\n    LineSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    LineSeriesComponent.prototype.update = function () {\n        this.updateGradients();\n        var data = this.sortData(this.data.series);\n        var lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        var areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            var range$$1 = this.getRangeGenerator();\n            this.outerPath = range$$1(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max$$1 = Math.max.apply(Math, values);\n            var min$$1 = Math.min.apply(Math, values);\n            if (max$$1 === min$$1) {\n                this.stroke = this.colors.getColor(max$$1);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    };\n    LineSeriesComponent.prototype.getLineGenerator = function () {\n        var _this = this;\n        return line()\n            .x(function (d) {\n            var label = d.name;\n            var value;\n            if (_this.scaleType === 'time') {\n                value = _this.xScale(label);\n            }\n            else if (_this.scaleType === 'linear') {\n                value = _this.xScale(Number(label));\n            }\n            else {\n                value = _this.xScale(label);\n            }\n            return value;\n        })\n            .y(function (d) { return _this.yScale(d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.getRangeGenerator = function () {\n        var _this = this;\n        return area()\n            .x(function (d) {\n            var label = d.name;\n            var value;\n            if (_this.scaleType === 'time') {\n                value = _this.xScale(label);\n            }\n            else if (_this.scaleType === 'linear') {\n                value = _this.xScale(Number(label));\n            }\n            else {\n                value = _this.xScale(label);\n            }\n            return value;\n        })\n            .y0(function (d) { return _this.yScale(typeof d.min === 'number' ? d.min : d.value); })\n            .y1(function (d) { return _this.yScale(typeof d.max === 'number' ? d.max : d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.getAreaGenerator = function () {\n        var _this = this;\n        var xProperty = function (d) {\n            var label = d.name;\n            return _this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(function () { return _this.yScale.range()[0]; })\n            .y1(function (d) { return _this.yScale(d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.sortData = function (data) {\n        if (this.scaleType === 'linear') {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === 'time') {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    };\n    LineSeriesComponent.prototype.updateGradients = function () {\n        if (this.colors.scaleType === 'linear') {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max$$1 = Math.max.apply(Math, values);\n            var min$$1 = Math.min.apply(Math, values);\n            this.gradientStops = this.colors.getLinearGradientStops(max$$1, min$$1);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max$$1);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    };\n    LineSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    LineSeriesComponent.prototype.isInactive = function (entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LineSeriesComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], LineSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LineSeriesComponent.prototype, \"rangeFillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineSeriesComponent.prototype, \"hasRange\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], LineSeriesComponent.prototype, \"animations\", void 0);\n    LineSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-line-series]',\n            template: \"\\n    <svg:g>\\n      <defs>\\n        <svg:g ngx-charts-svg-linear-gradient *ngIf=\\\"hasGradient\\\"\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"gradientId\\\"\\n          [stops]=\\\"gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:g ngx-charts-area\\n        class=\\\"line-highlight\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"areaPath\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : colors.getColor(data.name)\\\"\\n        [opacity]=\\\"0.25\\\"\\n        [startOpacity]=\\\"0\\\"\\n        [gradient]=\\\"true\\\"\\n        [stops]=\\\"areaGradientStops\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n      <svg:g ngx-charts-line\\n        class=\\\"line-series\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"path\\\"\\n        [stroke]=\\\"stroke\\\"\\n        [animations]=\\\"animations\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n      />\\n     <svg:g ngx-charts-area\\n        *ngIf=\\\"hasRange\\\"\\n        class=\\\"line-series-range\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"outerPath\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : colors.getColor(data.name)\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n        [opacity]=\\\"rangeFillOpacity\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], LineSeriesComponent);\n    return LineSeriesComponent;\n}());\n\nvar LineChartModule = /** @class */ (function () {\n    function LineChartModule() {\n    }\n    LineChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                LineComponent,\n                LineChartComponent,\n                LineSeriesComponent\n            ],\n            exports: [\n                LineComponent,\n                LineChartComponent,\n                LineSeriesComponent\n            ]\n        })\n    ], LineChartModule);\n    return LineChartModule;\n}());\n\nvar twoPI = 2 * Math.PI;\nvar PolarChartComponent = /** @class */ (function (_super) {\n    __extends(PolarChartComponent, _super);\n    function PolarChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.showGridLines = true;\n        _this.curve = curveCardinalClosed;\n        _this.activeEntries = [];\n        _this.rangeFillOpacity = 0.15;\n        _this.trimYAxisTicks = true;\n        _this.maxYAxisTickLength = 16;\n        _this.roundDomains = false;\n        _this.tooltipDisabled = false;\n        _this.showSeriesOnHover = true;\n        _this.gradient = false;\n        _this.yAxisMinScale = 0;\n        _this.labelTrim = true;\n        _this.labelTrimSize = 10;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [10, 20, 10, 20];\n        _this.xAxisHeight = 0;\n        _this.yAxisWidth = 0;\n        return _this;\n    }\n    PolarChartComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    };\n    PolarChartComponent.prototype.setDims = function () {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        var halfWidth = Math.floor(this.dims.width / 2);\n        var halfHeight = Math.floor(this.dims.height / 2);\n        var outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        var yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = __assign({}, this.dims, { width: halfWidth });\n        this.transform = \"translate(\" + this.dims.xOffset + \", \" + this.margin[0] + \")\";\n        this.transformYAxis = \"translate(0, \" + yOffset + \")\";\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = \"translate(\" + halfWidth + \", \" + halfHeight + \")\";\n    };\n    PolarChartComponent.prototype.setScales = function () {\n        var xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    };\n    PolarChartComponent.prototype.setTicks = function () {\n        var _this = this;\n        var tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = function (d) {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        var outerRadius = this.outerRadius;\n        var s = 1.1;\n        this.thetaTicks = this.xDomain.map(function (d) {\n            var startAngle = _this.xScale(d);\n            var dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            var label = tickFormat(d);\n            var startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            var pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius: outerRadius,\n                startAngle: startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label: label,\n                startPos: startPos,\n                pos: pos\n            };\n        });\n        var minDistance = 10;\n        for (var i = 0; i < this.thetaTicks.length - 1; i++) {\n            var a = this.thetaTicks[i];\n            for (var j = i + 1; j < this.thetaTicks.length; j++) {\n                var b = this.thetaTicks[j];\n                if (b.pos[0] * a.pos[0] > 0) {\n                    var o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(function (d) { return _this.yScale(d); });\n    };\n    PolarChartComponent.prototype.getXValues = function () {\n        var values = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    };\n    PolarChartComponent.prototype.getXDomain = function (values) {\n        if (values === void 0) { values = this.getXValues(); }\n        if (this.scaleType === 'time') {\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            return [min$$1, max$$1];\n        }\n        else if (this.scaleType === 'linear') {\n            values = values.map(function (v) { return Number(v); });\n            var min$$1 = Math.min.apply(Math, values);\n            var max$$1 = Math.max.apply(Math, values);\n            return [min$$1, max$$1];\n        }\n        return values;\n    };\n    PolarChartComponent.prototype.getYValues = function () {\n        var domain = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var results = _a[_i];\n            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {\n                var d = _c[_b];\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    };\n    PolarChartComponent.prototype.getYDomain = function (domain) {\n        if (domain === void 0) { domain = this.getYValues(); }\n        var min$$1 = Math.min.apply(Math, domain);\n        var max$$1 = Math.max.apply(Math, [this.yAxisMinScale].concat(domain));\n        min$$1 = Math.max(0, min$$1);\n        if (!this.autoScale) {\n            min$$1 = Math.min(0, min$$1);\n        }\n        return [min$$1, max$$1];\n    };\n    PolarChartComponent.prototype.getSeriesDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    PolarChartComponent.prototype.getXScale = function (domain, width) {\n        switch (this.scaleType) {\n            case 'time':\n                return scaleTime()\n                    .range([0, width])\n                    .domain(domain);\n            case 'linear':\n                var scale = scaleLinear()\n                    .range([0, width])\n                    .domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    };\n    PolarChartComponent.prototype.getYScale = function (domain, height) {\n        var scale = scaleLinear()\n            .range([0, height])\n            .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    };\n    PolarChartComponent.prototype.onClick = function (data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    };\n    PolarChartComponent.prototype.setColors = function () {\n        var domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    };\n    PolarChartComponent.prototype.getLegendOptions = function () {\n        if (this.schemeType === 'ordinal') {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    };\n    PolarChartComponent.prototype.updateYAxisWidth = function (_a) {\n        var width = _a.width;\n        this.yAxisWidth = width;\n        this.update();\n    };\n    PolarChartComponent.prototype.updateXAxisHeight = function (_a) {\n        var height = _a.height;\n        this.xAxisHeight = height;\n        this.update();\n    };\n    PolarChartComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item].concat(this.activeEntries) : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    PolarChartComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    PolarChartComponent.prototype.deactivateAll = function () {\n        this.activeEntries = this.activeEntries.slice();\n        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    };\n    PolarChartComponent.prototype.trackBy = function (index, item) {\n        return item.name;\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PolarChartComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PolarChartComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"xAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"yAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"showXAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"showYAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PolarChartComponent.prototype, \"xAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PolarChartComponent.prototype, \"yAxisLabel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"autoScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"showGridLines\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarChartComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PolarChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PolarChartComponent.prototype, \"schemeType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PolarChartComponent.prototype, \"rangeFillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"trimYAxisTicks\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PolarChartComponent.prototype, \"maxYAxisTickLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], PolarChartComponent.prototype, \"xAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], PolarChartComponent.prototype, \"yAxisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"roundDomains\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"showSeriesOnHover\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PolarChartComponent.prototype, \"yAxisMinScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarChartComponent.prototype, \"labelTrim\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PolarChartComponent.prototype, \"labelTrimSize\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], PolarChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], PolarChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], PolarChartComponent.prototype, \"tooltipTemplate\", void 0);\n    PolarChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-polar-chart',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:g class=\\\"polar-chart chart\\\" [attr.transform]=\\\"transform\\\">\\n        <svg:g [attr.transform]=\\\"transformPlot\\\">\\n          <svg:circle class=\\\"polar-chart-background\\\" cx=\\\"0\\\" cy=\\\"0\\\" [attr.r]=\\\"this.outerRadius\\\" />\\n          <svg:g *ngIf=\\\"showGridLines\\\">\\n            <svg:circle\\n              *ngFor=\\\"let r of radiusTicks\\\"\\n              class=\\\"gridline-path radial-gridline-path\\\"\\n              cx=\\\"0\\\"\\n              cy=\\\"0\\\"\\n              [attr.r]=\\\"r\\\"\\n            />\\n          </svg:g>\\n          <svg:g *ngIf=\\\"xAxis\\\">\\n            <svg:g\\n              ngx-charts-pie-label\\n              *ngFor=\\\"let tick of thetaTicks\\\"\\n              [data]=\\\"tick\\\"\\n              [radius]=\\\"outerRadius\\\"\\n              [label]=\\\"tick.label\\\"\\n              [max]=\\\"outerRadius\\\"\\n              [value]=\\\"showGridLines ? 1 : outerRadius\\\"\\n              [explodeSlices]=\\\"true\\\"\\n              [animations]=\\\"animations\\\"\\n              [labelTrim]=\\\"labelTrim\\\"\\n              [labelTrimSize]=\\\"labelTrimSize\\\"\\n            ></svg:g>\\n          </svg:g>\\n        </svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          [attr.transform]=\\\"transformYAxis\\\"\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yAxisScale\\\"\\n          [dims]=\\\"yAxisDims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-axis-label\\n          *ngIf=\\\"xAxis && showXAxisLabel\\\"\\n          [label]=\\\"xAxisLabel\\\"\\n          [offset]=\\\"labelOffset\\\"\\n          [orient]=\\\"'bottom'\\\"\\n          [height]=\\\"dims.height\\\"\\n          [width]=\\\"dims.width\\\"\\n        ></svg:g>\\n        <svg:g [attr.transform]=\\\"transformPlot\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-polar-series\\n              [gradient]=\\\"gradient\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [curve]=\\\"curve\\\"\\n              [rangeFillOpacity]=\\\"rangeFillOpacity\\\"\\n              [animations]=\\\"animations\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              (select)=\\\"onClick($event)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\n                \".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\",\n                \".pie-label{font-size:11px}.pie-label.animation{animation:750ms ease-in fadeIn}@keyframes fadeIn{from{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d 750ms}@keyframes drawOut{from{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\",\n                \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area{pointer-events:none}.polar-series-path{pointer-events:none}\"\n            ],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            animations: [\n                trigger('animationState', [\n                    transition(':leave', [\n                        style({\n                            opacity: 1\n                        }),\n                        animate(500, style({\n                            opacity: 0\n                        }))\n                    ])\n                ])\n            ]\n        })\n    ], PolarChartComponent);\n    return PolarChartComponent;\n}(BaseChartComponent));\n\nvar PolarSeriesComponent = /** @class */ (function () {\n    function PolarSeriesComponent() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n    }\n    PolarSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PolarSeriesComponent.prototype.update = function () {\n        var _this = this;\n        this.updateGradients();\n        var line$$1 = this.getLineGenerator();\n        var data = this.sortData(this.data.series);\n        var seriesName = this.data.name;\n        var linearScaleType = this.colors.scaleType === 'linear';\n        var min$$1 = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min$$1 : seriesName);\n        this.path = line$$1(data) || '';\n        this.circles = data.map(function (d) {\n            var a = _this.getAngle(d);\n            var r = _this.getRadius(d);\n            var value = d.value;\n            var color = _this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            var cData = Object.assign({}, d, {\n                series: seriesName,\n                value: value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value: value,\n                color: color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (function (c) { return _this.defaultTooltipText(c); });\n    };\n    PolarSeriesComponent.prototype.getAngle = function (d) {\n        var label = d.name;\n        if (this.scaleType === 'time') {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === 'linear') {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    };\n    PolarSeriesComponent.prototype.getRadius = function (d) {\n        return this.yScale(d.value);\n    };\n    PolarSeriesComponent.prototype.getLineGenerator = function () {\n        var _this = this;\n        return lineRadial()\n            .angle(function (d) { return _this.getAngle(d); })\n            .radius(function (d) { return _this.getRadius(d); })\n            .curve(this.curve);\n    };\n    PolarSeriesComponent.prototype.sortData = function (data) {\n        if (this.scaleType === 'linear') {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === 'time') {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    };\n    PolarSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    PolarSeriesComponent.prototype.isInactive = function (entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    };\n    PolarSeriesComponent.prototype.defaultTooltipText = function (_a) {\n        var label = _a.label, value = _a.value;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(this.data.name) + \" \\u2022 \" + escapeLabel(label) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n    \";\n    };\n    PolarSeriesComponent.prototype.updateGradients = function () {\n        this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n        if (this.colors.scaleType === 'linear') {\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max$$1 = Math.max.apply(Math, values);\n            var min$$1 = Math.min.apply(Math, values);\n            this.gradientStops = this.colors.getLinearGradientStops(max$$1, min$$1);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"name\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"xScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"yScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"scaleType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"curve\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PolarSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PolarSeriesComponent.prototype, \"rangeFillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], PolarSeriesComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarSeriesComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], PolarSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PolarSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PolarSeriesComponent.prototype, \"deactivate\", void 0);\n    PolarSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-polar-series]',\n            template: \"\\n    <svg:g class=\\\"polar-charts-series\\\">\\n      <defs>\\n        <svg:g\\n          ngx-charts-svg-radial-gradient\\n          *ngIf=\\\"hasGradient\\\"\\n          orientation=\\\"vertical\\\"\\n          [color]=\\\"seriesColor\\\"\\n          [name]=\\\"gradientId\\\"\\n          [startOpacity]=\\\"0.25\\\"\\n          [endOpacity]=\\\"1\\\"\\n          [stops]=\\\"gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:g\\n        ngx-charts-line\\n        class=\\\"polar-series-path\\\"\\n        [path]=\\\"path\\\"\\n        [stroke]=\\\"hasGradient ? gradientUrl : seriesColor\\\"\\n        [class.active]=\\\"active\\\"\\n        [class.inactive]=\\\"inactive\\\"\\n        [attr.fill-opacity]=\\\"rangeFillOpacity\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : seriesColor\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n      <svg:g\\n        ngx-charts-circle\\n        *ngFor=\\\"let circle of circles\\\"\\n        class=\\\"circle\\\"\\n        [cx]=\\\"circle.cx\\\"\\n        [cy]=\\\"circle.cy\\\"\\n        [r]=\\\"circleRadius\\\"\\n        [fill]=\\\"circle.color\\\"\\n        [style.opacity]=\\\"inactive ? 0.2 : 1\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        tooltipType=\\\"tooltip\\\"\\n        [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(circle)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"circle.data\\\"\\n        (select)=\\\"select.emit(circle.data)\\\"\\n        (activate)=\\\"activate.emit({ name: circle.data.series })\\\"\\n        (deactivate)=\\\"deactivate.emit({ name: circle.data.series })\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], PolarSeriesComponent);\n    return PolarSeriesComponent;\n}());\n\nvar AdvancedPieChartComponent = /** @class */ (function (_super) {\n    __extends(AdvancedPieChartComponent, _super);\n    function AdvancedPieChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.activeEntries = [];\n        _this.tooltipDisabled = false;\n        _this.label = 'Total';\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [20, 20, 20, 20];\n        return _this;\n    }\n    AdvancedPieChartComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        var xOffset = this.dims.width / 2;\n        var yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = \"translate(\" + xOffset + \" , \" + yOffset + \")\";\n    };\n    AdvancedPieChartComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    AdvancedPieChartComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    AdvancedPieChartComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    AdvancedPieChartComponent.prototype.onActivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    AdvancedPieChartComponent.prototype.onDeactivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AdvancedPieChartComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AdvancedPieChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AdvancedPieChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AdvancedPieChartComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AdvancedPieChartComponent.prototype, \"label\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], AdvancedPieChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], AdvancedPieChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], AdvancedPieChartComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedPieChartComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedPieChartComponent.prototype, \"nameFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AdvancedPieChartComponent.prototype, \"percentageFormatting\", void 0);\n    AdvancedPieChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-advanced-pie-chart',\n            template: \"\\n    <div [style.width.px]=\\\"width\\\" [style.height.px]=\\\"height\\\">\\n      <div class=\\\"advanced-pie chart\\\" [style.width.px]=\\\"dims.width\\\" [style.height.px]=\\\"dims.height\\\">\\n        <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n          <svg:g [attr.transform]=\\\"transform\\\" class=\\\"pie chart\\\">\\n            <svg:g\\n              ngx-charts-pie-series\\n              [colors]=\\\"colors\\\"\\n              [series]=\\\"results\\\"\\n              [innerRadius]=\\\"innerRadius\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [outerRadius]=\\\"outerRadius\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              [tooltipText]=\\\"tooltipText\\\"\\n              (select)=\\\"onClick($event)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n              [animations]=\\\"animations\\\"\\n            ></svg:g>\\n          </svg:g>\\n        </ngx-charts-chart>\\n      </div>\\n      <div class=\\\"advanced-pie-legend-wrapper\\\" [style.width.px]=\\\"width - dims.width\\\" [style.height.px]=\\\"height\\\">\\n        <ngx-charts-advanced-legend\\n          [data]=\\\"results\\\"\\n          [colors]=\\\"colors\\\"\\n          [width]=\\\"width - dims.width - margin[1]\\\"\\n          [label]=\\\"label\\\"\\n          [animations]=\\\"animations\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"nameFormatting\\\"\\n          [percentageFormatting]=\\\"percentageFormatting\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event, true)\\\"\\n          (deactivate)=\\\"onDeactivate($event, true)\\\"\\n        >\\n        </ngx-charts-advanced-legend>\\n      </div>\\n    </div>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], AdvancedPieChartComponent);\n    return AdvancedPieChartComponent;\n}(BaseChartComponent));\n\nvar PieLabelComponent = /** @class */ (function () {\n    function PieLabelComponent() {\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n        this.trimLabel = trimLabel;\n    }\n    PieLabelComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PieLabelComponent.prototype.update = function () {\n        var startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = this.radius * this.value / this.max;\n        }\n        var innerArc = arc()\n            .innerRadius(startRadius)\n            .outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        var innerPos = innerArc.centroid(this.data);\n        var scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        var outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = \"M\" + innerPos + \"L\" + outerPos + \"L\" + this.data.pos;\n    };\n    Object.defineProperty(PieLabelComponent.prototype, \"textX\", {\n        get: function () {\n            return this.data.pos[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PieLabelComponent.prototype, \"textY\", {\n        get: function () {\n            return this.data.pos[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PieLabelComponent.prototype, \"styleTransform\", {\n        get: function () {\n            return this.isIE ? null : \"translate3d(\" + this.textX + \"px,\" + this.textY + \"px, 0)\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PieLabelComponent.prototype, \"attrTransform\", {\n        get: function () {\n            return !this.isIE ? null : \"translate(\" + this.textX + \",\" + this.textY + \")\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PieLabelComponent.prototype, \"textTransition\", {\n        get: function () {\n            return this.isIE || !this.animations ? null : 'transform 0.75s';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PieLabelComponent.prototype.textAnchor = function () {\n        return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n    };\n    PieLabelComponent.prototype.midAngle = function (d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"radius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"color\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieLabelComponent.prototype, \"explodeSlices\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieLabelComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieLabelComponent.prototype, \"labelTrim\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieLabelComponent.prototype, \"labelTrimSize\", void 0);\n    PieLabelComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-pie-label]',\n            template: \"\\n    <title>{{label}}</title>\\n    <svg:g\\n      [attr.transform]=\\\"attrTransform\\\"\\n      [style.transform]=\\\"styleTransform\\\"\\n      [style.transition]=\\\"textTransition\\\">\\n      <svg:text\\n        class=\\\"pie-label\\\"\\n        [class.animation]=\\\"animations\\\"\\n        dy=\\\".35em\\\"\\n        [style.textAnchor]=\\\"textAnchor()\\\"\\n        [style.shapeRendering]=\\\"'crispEdges'\\\">\\n        {{labelTrim ? trimLabel(label, labelTrimSize) : label}}\\n      </svg:text>\\n    </svg:g>\\n    <svg:path\\n      [attr.d]=\\\"line\\\"\\n      [attr.stroke]=\\\"color\\\"\\n      fill=\\\"none\\\"\\n      class=\\\"pie-label-line line\\\"\\n      [class.animation]=\\\"animations\\\">\\n    </svg:path>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [])\n    ], PieLabelComponent);\n    return PieLabelComponent;\n}());\n\nvar PieArcComponent = /** @class */ (function () {\n    function PieArcComponent(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    PieArcComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PieArcComponent.prototype.getGradient = function () {\n        return this.gradient ? this.gradientFill : this.fill;\n    };\n    PieArcComponent.prototype.getPointerEvents = function () {\n        return this.pointerEvents ? 'auto' : 'none';\n    };\n    PieArcComponent.prototype.update = function () {\n        var calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = \"url(#\" + this.radialGradientId + \")\";\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    };\n    PieArcComponent.prototype.calculateArc = function () {\n        var outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc()\n            .innerRadius(this.innerRadius)\n            .outerRadius(outerRadius)\n            .cornerRadius(this.cornerRadius);\n    };\n    PieArcComponent.prototype.loadAnimation = function () {\n        var node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        var calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            var copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            var interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            var interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    };\n    PieArcComponent.prototype.updateAnimation = function () {\n        var node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        var calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            var interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    };\n    PieArcComponent.prototype.onClick = function () {\n        var _this = this;\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(function () { return _this.select.emit(_this.data); }, 200);\n    };\n    PieArcComponent.prototype.onDblClick = function (event$$1) {\n        event$$1.preventDefault();\n        event$$1.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event$$1\n        });\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieArcComponent.prototype, \"startAngle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieArcComponent.prototype, \"endAngle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"innerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"outerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieArcComponent.prototype, \"cornerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieArcComponent.prototype, \"explodeSlices\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieArcComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieArcComponent.prototype, \"animate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieArcComponent.prototype, \"pointerEvents\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieArcComponent.prototype, \"isActive\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieArcComponent.prototype, \"dblclick\", void 0);\n    PieArcComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-pie-arc]',\n            template: \"\\n    <svg:g class=\\\"arc-group\\\">\\n      <svg:defs *ngIf=\\\"gradient\\\">\\n        <svg:g ngx-charts-svg-radial-gradient\\n          [color]=\\\"fill\\\"\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"radialGradientId\\\"\\n          [startOpacity]=\\\"startOpacity\\\"\\n        />\\n      </svg:defs>\\n      <svg:path\\n        [attr.d]=\\\"path\\\"\\n        class=\\\"arc\\\"\\n        [class.active]=\\\"isActive\\\"\\n        [attr.fill]=\\\"getGradient()\\\"\\n        (click)=\\\"onClick()\\\"\\n        (dblclick)=\\\"onDblClick($event)\\\"\\n        (mouseenter)=\\\"activate.emit(data)\\\"\\n        (mouseleave)=\\\"deactivate.emit(data)\\\"\\n        [style.pointer-events]=\\\"getPointerEvents()\\\"\\n      />\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], PieArcComponent);\n    return PieArcComponent;\n}());\n\nvar PieChartComponent = /** @class */ (function (_super) {\n    __extends(PieChartComponent, _super);\n    function PieChartComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.labels = false;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.explodeSlices = false;\n        _this.doughnut = false;\n        _this.arcWidth = 0.25;\n        _this.activeEntries = [];\n        _this.tooltipDisabled = false;\n        _this.trimLabels = true;\n        _this.maxLabelLength = 10;\n        _this.dblclick = new EventEmitter();\n        _this.select = new EventEmitter();\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        return _this;\n    }\n    PieChartComponent.prototype.update = function () {\n        var _this = this;\n        _super.prototype.update.call(this);\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        var xOffset = this.margins[3] + this.dims.width / 2;\n        var yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = \"translate(\" + xOffset + \", \" + yOffset + \")\";\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        this.data = this.results.sort(function (a, b) {\n            return _this.domain.indexOf(a.name) - _this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    };\n    PieChartComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    PieChartComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    PieChartComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    PieChartComponent.prototype.getLegendOptions = function () {\n        return {\n            scaleType: 'ordinal',\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    };\n    PieChartComponent.prototype.onActivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    PieChartComponent.prototype.onDeactivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    PieChartComponent.prototype.hasNoOptionalMarginsSet = function () {\n        return !this.margins || this.margins.length <= 0;\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"labels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PieChartComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PieChartComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"explodeSlices\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"doughnut\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"arcWidth\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieChartComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PieChartComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieChartComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieChartComponent.prototype, \"trimLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieChartComponent.prototype, \"maxLabelLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"dblclick\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PieChartComponent.prototype, \"margins\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieChartComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], PieChartComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], PieChartComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], PieChartComponent.prototype, \"tooltipTemplate\", void 0);\n    PieChartComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-pie-chart',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"translation\\\" class=\\\"pie-chart chart\\\">\\n        <svg:g\\n          ngx-charts-pie-series\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"data\\\"\\n          [showLabels]=\\\"labels\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [trimLabels]=\\\"trimLabels\\\"\\n          [maxLabelLength]=\\\"maxLabelLength\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [innerRadius]=\\\"innerRadius\\\"\\n          [outerRadius]=\\\"outerRadius\\\"\\n          [explodeSlices]=\\\"explodeSlices\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipText]=\\\"tooltipText\\\"\\n          (dblclick)=\\\"dblclick.emit($event)\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".pie-label{font-size:11px}.pie-label.animation{animation:750ms ease-in fadeIn}@keyframes fadeIn{from{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d 750ms}@keyframes drawOut{from{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], PieChartComponent);\n    return PieChartComponent;\n}(BaseChartComponent));\n\nfunction gridSize(dims, len, minWidth) {\n    var rows = 1;\n    var cols = len;\n    var width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    var xScale = scaleBand();\n    var yScale = scaleBand();\n    var width = dims.width;\n    var height = dims.height;\n    var _a = gridSize(dims, data.length, minWidth), columns = _a[0], rows = _a[1];\n    var xDomain = [];\n    var yDomain = [];\n    for (var i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (var i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    var res = [];\n    var total = designatedTotal ? designatedTotal : getTotal(data);\n    var cardWidth = xScale.bandwidth();\n    var cardHeight = yScale.bandwidth();\n    for (var i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(function (d) { return (d ? d.value : 0); }).reduce(function (sum, val) { return sum + val; }, 0);\n}\n\nvar PieGridComponent = /** @class */ (function (_super) {\n    __extends(PieGridComponent, _super);\n    function PieGridComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.tooltipDisabled = false;\n        _this.label = 'Total';\n        _this.minWidth = 150;\n        _this.activeEntries = [];\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [20, 20, 20, 20];\n        return _this;\n    }\n    PieGridComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = \"translate(\" + this.margin[3] + \" , \" + this.margin[0] + \")\";\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    };\n    PieGridComponent.prototype.defaultTooltipText = function (_a) {\n        var data = _a.data;\n        var label = trimLabel(formatLabel(data.name));\n        var val = data.value.toLocaleString();\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + label + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + val + \"</span>\\n    \";\n    };\n    PieGridComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    PieGridComponent.prototype.getSeries = function () {\n        var _this = this;\n        var total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(function (d) {\n            var baselineLabelHeight = 20;\n            var padding = 10;\n            var name = d.data.name;\n            var label = formatLabel(name);\n            var value = d.data.value;\n            var radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            var innerRadius = radius * 0.9;\n            var count = 0;\n            var colors = function () {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return _this.colorScale.getColor(label);\n                }\n            };\n            var xPos = d.x + (d.width - padding) / 2;\n            var yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: \"translate(\" + xPos + \", \" + yPos + \")\",\n                colors: colors,\n                innerRadius: innerRadius,\n                outerRadius: radius,\n                name: name,\n                label: trimLabel(label),\n                total: value,\n                value: value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    };\n    PieGridComponent.prototype.getTotal = function () {\n        return this.results.map(function (d) { return d.value; }).reduce(function (sum, d) { return sum + d; }, 0);\n    };\n    PieGridComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    PieGridComponent.prototype.setColors = function () {\n        this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    PieGridComponent.prototype.onActivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    PieGridComponent.prototype.onDeactivate = function (item, fromLegend) {\n        if (fromLegend === void 0) { fromLegend = false; }\n        item = this.results.find(function (d) {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    var _a, _b, _c;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieGridComponent.prototype, \"designatedTotal\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieGridComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], PieGridComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], PieGridComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieGridComponent.prototype, \"minWidth\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PieGridComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], PieGridComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], PieGridComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], PieGridComponent.prototype, \"tooltipTemplate\", void 0);\n    PieGridComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-pie-grid',\n            template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"pie-grid chart\\\">\\n        <svg:g *ngFor=\\\"let series of series\\\" class=\\\"pie-grid-item\\\" [attr.transform]=\\\"series.transform\\\">\\n          <svg:g\\n            ngx-charts-pie-grid-series\\n            [colors]=\\\"series.colors\\\"\\n            [data]=\\\"series.data\\\"\\n            [innerRadius]=\\\"series.innerRadius\\\"\\n            [outerRadius]=\\\"series.outerRadius\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event)\\\"\\n            ngx-tooltip\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipPlacement]=\\\"'top'\\\"\\n            [tooltipType]=\\\"'tooltip'\\\"\\n            [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText({ data: series })\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [tooltipContext]=\\\"series.data[0].data\\\"\\n            (activate)=\\\"onActivate($event)\\\"\\n            (deactivate)=\\\"onDeactivate($event)\\\"\\n          />\\n          <svg:text\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"label percent-label\\\"\\n            dy=\\\"-0.5em\\\"\\n            x=\\\"0\\\"\\n            y=\\\"5\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"series.percent\\\"\\n            [countSuffix]=\\\"'%'\\\"\\n            text-anchor=\\\"middle\\\"\\n          ></svg:text>\\n          <svg:text *ngIf=\\\"!animations\\\" class=\\\"label percent-label\\\" dy=\\\"-0.5em\\\" x=\\\"0\\\" y=\\\"5\\\" text-anchor=\\\"middle\\\">\\n            {{ series.percent.toLocaleString() }}\\n          </svg:text>\\n          <svg:text class=\\\"label\\\" dy=\\\"0.5em\\\" x=\\\"0\\\" y=\\\"5\\\" text-anchor=\\\"middle\\\">\\n            {{ series.label }}\\n          </svg:text>\\n          <svg:text\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"label\\\"\\n            dy=\\\"1.23em\\\"\\n            x=\\\"0\\\"\\n            [attr.y]=\\\"series.outerRadius\\\"\\n            text-anchor=\\\"middle\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"series.total\\\"\\n            [countPrefix]=\\\"label + ': '\\\"\\n          ></svg:text>\\n          <svg:text\\n            *ngIf=\\\"!animations\\\"\\n            class=\\\"label\\\"\\n            dy=\\\"1.23em\\\"\\n            x=\\\"0\\\"\\n            [attr.y]=\\\"series.outerRadius\\\"\\n            text-anchor=\\\"middle\\\"\\n          >\\n            {{ label }}: {{ series.total.toLocaleString() }}\\n          </svg:text>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], PieGridComponent);\n    return PieGridComponent;\n}(BaseChartComponent));\n\nvar PieGridSeriesComponent = /** @class */ (function () {\n    function PieGridSeriesComponent(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    PieGridSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PieGridSeriesComponent.prototype.update = function () {\n        this.layout = pie()\n            .value(function (d) { return d.data.value; })\n            .sort(null);\n        this.arcs = this.getArcs();\n    };\n    PieGridSeriesComponent.prototype.getArcs = function () {\n        var _this = this;\n        return this.layout(this.data).map(function (arc$$1, index) {\n            var label = arc$$1.data.data.name;\n            var other = arc$$1.data.data.other;\n            if (index === 0) {\n                arc$$1.startAngle = 0;\n            }\n            var color = _this.colors(label);\n            return {\n                data: arc$$1.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc$$1.startAngle,\n                endAngle: arc$$1.endAngle,\n                animate: _this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    };\n    PieGridSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(this.data[0].data);\n    };\n    PieGridSeriesComponent.prototype.trackBy = function (index, item) {\n        return item.data.name;\n    };\n    PieGridSeriesComponent.prototype.label = function (arc$$1) {\n        return arc$$1.data.name;\n    };\n    PieGridSeriesComponent.prototype.color = function (arc$$1) {\n        return this.colors(this.label(arc$$1));\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"innerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"outerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieGridSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieGridSeriesComponent.prototype, \"deactivate\", void 0);\n    PieGridSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-pie-grid-series]',\n            template: \"\\n    <svg:g class=\\\"pie-grid-arcs\\\">\\n      <svg:g\\n        ngx-charts-pie-arc\\n        *ngFor=\\\"let arc of arcs; trackBy: trackBy\\\"\\n        [attr.class]=\\\"arc.class\\\"\\n        [startAngle]=\\\"arc.startAngle\\\"\\n        [endAngle]=\\\"arc.endAngle\\\"\\n        [innerRadius]=\\\"innerRadius\\\"\\n        [outerRadius]=\\\"outerRadius\\\"\\n        [fill]=\\\"color(arc)\\\"\\n        [value]=\\\"arc.data.value\\\"\\n        [data]=\\\"arc.data\\\"\\n        [gradient]=\\\"false\\\"\\n        [pointerEvents]=\\\"arc.pointerEvents\\\"\\n        [animate]=\\\"arc.animate\\\"\\n        (select)=\\\"onClick($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], PieGridSeriesComponent);\n    return PieGridSeriesComponent;\n}());\n\nvar PieSeriesComponent = /** @class */ (function () {\n    function PieSeriesComponent() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n    }\n    PieSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PieSeriesComponent.prototype.update = function () {\n        var pieGenerator = pie()\n            .value(function (d) { return d.value; })\n            .sort(null);\n        var arcData = pieGenerator(this.series);\n        this.max = max(arcData, function (d) {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    };\n    PieSeriesComponent.prototype.midAngle = function (d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    };\n    PieSeriesComponent.prototype.outerArc = function () {\n        var factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    };\n    PieSeriesComponent.prototype.calculateLabelPositions = function (pieData) {\n        var _this = this;\n        var factor = 1.5;\n        var minDistance = 10;\n        var labelPositions = pieData;\n        labelPositions.forEach(function (d) {\n            d.pos = _this.outerArc().centroid(d);\n            d.pos[0] = factor * _this.outerRadius * (_this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (var i = 0; i < labelPositions.length - 1; i++) {\n            var a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (var j = i + 1; j < labelPositions.length; j++) {\n                var b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    var o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    };\n    PieSeriesComponent.prototype.labelVisible = function (myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    };\n    PieSeriesComponent.prototype.getTooltipTitle = function (a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    };\n    PieSeriesComponent.prototype.labelText = function (myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    };\n    PieSeriesComponent.prototype.label = function (myArc) {\n        return formatLabel(myArc.data.name);\n    };\n    PieSeriesComponent.prototype.defaultTooltipText = function (myArc) {\n        var label = this.label(myArc);\n        var val = formatLabel(myArc.data.value);\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(label) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + val + \"</span>\\n    \";\n    };\n    PieSeriesComponent.prototype.color = function (myArc) {\n        return this.colors.getColor(this.label(myArc));\n    };\n    PieSeriesComponent.prototype.trackBy = function (index, item) {\n        return item.data.name;\n    };\n    PieSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    PieSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"series\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"innerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"outerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"explodeSlices\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"showLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieSeriesComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], PieSeriesComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieSeriesComponent.prototype, \"trimLabels\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], PieSeriesComponent.prototype, \"maxLabelLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], PieSeriesComponent.prototype, \"tooltipText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], PieSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], PieSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], PieSeriesComponent.prototype, \"dblclick\", void 0);\n    PieSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-pie-series]',\n            template: \"\\n    <svg:g *ngFor=\\\"let arc of data; trackBy: trackBy\\\">\\n      <svg:g\\n        ngx-charts-pie-label\\n        *ngIf=\\\"labelVisible(arc)\\\"\\n        [data]=\\\"arc\\\"\\n        [radius]=\\\"outerRadius\\\"\\n        [color]=\\\"color(arc)\\\"\\n        [label]=\\\"labelText(arc)\\\"\\n        [labelTrim]=\\\"trimLabels\\\"\\n        [labelTrimSize]=\\\"maxLabelLength\\\"\\n        [max]=\\\"max\\\"\\n        [value]=\\\"arc.value\\\"\\n        [explodeSlices]=\\\"explodeSlices\\\"\\n        [animations]=\\\"animations\\\"\\n      ></svg:g>\\n      <svg:g\\n        ngx-charts-pie-arc\\n        [startAngle]=\\\"arc.startAngle\\\"\\n        [endAngle]=\\\"arc.endAngle\\\"\\n        [innerRadius]=\\\"innerRadius\\\"\\n        [outerRadius]=\\\"outerRadius\\\"\\n        [fill]=\\\"color(arc)\\\"\\n        [value]=\\\"arc.data.value\\\"\\n        [gradient]=\\\"gradient\\\"\\n        [data]=\\\"arc.data\\\"\\n        [max]=\\\"max\\\"\\n        [explodeSlices]=\\\"explodeSlices\\\"\\n        [isActive]=\\\"isActive(arc.data)\\\"\\n        [animate]=\\\"animations\\\"\\n        (select)=\\\"onClick($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (deactivate)=\\\"deactivate.emit($event)\\\"\\n        (dblclick)=\\\"dblclick.emit($event)\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipTitle]=\\\"getTooltipTitle(arc)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"arc.data\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], PieSeriesComponent);\n    return PieSeriesComponent;\n}());\n\nvar PieChartModule = /** @class */ (function () {\n    function PieChartModule() {\n    }\n    PieChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                AdvancedPieChartComponent,\n                PieLabelComponent,\n                PieArcComponent,\n                PieChartComponent,\n                PieGridComponent,\n                PieGridSeriesComponent,\n                PieSeriesComponent\n            ],\n            exports: [\n                AdvancedPieChartComponent,\n                PieLabelComponent,\n                PieArcComponent,\n                PieChartComponent,\n                PieGridComponent,\n                PieGridSeriesComponent,\n                PieSeriesComponent\n            ]\n        })\n    ], PieChartModule);\n    return PieChartModule;\n}());\n\nvar PolarChartModule = /** @class */ (function () {\n    function PolarChartModule() {\n    }\n    PolarChartModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule, PieChartModule, LineChartModule],\n            declarations: [\n                PolarChartComponent,\n                PolarSeriesComponent\n            ],\n            exports: [\n                PolarChartComponent,\n                PolarSeriesComponent\n            ]\n        })\n    ], PolarChartModule);\n    return PolarChartModule;\n}());\n\nvar CardComponent = /** @class */ (function () {\n    function CardComponent(element, cd, zone) {\n        this.cd = cd;\n        this.zone = zone;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    CardComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    CardComponent.prototype.ngOnDestroy = function () {\n        cancelAnimationFrame(this.animationReq);\n    };\n    CardComponent.prototype.update = function () {\n        var _this = this;\n        this.zone.run(function () {\n            var hasValue = _this.data && typeof _this.data.value !== 'undefined';\n            var valueFormatting = _this.valueFormatting || (function (card) { return card.value.toLocaleString(); });\n            var labelFormatting = _this.labelFormatting || (function (card) { return escapeLabel(trimLabel(card.label, 55)); });\n            _this.transform = \"translate(\" + _this.x + \" , \" + _this.y + \")\";\n            _this.textWidth = Math.max(0, _this.width) - _this.textPadding[1] - _this.textPadding[3];\n            _this.cardWidth = Math.max(0, _this.width);\n            _this.cardHeight = Math.max(0, _this.height);\n            _this.label = _this.label ? _this.label : _this.data.name;\n            var cardData = {\n                label: _this.label,\n                data: _this.data,\n                value: _this.data.value\n            };\n            _this.formattedLabel = labelFormatting(cardData);\n            _this.transformBand = \"translate(0 , \" + (_this.cardHeight - _this.bandHeight) + \")\";\n            var value = hasValue ? valueFormatting(cardData) : '';\n            _this.value = _this.paddedValue(value);\n            _this.setPadding();\n            _this.bandPath = roundedRect(0, 0, _this.cardWidth, _this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(function () {\n                _this.scaleText();\n                _this.value = value;\n                if (hasValue && !_this.initialized) {\n                    setTimeout(function () { return _this.startCount(); }, 20);\n                }\n            }, 8);\n        });\n    };\n    CardComponent.prototype.paddedValue = function (value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    };\n    CardComponent.prototype.startCount = function () {\n        var _this = this;\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            var val_1 = this.data.value;\n            var decs = decimalChecker(val_1);\n            var valueFormatting_1 = this.valueFormatting || (function (card) { return card.value.toLocaleString(); });\n            var callback = function (_a) {\n                var value = _a.value, finished = _a.finished;\n                _this.zone.run(function () {\n                    value = finished ? val_1 : value;\n                    _this.value = valueFormatting_1({ label: _this.label, data: _this.data, value: value });\n                    if (!finished) {\n                        _this.value = _this.paddedValue(_this.value);\n                    }\n                    _this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val_1, decs, 1, callback);\n            this.initialized = true;\n        }\n    };\n    CardComponent.prototype.scaleText = function () {\n        var _this = this;\n        this.zone.run(function () {\n            var _a = _this.textEl.nativeElement.getBoundingClientRect(), width = _a.width, height = _a.height;\n            if (width === 0 || height === 0) {\n                return;\n            }\n            var textPadding = (_this.textPadding[1] = _this.textPadding[3] = _this.cardWidth / 8);\n            var availableWidth = _this.cardWidth - 2 * textPadding;\n            var availableHeight = _this.cardHeight / 3;\n            var resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            _this.textFontSize = Math.floor(_this.textFontSize * resizeScale);\n            _this.labelFontSize = Math.min(_this.textFontSize, 15);\n            _this.setPadding();\n            _this.cd.markForCheck();\n        });\n    };\n    CardComponent.prototype.setPadding = function () {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        var padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    };\n    CardComponent.prototype.onClick = function () {\n        this.select.emit(this.data);\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"color\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"bandColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"textColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"x\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"y\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], CardComponent.prototype, \"medianSize\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], CardComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CardComponent.prototype, \"select\", void 0);\n    __decorate([\n        ViewChild('textEl', { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object)\n    ], CardComponent.prototype, \"textEl\", void 0);\n    CardComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-card]',\n            template: \"\\n    <svg:g [attr.transform]=\\\"transform\\\" class=\\\"cell\\\" (click)=\\\"onClick()\\\">\\n      <svg:rect class=\\\"card\\\" [style.fill]=\\\"color\\\" [attr.width]=\\\"cardWidth\\\" [attr.height]=\\\"cardHeight\\\" rx=\\\"3\\\" ry=\\\"3\\\" />\\n      <svg:path\\n        *ngIf=\\\"bandColor && bandColor !== color\\\"\\n        class=\\\"card-band\\\"\\n        [attr.fill]=\\\"bandColor\\\"\\n        [attr.transform]=\\\"transformBand\\\"\\n        stroke=\\\"none\\\"\\n        [attr.d]=\\\"bandPath\\\"\\n      />\\n      <title>{{ label }}</title>\\n      <svg:foreignObject\\n        class=\\\"trimmed-label\\\"\\n        x=\\\"5\\\"\\n        [attr.x]=\\\"textPadding[3]\\\"\\n        [attr.y]=\\\"cardHeight - textPadding[2]\\\"\\n        [attr.width]=\\\"textWidth\\\"\\n        [attr.height]=\\\"labelFontSize + textPadding[2]\\\"\\n        alignment-baseline=\\\"hanging\\\"\\n      >\\n        <xhtml:p\\n          [style.color]=\\\"textColor\\\"\\n          [style.fontSize.px]=\\\"labelFontSize\\\"\\n          [style.lineHeight.px]=\\\"labelFontSize\\\"\\n          [innerHTML]=\\\"formattedLabel\\\"\\n        >\\n        </xhtml:p>\\n      </svg:foreignObject>\\n      <svg:text\\n        #textEl\\n        class=\\\"value-text\\\"\\n        [attr.x]=\\\"textPadding[3]\\\"\\n        [attr.y]=\\\"textPadding[0]\\\"\\n        [style.fill]=\\\"textColor\\\"\\n        text-anchor=\\\"start\\\"\\n        alignment-baseline=\\\"hanging\\\"\\n        [style.font-size.pt]=\\\"textFontSize\\\"\\n      >\\n        {{ value }}\\n      </svg:text>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_b = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _b : Object, typeof (_c = typeof ChangeDetectorRef !== \"undefined\" && ChangeDetectorRef) === \"function\" ? _c : Object, typeof (_d = typeof NgZone !== \"undefined\" && NgZone) === \"function\" ? _d : Object])\n    ], CardComponent);\n    return CardComponent;\n}());\n\nvar CardSeriesComponent = /** @class */ (function () {\n    function CardSeriesComponent() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    CardSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    CardSeriesComponent.prototype.update = function () {\n        if (this.data.length > 2) {\n            var valueFormatting_1 = this.valueFormatting || (function (card) { return card.value.toLocaleString(); });\n            var sortedLengths = this.data\n                .map(function (d) {\n                var hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting_1({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort(function (a, b) { return b - a; });\n            var idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        var cards = this.getCards();\n        this.cards = cards.filter(function (d) { return d.data.value !== null; });\n        this.emptySlots = cards.filter(function (d) { return d.data.value === null; });\n    };\n    CardSeriesComponent.prototype.getCards = function () {\n        var _this = this;\n        var yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        var xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map(function (d, index) {\n            var label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            var value = d.data.value;\n            var valueColor = label ? _this.colors.getColor(label) : _this.emptyColor;\n            var color = _this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color: color,\n                bandColor: _this.bandColor || valueColor,\n                textColor: _this.textColor || invertColor(color),\n                label: label,\n                data: d.data,\n                tooltipText: label + \": \" + value\n            };\n        });\n    };\n    CardSeriesComponent.prototype.trackBy = function (index, card) {\n        return card.label;\n    };\n    CardSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], CardSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], CardSeriesComponent.prototype, \"slots\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"innerPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"cardColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"bandColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"emptyColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"textColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], CardSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CardSeriesComponent.prototype, \"select\", void 0);\n    CardSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-card-series]',\n            template: \"\\n    <svg:rect\\n      *ngFor=\\\"let c of emptySlots; trackBy: trackBy\\\"\\n      class=\\\"card-empty\\\"\\n      [attr.x]=\\\"c.x\\\"\\n      [attr.y]=\\\"c.y\\\"\\n      [style.fill]=\\\"emptyColor\\\"\\n      [attr.width]=\\\"c.width\\\"\\n      [attr.height]=\\\"c.height\\\"\\n      rx=\\\"3\\\"\\n      ry=\\\"3\\\"\\n    />\\n    <svg:g\\n      ngx-charts-card\\n      *ngFor=\\\"let c of cards; trackBy: trackBy\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [color]=\\\"c.color\\\"\\n      [bandColor]=\\\"c.bandColor\\\"\\n      [textColor]=\\\"c.textColor\\\"\\n      [data]=\\\"c.data\\\"\\n      [label]=\\\"c.label\\\"\\n      [medianSize]=\\\"medianSize\\\"\\n      [valueFormatting]=\\\"valueFormatting\\\"\\n      [labelFormatting]=\\\"labelFormatting\\\"\\n      [animations]=\\\"animations\\\"\\n      (select)=\\\"onClick($event)\\\"\\n    />\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], CardSeriesComponent);\n    return CardSeriesComponent;\n}());\n\nvar NumberCardComponent = /** @class */ (function (_super) {\n    __extends(NumberCardComponent, _super);\n    function NumberCardComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.emptyColor = 'rgba(0, 0, 0, 0)';\n        _this.innerPadding = 15;\n        _this.margin = [10, 10, 10, 10];\n        return _this;\n    }\n    Object.defineProperty(NumberCardComponent.prototype, \"clickable\", {\n        get: function () {\n            return !!this.select.observers.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumberCardComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n        var size = gridSize(this.dims, this.results.length, 150);\n        var N = size[0] * size[1];\n        var data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    };\n    NumberCardComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.label; });\n    };\n    NumberCardComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    NumberCardComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], NumberCardComponent.prototype, \"cardColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], NumberCardComponent.prototype, \"bandColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], NumberCardComponent.prototype, \"emptyColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NumberCardComponent.prototype, \"innerPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], NumberCardComponent.prototype, \"textColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NumberCardComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NumberCardComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], NumberCardComponent.prototype, \"designatedTotal\", void 0);\n    NumberCardComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-number-card',\n            template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"number-card chart\\\" [class.clickable]=\\\"clickable\\\">\\n        <svg:g\\n          ngx-charts-card-series\\n          [colors]=\\\"colors\\\"\\n          [cardColor]=\\\"cardColor\\\"\\n          [bandColor]=\\\"bandColor\\\"\\n          [textColor]=\\\"textColor\\\"\\n          [emptyColor]=\\\"emptyColor\\\"\\n          [data]=\\\"data\\\"\\n          [dims]=\\\"dims\\\"\\n          [innerPadding]=\\\"innerPadding\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [animations]=\\\"animations\\\"\\n          (select)=\\\"onClick($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], NumberCardComponent);\n    return NumberCardComponent;\n}(BaseChartComponent));\n\nvar NumberCardModule = /** @class */ (function () {\n    function NumberCardModule() {\n    }\n    NumberCardModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                CardComponent,\n                CardSeriesComponent,\n                NumberCardComponent\n            ],\n            exports: [\n                CardComponent,\n                CardSeriesComponent,\n                NumberCardComponent\n            ]\n        })\n    ], NumberCardModule);\n    return NumberCardModule;\n}());\n\nvar TreeMapCellComponent = /** @class */ (function () {\n    function TreeMapCellComponent(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    TreeMapCellComponent.prototype.ngOnChanges = function () {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (function (value) { return value.toLocaleString(); });\n        var labelFormatting = this.labelFormatting || (function (cell) { return escapeLabel(trimLabel(cell.label, 55)); });\n        var cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n        this.gradientStops = this.getGradientStops();\n    };\n    TreeMapCellComponent.prototype.update = function () {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    };\n    TreeMapCellComponent.prototype.loadAnimation = function () {\n        var node = select(this.element).select('.cell');\n        node\n            .attr('opacity', 0)\n            .attr('x', this.x)\n            .attr('y', this.y);\n        this.animateToCurrentForm();\n    };\n    TreeMapCellComponent.prototype.getTextColor = function () {\n        return invertColor(this.fill);\n    };\n    TreeMapCellComponent.prototype.animateToCurrentForm = function () {\n        var node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n    };\n    TreeMapCellComponent.prototype.onClick = function () {\n        this.select.emit(this.data);\n    };\n    TreeMapCellComponent.prototype.getGradientStops = function () {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"fill\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"x\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"y\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"width\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"label\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"valueType\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapCellComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapCellComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellComponent.prototype, \"select\", void 0);\n    TreeMapCellComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-tree-map-cell]',\n            template: \"\\n    <svg:g>\\n      <defs *ngIf=\\\"gradient\\\">\\n        <svg:g ngx-charts-svg-linear-gradient orientation=\\\"vertical\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n      </defs>\\n      <svg:rect\\n        [attr.fill]=\\\"gradient ? gradientUrl : fill\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        [attr.x]=\\\"x\\\"\\n        [attr.y]=\\\"y\\\"\\n        [style.cursor]=\\\"'pointer'\\\"\\n        class=\\\"cell\\\"\\n        (click)=\\\"onClick()\\\"\\n      />\\n      <svg:foreignObject\\n        *ngIf=\\\"width >= 70 && height >= 35\\\"\\n        [attr.x]=\\\"x\\\"\\n        [attr.y]=\\\"y\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        class=\\\"treemap-label\\\"\\n        [style.pointer-events]=\\\"'none'\\\"\\n      >\\n        <xhtml:p [style.color]=\\\"getTextColor()\\\" [style.height]=\\\"height + 'px'\\\" [style.width]=\\\"width + 'px'\\\">\\n          <xhtml:span class=\\\"treemap-label\\\" [innerHTML]=\\\"formattedLabel\\\"> </xhtml:span>\\n          <xhtml:br />\\n          <xhtml:span\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"treemap-val\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"value\\\"\\n            [valueFormatting]=\\\"valueFormatting\\\"\\n          >\\n          </xhtml:span>\\n          <xhtml:span *ngIf=\\\"!animations\\\" class=\\\"treemap-val\\\">\\n            {{ formattedValue }}\\n          </xhtml:span>\\n        </xhtml:p>\\n      </svg:foreignObject>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        }),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object])\n    ], TreeMapCellComponent);\n    return TreeMapCellComponent;\n}());\n\nvar TreeMapCellSeriesComponent = /** @class */ (function () {\n    function TreeMapCellSeriesComponent() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    TreeMapCellSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.cells = this.getCells();\n    };\n    TreeMapCellSeriesComponent.prototype.getCells = function () {\n        var _this = this;\n        return this.data.children\n            .filter(function (d) {\n            return d.depth === 1;\n        })\n            .map(function (d, index) {\n            var label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: _this.colors.getColor(label),\n                label: label,\n                value: d.value,\n                valueType: d.valueType\n            };\n        });\n    };\n    TreeMapCellSeriesComponent.prototype.getTooltipText = function (_a) {\n        var label = _a.label, value = _a.value;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(label) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n    \";\n    };\n    TreeMapCellSeriesComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    TreeMapCellSeriesComponent.prototype.trackBy = function (index, item) {\n        return item.label;\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"data\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"dims\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapCellSeriesComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapCellSeriesComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], TreeMapCellSeriesComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapCellSeriesComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapCellSeriesComponent.prototype, \"select\", void 0);\n    TreeMapCellSeriesComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-tree-map-cell-series]',\n            template: \"\\n    <svg:g\\n      ngx-charts-tree-map-cell\\n      *ngFor=\\\"let c of cells; trackBy: trackBy\\\"\\n      [data]=\\\"c.data\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [fill]=\\\"c.fill\\\"\\n      [label]=\\\"c.label\\\"\\n      [value]=\\\"c.value\\\"\\n      [valueType]=\\\"c.valueType\\\"\\n      [valueFormatting]=\\\"valueFormatting\\\"\\n      [labelFormatting]=\\\"labelFormatting\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [animations]=\\\"animations\\\"\\n      (select)=\\\"onClick($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(c)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"c.data\\\"\\n    ></svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], TreeMapCellSeriesComponent);\n    return TreeMapCellSeriesComponent;\n}());\n\nvar TreeMapComponent = /** @class */ (function (_super) {\n    __extends(TreeMapComponent, _super);\n    function TreeMapComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.tooltipDisabled = false;\n        _this.gradient = false;\n        _this.select = new EventEmitter();\n        _this.margin = [10, 10, 10, 10];\n        return _this;\n    }\n    TreeMapComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        var rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        var root = stratify()\n            .id(function (d) {\n            var label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(function (d) { return (d.isRoot ? null : 'root'); })([rootNode].concat(this.results))\n            .sum(function (d) { return d.value; });\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = \"translate(\" + this.dims.xOffset + \" , \" + this.margin[0] + \")\";\n    };\n    TreeMapComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    TreeMapComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    TreeMapComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    var _a;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapComponent.prototype, \"results\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapComponent.prototype, \"labelFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeMapComponent.prototype, \"gradient\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TreeMapComponent.prototype, \"select\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _a : Object)\n    ], TreeMapComponent.prototype, \"tooltipTemplate\", void 0);\n    TreeMapComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-tree-map',\n            template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"tree-map chart\\\">\\n        <svg:g\\n          ngx-charts-tree-map-cell-series\\n          [colors]=\\\"colors\\\"\\n          [data]=\\\"data\\\"\\n          [dims]=\\\"dims\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          (select)=\\\"onClick($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], TreeMapComponent);\n    return TreeMapComponent;\n}(BaseChartComponent));\n\nvar TreeMapModule = /** @class */ (function () {\n    function TreeMapModule() {\n    }\n    TreeMapModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule],\n            declarations: [\n                TreeMapCellComponent,\n                TreeMapCellSeriesComponent,\n                TreeMapComponent\n            ],\n            exports: [\n                TreeMapCellComponent,\n                TreeMapCellSeriesComponent,\n                TreeMapComponent\n            ]\n        })\n    ], TreeMapModule);\n    return TreeMapModule;\n}());\n\nvar LinearGaugeComponent = /** @class */ (function (_super) {\n    __extends(LinearGaugeComponent, _super);\n    function LinearGaugeComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.min = 0;\n        _this.max = 100;\n        _this.value = 0;\n        _this.margin = [10, 20, 10, 20];\n        _this.valueResizeScale = 1;\n        _this.unitsResizeScale = 1;\n        _this.valueTextTransform = '';\n        _this.valueTranslate = '';\n        _this.unitsTextTransform = '';\n        _this.unitsTranslate = '';\n        return _this;\n    }\n    LinearGaugeComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        _super.prototype.ngAfterViewInit.call(this);\n        setTimeout(function () {\n            _this.scaleText('value');\n            _this.scaleText('units');\n        });\n    };\n    LinearGaugeComponent.prototype.update = function () {\n        var _this = this;\n        _super.prototype.update.call(this);\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        var xOffset = this.margin[3] + this.dims.width / 2;\n        var yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = \"translate(\" + xOffset + \", \" + yOffset + \")\";\n        this.transformLine = \"translate(\" + (this.margin[3] + this.valueScale(this.previousValue)) + \", \" + yOffset + \")\";\n        this.valueTranslate = \"translate(0, -15)\";\n        this.unitsTranslate = \"translate(0, 15)\";\n        setTimeout(function () { return _this.scaleText('value'); }, 50);\n        setTimeout(function () { return _this.scaleText('units'); }, 50);\n    };\n    LinearGaugeComponent.prototype.getValueDomain = function () {\n        return [this.min, this.max];\n    };\n    LinearGaugeComponent.prototype.getValueScale = function () {\n        return scaleLinear()\n            .range([0, this.dims.width])\n            .domain(this.valueDomain);\n    };\n    LinearGaugeComponent.prototype.getDisplayValue = function () {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    };\n    LinearGaugeComponent.prototype.scaleText = function (element, repeat) {\n        var _this = this;\n        if (repeat === void 0) { repeat = true; }\n        var el;\n        var resizeScale;\n        if (element === 'value') {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        var _a = el.nativeElement.getBoundingClientRect(), width = _a.width, height = _a.height;\n        if (width === 0 || height === 0)\n            return;\n        var oldScale = resizeScale;\n        var availableWidth = this.dims.width;\n        var availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        var resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        var resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === 'value') {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = \"scale(\" + resizeScale + \", \" + resizeScale + \")\";\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = \"scale(\" + resizeScale + \", \" + resizeScale + \")\";\n            }\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(function () {\n                    _this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    };\n    LinearGaugeComponent.prototype.onClick = function () {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    };\n    LinearGaugeComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LinearGaugeComponent.prototype, \"min\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LinearGaugeComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LinearGaugeComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LinearGaugeComponent.prototype, \"units\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LinearGaugeComponent.prototype, \"previousValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LinearGaugeComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        ViewChild('valueTextEl', { static: false }),\n        __metadata(\"design:type\", typeof (_a = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _a : Object)\n    ], LinearGaugeComponent.prototype, \"valueTextEl\", void 0);\n    __decorate([\n        ViewChild('unitsTextEl', { static: false }),\n        __metadata(\"design:type\", typeof (_b = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _b : Object)\n    ], LinearGaugeComponent.prototype, \"unitsTextEl\", void 0);\n    LinearGaugeComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-linear-gauge',\n            template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\" (click)=\\\"onClick()\\\">\\n      <svg:g class=\\\"linear-gauge chart\\\">\\n        <svg:g\\n          ngx-charts-bar\\n          class=\\\"background-bar\\\"\\n          [width]=\\\"dims.width\\\"\\n          [height]=\\\"3\\\"\\n          [x]=\\\"margin[3]\\\"\\n          [y]=\\\"dims.height / 2 + margin[0] - 2\\\"\\n          [data]=\\\"{}\\\"\\n          [orientation]=\\\"'horizontal'\\\"\\n          [roundEdges]=\\\"true\\\"\\n          [animations]=\\\"animations\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-bar\\n          [width]=\\\"valueScale(value)\\\"\\n          [height]=\\\"3\\\"\\n          [x]=\\\"margin[3]\\\"\\n          [y]=\\\"dims.height / 2 + margin[0] - 2\\\"\\n          [fill]=\\\"colors.getColor(units)\\\"\\n          [data]=\\\"{}\\\"\\n          [orientation]=\\\"'horizontal'\\\"\\n          [roundEdges]=\\\"true\\\"\\n          [animations]=\\\"animations\\\"\\n        ></svg:g>\\n\\n        <svg:line\\n          *ngIf=\\\"hasPreviousValue\\\"\\n          [attr.transform]=\\\"transformLine\\\"\\n          x1=\\\"0\\\"\\n          y1=\\\"5\\\"\\n          x2=\\\"0\\\"\\n          y2=\\\"15\\\"\\n          [attr.stroke]=\\\"colors.getColor(units)\\\"\\n        />\\n\\n        <svg:line\\n          *ngIf=\\\"hasPreviousValue\\\"\\n          [attr.transform]=\\\"transformLine\\\"\\n          x1=\\\"0\\\"\\n          y1=\\\"-5\\\"\\n          x2=\\\"0\\\"\\n          y2=\\\"-15\\\"\\n          [attr.stroke]=\\\"colors.getColor(units)\\\"\\n        />\\n\\n        <svg:g [attr.transform]=\\\"transform\\\">\\n          <svg:g [attr.transform]=\\\"valueTranslate\\\">\\n            <svg:text\\n              #valueTextEl\\n              class=\\\"value\\\"\\n              [style.textAnchor]=\\\"'middle'\\\"\\n              [attr.transform]=\\\"valueTextTransform\\\"\\n              alignment-baseline=\\\"after-edge\\\"\\n            >\\n              {{ displayValue }}\\n            </svg:text>\\n          </svg:g>\\n\\n          <svg:g [attr.transform]=\\\"unitsTranslate\\\">\\n            <svg:text\\n              #unitsTextEl\\n              class=\\\"units\\\"\\n              [style.textAnchor]=\\\"'middle'\\\"\\n              [attr.transform]=\\\"unitsTextTransform\\\"\\n              alignment-baseline=\\\"before-edge\\\"\\n            >\\n              {{ units }}\\n            </svg:text>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:rgba(0,0,0,.05)}.linear-gauge .units{fill:#666}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], LinearGaugeComponent);\n    return LinearGaugeComponent;\n}(BaseChartComponent));\n\nvar GaugeComponent = /** @class */ (function (_super) {\n    __extends(GaugeComponent, _super);\n    function GaugeComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.legend = false;\n        _this.legendTitle = 'Legend';\n        _this.legendPosition = 'right';\n        _this.min = 0;\n        _this.max = 100;\n        _this.bigSegments = 10;\n        _this.smallSegments = 5;\n        _this.showAxis = true;\n        _this.startAngle = -120;\n        _this.angleSpan = 240;\n        _this.activeEntries = [];\n        _this.tooltipDisabled = false;\n        _this.showText = true;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.resizeScale = 1;\n        _this.rotation = '';\n        _this.textTransform = 'scale(1, 1)';\n        _this.cornerRadius = 10;\n        return _this;\n    }\n    GaugeComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        _super.prototype.ngAfterViewInit.call(this);\n        setTimeout(function () { return _this.scaleText(); });\n    };\n    GaugeComponent.prototype.update = function () {\n        var _this = this;\n        _super.prototype.update.call(this);\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        var xOffset = this.margin[3] + this.dims.width / 2;\n        var yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = \"translate(\" + xOffset + \", \" + yOffset + \")\";\n        this.rotation = \"rotate(\" + this.startAngle + \")\";\n        setTimeout(function () { return _this.scaleText(); }, 50);\n    };\n    GaugeComponent.prototype.getArcs = function () {\n        var arcs = [];\n        var availableRadius = this.outerRadius * 0.7;\n        var radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        var arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        var i = 0;\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var d = _a[_i];\n            var outerRadius = this.outerRadius - i * radiusPerArc;\n            var innerRadius = outerRadius - arcWidth;\n            var backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius: innerRadius,\n                outerRadius: outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            var valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius: innerRadius,\n                outerRadius: outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            var arc$$1 = {\n                backgroundArc: backgroundArc,\n                valueArc: valueArc\n            };\n            arcs.push(arc$$1);\n            i++;\n        }\n        return arcs;\n    };\n    GaugeComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    GaugeComponent.prototype.getValueDomain = function () {\n        var values = this.results.map(function (d) { return d.value; });\n        var dataMin = Math.min.apply(Math, values);\n        var dataMax = Math.max.apply(Math, values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    };\n    GaugeComponent.prototype.getValueScale = function () {\n        return scaleLinear()\n            .range([0, this.angleSpan])\n            .nice()\n            .domain(this.valueDomain);\n    };\n    GaugeComponent.prototype.getDisplayValue = function () {\n        var value = this.results.map(function (d) { return d.value; }).reduce(function (a, b) { return a + b; }, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    };\n    GaugeComponent.prototype.scaleText = function (repeat) {\n        var _this = this;\n        if (repeat === void 0) { repeat = true; }\n        if (!this.showText) {\n            return;\n        }\n        var width = this.textEl.nativeElement.getBoundingClientRect().width;\n        var oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            var availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = \"scale(\" + this.resizeScale + \", \" + this.resizeScale + \")\";\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(function () { return _this.scaleText(false); }, 50);\n            }\n        }\n    };\n    GaugeComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    GaugeComponent.prototype.getLegendOptions = function () {\n        return {\n            scaleType: 'ordinal',\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    };\n    GaugeComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    GaugeComponent.prototype.onActivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item].concat(this.activeEntries);\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    };\n    GaugeComponent.prototype.onDeactivate = function (item) {\n        var idx = this.activeEntries.findIndex(function (d) {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    };\n    GaugeComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    };\n    GaugeComponent.prototype.trackBy = function (index, item) {\n        return item.valueArc.data.name;\n    };\n    var _a, _b, _c, _d;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeComponent.prototype, \"legend\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], GaugeComponent.prototype, \"legendTitle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], GaugeComponent.prototype, \"legendPosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"min\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], GaugeComponent.prototype, \"textValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], GaugeComponent.prototype, \"units\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"bigSegments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"smallSegments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], GaugeComponent.prototype, \"results\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeComponent.prototype, \"showAxis\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"startAngle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeComponent.prototype, \"angleSpan\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], GaugeComponent.prototype, \"activeEntries\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeComponent.prototype, \"axisTickFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], GaugeComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeComponent.prototype, \"showText\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], GaugeComponent.prototype, \"margin\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_a = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _a : Object)\n    ], GaugeComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", typeof (_b = typeof EventEmitter !== \"undefined\" && EventEmitter) === \"function\" ? _b : Object)\n    ], GaugeComponent.prototype, \"deactivate\", void 0);\n    __decorate([\n        ContentChild('tooltipTemplate', { static: false }),\n        __metadata(\"design:type\", typeof (_c = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _c : Object)\n    ], GaugeComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        ViewChild('textEl', { static: false }),\n        __metadata(\"design:type\", typeof (_d = typeof ElementRef !== \"undefined\" && ElementRef) === \"function\" ? _d : Object)\n    ], GaugeComponent.prototype, \"textEl\", void 0);\n    GaugeComponent = __decorate([\n        Component({\n            selector: 'ngx-charts-gauge',\n            template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"gauge chart\\\">\\n        <svg:g *ngFor=\\\"let arc of arcs; trackBy: trackBy\\\" [attr.transform]=\\\"rotation\\\">\\n          <svg:g\\n            ngx-charts-gauge-arc\\n            [backgroundArc]=\\\"arc.backgroundArc\\\"\\n            [valueArc]=\\\"arc.valueArc\\\"\\n            [cornerRadius]=\\\"cornerRadius\\\"\\n            [colors]=\\\"colors\\\"\\n            [isActive]=\\\"isActive(arc.valueArc.data)\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [valueFormatting]=\\\"valueFormatting\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event)\\\"\\n            (activate)=\\\"onActivate($event)\\\"\\n            (deactivate)=\\\"onDeactivate($event)\\\"\\n          ></svg:g>\\n        </svg:g>\\n\\n        <svg:g\\n          ngx-charts-gauge-axis\\n          *ngIf=\\\"showAxis\\\"\\n          [bigSegments]=\\\"bigSegments\\\"\\n          [smallSegments]=\\\"smallSegments\\\"\\n          [min]=\\\"min\\\"\\n          [max]=\\\"max\\\"\\n          [radius]=\\\"outerRadius\\\"\\n          [angleSpan]=\\\"angleSpan\\\"\\n          [valueScale]=\\\"valueScale\\\"\\n          [startAngle]=\\\"startAngle\\\"\\n          [tickFormatting]=\\\"axisTickFormatting\\\"\\n        ></svg:g>\\n\\n        <svg:text\\n          #textEl\\n          *ngIf=\\\"showText\\\"\\n          [style.textAnchor]=\\\"'middle'\\\"\\n          [attr.transform]=\\\"textTransform\\\"\\n          alignment-baseline=\\\"central\\\"\\n        >\\n          <tspan x=\\\"0\\\" dy=\\\"0\\\">{{ displayValue }}</tspan>\\n          <tspan x=\\\"0\\\" dy=\\\"1.2em\\\">{{ units }}</tspan>\\n        </svg:text>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n            styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".gauge .background-arc path{fill:rgba(0,0,0,.05)}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\"],\n            encapsulation: ViewEncapsulation.None,\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], GaugeComponent);\n    return GaugeComponent;\n}(BaseChartComponent));\n\nvar GaugeArcComponent = /** @class */ (function () {\n    function GaugeArcComponent() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    GaugeArcComponent.prototype.tooltipText = function (arc$$1) {\n        var label = formatLabel(arc$$1.data.name);\n        var val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc$$1.data.value);\n        }\n        else {\n            val = formatLabel(arc$$1.data.value);\n        }\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + escapeLabel(label) + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + val + \"</span>\\n    \";\n    };\n    var _a, _b;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"backgroundArc\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"valueArc\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"cornerRadius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_a = typeof ColorHelper !== \"undefined\" && ColorHelper) === \"function\" ? _a : Object)\n    ], GaugeArcComponent.prototype, \"colors\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeArcComponent.prototype, \"isActive\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeArcComponent.prototype, \"tooltipDisabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], GaugeArcComponent.prototype, \"valueFormatting\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", typeof (_b = typeof TemplateRef !== \"undefined\" && TemplateRef) === \"function\" ? _b : Object)\n    ], GaugeArcComponent.prototype, \"tooltipTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], GaugeArcComponent.prototype, \"animations\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"select\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"activate\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], GaugeArcComponent.prototype, \"deactivate\", void 0);\n    GaugeArcComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-gauge-arc]',\n            template: \"\\n    <svg:g ngx-charts-pie-arc\\n      class=\\\"background-arc\\\"\\n      [startAngle]=\\\"0\\\"\\n      [endAngle]=\\\"backgroundArc.endAngle\\\"\\n      [innerRadius]=\\\"backgroundArc.innerRadius\\\"\\n      [outerRadius]=\\\"backgroundArc.outerRadius\\\"\\n      [cornerRadius]=\\\"cornerRadius\\\"\\n      [data]=\\\"backgroundArc.data\\\"\\n      [animate]=\\\"false\\\"\\n      [pointerEvents]=\\\"false\\\">\\n    </svg:g>\\n    <svg:g ngx-charts-pie-arc\\n      [startAngle]=\\\"0\\\"\\n      [endAngle]=\\\"valueArc.endAngle\\\"\\n      [innerRadius]=\\\"valueArc.innerRadius\\\"\\n      [outerRadius]=\\\"valueArc.outerRadius\\\"\\n      [cornerRadius]=\\\"cornerRadius\\\"\\n      [fill]=\\\"colors.getColor(valueArc.data.name)\\\"\\n      [data]=\\\"valueArc.data\\\"\\n      [animate]=\\\"animations\\\"\\n      [isActive]=\\\"isActive\\\"\\n      (select)=\\\"select.emit($event)\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(valueArc)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"valueArc.data\\\">\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush,\n        })\n    ], GaugeArcComponent);\n    return GaugeArcComponent;\n}());\n\nvar GaugeAxisComponent = /** @class */ (function () {\n    function GaugeAxisComponent() {\n        this.rotate = '';\n    }\n    GaugeAxisComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    GaugeAxisComponent.prototype.update = function () {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = \"rotate(\" + this.rotationAngle + \")\";\n        this.ticks = this.getTicks();\n    };\n    GaugeAxisComponent.prototype.getTicks = function () {\n        var bigTickSegment = this.angleSpan / this.bigSegments;\n        var smallTickSegment = bigTickSegment / (this.smallSegments);\n        var tickLength = 20;\n        var ticks = {\n            big: [],\n            small: []\n        };\n        var startDistance = this.radius + 10;\n        var textDist = startDistance + tickLength + 10;\n        for (var i = 0; i <= this.bigSegments; i++) {\n            var angleDeg = i * bigTickSegment;\n            var angle = angleDeg * Math.PI / 180;\n            var textAnchor = this.getTextAnchor(angleDeg);\n            var skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                var text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor: textAnchor,\n                    text: text,\n                    textTransform: \"\\n            translate(\" + textDist * Math.cos(angle) + \", \" + textDist * Math.sin(angle) + \") rotate(\" + -this.rotationAngle + \")\\n          \"\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (var j = 1; j <= this.smallSegments; j++) {\n                var smallAngleDeg = angleDeg + j * smallTickSegment;\n                var smallAngle = smallAngleDeg * Math.PI / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    };\n    GaugeAxisComponent.prototype.getTextAnchor = function (angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        var textAnchor = 'middle';\n        if (angle > 45 && angle <= 135) {\n            textAnchor = 'start';\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = 'end';\n        }\n        return textAnchor;\n    };\n    GaugeAxisComponent.prototype.getTickPath = function (startDistance, tickLength, angle) {\n        var y1 = startDistance * Math.sin(angle);\n        var y2 = (startDistance + tickLength) * Math.sin(angle);\n        var x1 = startDistance * Math.cos(angle);\n        var x2 = (startDistance + tickLength) * Math.cos(angle);\n        var points = [{ x: x1, y: y1 }, { x: x2, y: y2 }];\n        var lineGenerator = line().x(function (d) { return d.x; }).y(function (d) { return d.y; });\n        return lineGenerator(points);\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"bigSegments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"smallSegments\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"min\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"max\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeAxisComponent.prototype, \"angleSpan\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], GaugeAxisComponent.prototype, \"startAngle\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"radius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"valueScale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], GaugeAxisComponent.prototype, \"tickFormatting\", void 0);\n    GaugeAxisComponent = __decorate([\n        Component({\n            selector: 'g[ngx-charts-gauge-axis]',\n            template: \"\\n    <svg:g [attr.transform]=\\\"rotate\\\">\\n        <svg:g *ngFor=\\\"let tick of ticks.big\\\"\\n            class=\\\"gauge-tick gauge-tick-large\\\">\\n            <svg:path [attr.d]=\\\"tick.line\\\" />\\n        </svg:g>\\n        <svg:g *ngFor=\\\"let tick of ticks.big\\\"\\n            class=\\\"gauge-tick gauge-tick-large\\\">\\n            <svg:text\\n                [style.textAnchor]=\\\"tick.textAnchor\\\"\\n                [attr.transform]=\\\"tick.textTransform\\\"\\n                alignment-baseline=\\\"central\\\">\\n                {{tick.text}}\\n            </svg:text>\\n        </svg:g>\\n        <svg:g *ngFor=\\\"let tick of ticks.small\\\"\\n            class=\\\"gauge-tick gauge-tick-small\\\">\\n            <svg:path [attr.d]=\\\"tick.line\\\" />\\n        </svg:g>\\n    </svg:g>\\n  \",\n            changeDetection: ChangeDetectionStrategy.OnPush\n        })\n    ], GaugeAxisComponent);\n    return GaugeAxisComponent;\n}());\n\nvar GaugeModule = /** @class */ (function () {\n    function GaugeModule() {\n    }\n    GaugeModule = __decorate([\n        NgModule({\n            imports: [ChartCommonModule, PieChartModule, BarChartModule],\n            declarations: [\n                LinearGaugeComponent,\n                GaugeComponent,\n                GaugeArcComponent,\n                GaugeAxisComponent\n            ],\n            exports: [\n                LinearGaugeComponent,\n                GaugeComponent,\n                GaugeArcComponent,\n                GaugeAxisComponent\n            ]\n        })\n    ], GaugeModule);\n    return GaugeModule;\n}());\n\nvar NgxChartsModule = /** @class */ (function () {\n    function NgxChartsModule() {\n    }\n    NgxChartsModule = __decorate([\n        NgModule({\n            exports: [\n                ChartCommonModule,\n                AreaChartModule,\n                BarChartModule,\n                BubbleChartModule,\n                ForceDirectedGraphModule,\n                HeatMapModule,\n                LineChartModule,\n                PolarChartModule,\n                NumberCardModule,\n                PieChartModule,\n                TreeMapModule,\n                GaugeModule\n            ]\n        })\n    ], NgxChartsModule);\n    return NgxChartsModule;\n}());\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            var formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\nexport { NgxChartsModule, ChartCommonModule, LegendComponent, ScaleLegendComponent, LegendEntryComponent, AdvancedLegendComponent, TooltipModule, TooltipService, TooltipContentComponent, TooltipDirective, StyleTypes, AlignmentTypes, ShowTypes, AxesModule, AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, reduceTicks, CountUpDirective, count, decimalChecker, Timeline, ColorHelper, ChartComponent, AreaComponent, BaseChartComponent, CircleComponent, CircleSeriesComponent, gridSize, gridLayout, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, TooltipArea, tickFormat, trimLabel, calculateViewDimensions, formatLabel, escapeLabel, getUniqueXDomainValues, getScaleType, AreaChartModule, AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent, BarChartModule, BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, SeriesHorizontal, BarLabelComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, D0Types, SeriesVerticalComponent, BubbleChartModule, BubbleChartComponent, getDomain, getScale, BubbleSeriesComponent, ForceDirectedGraphModule, ForceDirectedGraphComponent, HeatMapModule, HeatMapComponent, HeatMapCellComponent, HeatCellSeriesComponent, LineChartModule, LineChartComponent, LineComponent, LineSeriesComponent, PolarChartModule, PolarChartComponent, PolarSeriesComponent, NumberCardModule, NumberCardComponent, CardComponent, CardSeriesComponent, PieChartModule, AdvancedPieChartComponent, PieChartComponent, PieArcComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent, PieLabelComponent, TreeMapModule, TreeMapComponent, TreeMapCellComponent, TreeMapCellSeriesComponent, GaugeModule, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, LinearGaugeComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA4dwD,AAEjD;;;;;;gYACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA2PiB,AAOnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACyB;;;;;;;;;;;;;iCAaC,AAE1B;;;;;;gKACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA0QY,AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACkB;;;;;;KAMpB;;;;;;;;;;;;;;;gDASiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA8FW,AAe1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAwIW,AAQ3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA2Ce,AAQhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DAqEgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0EAiH6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8RwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAqLnB,AAK9B;;;;;;;;;;;;;;;;;;;;;;;;;;oBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCA4DU,AAM9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAqMmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAuG+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAmQuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA2H+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOpC;;;;;;KAMlB;;;;;;;;;;;;;;;;;;;gDAOc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAwV2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA0F0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;;;;;;;;;;;;;;;;;;;;;kDA0B0B;;;;;;;;;;;;;;;;;;;;;;;;;oBAOvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DA2EkC;;;;;;;;;;;;;;;;;;;;;;;;oBAO5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DA+B6B;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DAgEyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA4KR,AAQpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAqHe,AAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAqNiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuBnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA8Le,AAK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACkB;;;;;;;;;;;;;;;;;;;;;;;;KAwBpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAequfgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oEAkZyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA0a4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAoJsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO5B;;;;;;KAMvB;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAiBmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAkQO,AAMxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oEAqT+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sEAuWuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8EAyS6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2EAgWkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEA8T4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oEA+WuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4EAyS6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yEAmWkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4EA2QwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiB5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oEAgQoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiB3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAwFW,AAO7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACmB;;;;;;KAMrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAiCkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DA+YqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqB/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DA0KiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBhC;;;;;;KAMzB;;;;;;;;;;;;;;;;;;;gDAaqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA4LuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS7B;;;;;;KAM/B;;;;;;;;;;;;;;;gDAW4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAuHM,AAMhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gEAwGmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAqU8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;KAMpB;;;;;;;;;;;;;;;;;;;;;;;gDAeiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAyDU,AAmBzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAmaoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqB/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DA4KiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;KAMvB;;;;;;;;;;;;;;;;;;;;;;;gDAemB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA4YyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DAwLiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4EA0H+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAiHE,AAM7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA8LQ,AAM3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAwMuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DA+NoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAwFgB,AAMlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDA8L0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO9B;;;;;;KAMtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAuBkB;;;;;;KAMlB;;;;;;;;;;;;;;;;;;;;;gDAaoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA2KO,AAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA0HkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA+EqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;KAMvB;;;;;;;;;;;;;;;;;;;;;;;gDAeoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAgJc,AAMhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAqFkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAkF2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASrC;;;;;;KAMpB;;;;;;;;;;;;;;;;;;;;;;;gDAeiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAsJwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAmTsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAwEmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAsHqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOpC;;;;;;KAMtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAiBe;;;;;;KAMf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkBmB;;;;;;;;;;;;;;;;;;"}